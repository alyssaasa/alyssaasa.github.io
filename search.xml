<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习工具网站</title>
    <url>//posts/405/</url>
    <content><![CDATA[<p>学习和生活当中总结的一些实用的学习网站</p>
<span id="more"></span>

<h2 id="C"><a href="#C" class="headerlink" title="C#"></a><span>C#</span></h2><ul>
<li><a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/ms228358(v=vs.90)">C# for Java Developers</a></li>
</ul>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a><span>Shell</span></h2><ul>
<li><a href="http://c.biancheng.net/view/743.html">Shell变量：Shell变量的定义、赋值和删除</a></li>
<li><a href="http://c.biancheng.net/view/1120.html">Shell字符串</a></li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>C#</tag>
        <tag>清单</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习白板推导</title>
    <url>//posts/401/</url>
    <content><![CDATA[<h2 id="白板推导"><a href="#白板推导" class="headerlink" title="白板推导"></a><span>白板推导</span></h2><ul>
<li><a href="https://www.bilibili.com/video/av28186618">SVM 白板推导</a></li>
<li></li>
<li><span id="more"></span></li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习相关知识网站</title>
    <url>//posts/406/</url>
    <content><![CDATA[<h2 id="Batch-Normalization-and-Layer-Normalization"><a href="#Batch-Normalization-and-Layer-Normalization" class="headerlink" title="Batch Normalization and Layer Normalization "></a><span>Batch Normalization and Layer Normalization </span></h2><ul>
<li><a href="http://arxiv.org/abs/1502.03167">Batch Normalization 论文</a></li>
<li><a href="https://www.bilibili.com/video/av16000304">Batch Normalization 作用</a> </li>
<li><a href="https://arxiv.org/abs/1607.06450">Layer Normalization 论文</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/54530247">Layer Normalization 讲解</a><span id="more"></span></li>
</ul>
<h2 id="tensorflow-代码"><a href="#tensorflow-代码" class="headerlink" title=" tensorflow 代码 "></a><span> tensorflow 代码 </span></h2><p><a href="https://www.github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/layers/python/layers/layers.py">tensorflow/contrib/layers/python/layers/layers.py</a></p>
<ul>
<li><p>tf.contrib.layers.batch_norm() 和 tf.contrib.layers.layer_norm() 的主要作用是根据自己需要求的维度，先求出均值和方差，并为 beta 和 gamma 进行初始化.</p>
</li>
<li><p>tf.nn.batch_normalization() 的作用是根据你求出的均值和方差，对原输入进行归一化操作。</p>
</li>
</ul>
<h5 id="1-tf-nn-moments-函数"><a href="#1-tf-nn-moments-函数" class="headerlink" title="1. tf.nn.moments()函数"></a>1. <a href="https://blog.csdn.net/qq_16320025/article/details/89397883">tf.nn.moments()函数</a></h5><ul>
<li>定义：<code>def moments(x, axes, name=None, keep_dims=False)</code></li>
<li>解释：<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">x 可以理解为我们输出的数据，形如 [batchsize, <span class="built_in">height</span>, <span class="built_in">width</span>, channel]</span><br><span class="line"><span class="built_in">axes</span> 表示在哪个维度上求解，是个list，例如 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">name 就是个名字，不多解释</span><br><span class="line">keep_dims 是否保持维度，不多解释</span><br></pre></td></tr></table></figure></li>
<li>输出：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Two Tensor objects: mean andvariance. (均值和方差)</span><br><span class="line">输出的维度：axes表示要在哪些维度上求解，输出的均值和方差的维度与剩下的维度保持一致。</span><br><span class="line">例如：</span><br><span class="line">  inputs.shape = [<span class="number">128</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>], axes = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], 那么 mean.shape = [<span class="number">5</span>]</span><br><span class="line">  inputs.shape = [<span class="number">128</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>], axes = [<span class="number">0</span>,<span class="number">1</span>], 那么 mean.shape = [<span class="number">2</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li>
<li>举例：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">img = tf.Variable(tf.random_normal([<span class="number">128</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">axis = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] <span class="comment"># 所以剩余的是四维，看做一个整体shape为[3]</span></span><br><span class="line">mean, variance = tf.nn.moments(img, axis)</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    mean_, variance_ = sess.run([mean, variance])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;均值：&quot;</span>,mean_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;方差：&quot;</span>,variance_)</span><br><span class="line">均值： [-<span class="number">0.03587267</span>  <span class="number">0.06021447</span>  <span class="number">0.02401767</span>]</span><br><span class="line">方差： [<span class="number">0.99473494</span> <span class="number">0.93040663</span> <span class="number">0.98113006</span>]</span><br><span class="line"></span><br><span class="line">eg2:</span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">img = tf.Variable(tf.random_normal([<span class="number">128</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">axis = [<span class="number">0</span>,<span class="number">1</span>] <span class="comment">#所以剩余的是第三 四维，看做一个整体shape为[2, 3]</span></span><br><span class="line">mean, variance = tf.nn.moments(img, axis)</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    mean_, variance_ = sess.run([mean, variance])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;均值：&quot;</span>,mean_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;方差：&quot;</span>,variance_)</span><br><span class="line">均值: </span><br><span class="line">    [[-<span class="number">0.04313184</span>  <span class="number">0.01417894</span>  <span class="number">0.06847101</span>]</span><br><span class="line">     [ <span class="number">0.04183875</span> -<span class="number">0.01508999</span> -<span class="number">0.11406976</span>]]</span><br><span class="line">方差： </span><br><span class="line">    [[<span class="number">0.976376</span>   <span class="number">0.91841435</span> <span class="number">1.0207324</span> ]</span><br><span class="line">     [<span class="number">1.0403597</span>  <span class="number">0.9773739</span>  <span class="number">1.0360421</span> ]]</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="2-tf-contrib-layers-batch-norm-函数"><a href="#2-tf-contrib-layers-batch-norm-函数" class="headerlink" title="2. tf.contrib.layers.batch_norm() 函数"></a>2. tf.contrib.layers.batch_norm() 函数</h5><p>代码中和计算均值和方差不太相关的地方删掉了，可以自行看源码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_norm</span>(<span class="params">inputs,</span></span></span><br><span class="line"><span class="params"><span class="function">               decay=<span class="number">0.999</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               center=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               scale=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               epsilon=<span class="number">0.001</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               activation_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               param_initializers=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               param_regularizers=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               updates_collections=ops.GraphKeys.UPDATE_OPS,</span></span></span><br><span class="line"><span class="params"><span class="function">               is_training=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               reuse=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               variables_collections=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               outputs_collections=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               trainable=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               batch_weights=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               fused=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               data_format=DATA_FORMAT_NHWC,</span></span></span><br><span class="line"><span class="params"><span class="function">               zero_debias_moving_mean=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               scope=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               renorm=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               renorm_clipping=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               renorm_decay=<span class="number">0.99</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               adjustment=<span class="literal">None</span></span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Adds a Batch Normalization layer from .</span></span><br><span class="line"><span class="string">  1. Can be used as a normalizer function for conv2d and fully_connected. </span></span><br><span class="line"><span class="string">  2. Args:</span></span><br><span class="line"><span class="string">      - inputs: A tensor with 2 or more dimensions, where the first dimension has `batch_size`. </span></span><br><span class="line"><span class="string">        The normalization is over all but the last dimension if `data_format` is `NHWC` </span></span><br><span class="line"><span class="string">        and the second dimension if `data_format` is `NCHW`.</span></span><br><span class="line"><span class="string">        也就是说：channel通道不做归一化，即 batch norm 取不同样本的同一个通道的特征做归一化；</span></span><br><span class="line"><span class="string">      - data_format: A string. `NHWC` (default) and `NCHW` are supported.</span></span><br><span class="line"><span class="string">      - reuse的相关内容看源码</span></span><br><span class="line"><span class="string">      - updates_collections：when training, the moving_mean and moving_variance need to be updated. </span></span><br><span class="line"><span class="string">        By default the update ops are placed in updates_collections = tf.GraphKeys.UPDATE_OPS. </span></span><br><span class="line"><span class="string">        If None, a control dependency would be added to make sure the updates are computed in place.</span></span><br><span class="line"><span class="string">  3. Returns:</span></span><br><span class="line"><span class="string">      A `Tensor` representing the output of the operation.</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  inputs = ops.convert_to_tensor(inputs)</span><br><span class="line">  rank = inputs.get_shape().ndims</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> data_format <span class="keyword">not</span> <span class="keyword">in</span> (DATA_FORMAT_NCHW, DATA_FORMAT_NHWC):</span><br><span class="line">     <span class="keyword">raise</span> ValueError(<span class="string">&#x27;data_format has to be either NCHW or NHWC.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  layer_variable_getter = _build_variable_getter()</span><br><span class="line">  <span class="keyword">with</span> variable_scope.variable_scope(scope,<span class="string">&#x27;BatchNorm&#x27;</span>, [inputs],reuse=reuse, custom_getter=layer_variable_getter) <span class="keyword">as</span> sc:</span><br><span class="line">    inputs = ops.convert_to_tensor(inputs)</span><br><span class="line">    inputs_shape = inputs.get_shape()</span><br><span class="line">    inputs_rank = inputs_shape.ndims</span><br><span class="line">    <span class="keyword">if</span> inputs_rank <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Inputs %s has undefined rank.&#x27;</span> % inputs.name)</span><br><span class="line">    dtype = inputs.dtype.base_dtype</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data_format == DATA_FORMAT_NCHW:</span><br><span class="line">       moments_axes = [<span class="number">0</span>] + <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>, inputs_rank))  <span class="comment"># [0,2,3]</span></span><br><span class="line">       params_shape = inputs_shape[<span class="number">1</span>:<span class="number">2</span>] <span class="comment"># C</span></span><br><span class="line">       <span class="comment"># params_shape的rank和inputs_rank相同，除了channel维度以外，其他都是1 -&gt; [1,C,1,1]</span></span><br><span class="line">       params_shape_broadcast = <span class="built_in">list</span>([<span class="number">1</span>, inputs_shape[<span class="number">1</span>].value] + [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, inputs_rank)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       moments_axes = <span class="built_in">list</span>(<span class="built_in">range</span>(inputs_rank - <span class="number">1</span>)) <span class="comment"># [1,2,3]</span></span><br><span class="line">       params_shape = inputs_shape[-<span class="number">1</span>:]  <span class="comment"># C</span></span><br><span class="line">       params_shape_broadcast = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allocate parameters for the beta and gamma of the normalization.</span></span><br><span class="line">    beta, gamma = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    ......</span><br><span class="line">    beta = variables.model_variable(<span class="string">&#x27;beta&#x27;</span>, shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable)</span><br><span class="line">    gamma = variables.model_variable(<span class="string">&#x27;gamma&#x27;</span>, shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create moving_mean and moving_variance variables</span></span><br><span class="line">    ......</span><br><span class="line">    moving_mean = variables.model_variable(<span class="string">&#x27;moving_mean&#x27;</span>, shape=params_shape, dtype=dtype, initializer=moving_mean_initializer, trainable=<span class="literal">False</span>, collections=moving_mean_collections)</span><br><span class="line">    moving_variance = variables.model_variable(<span class="string">&#x27;moving_variance&#x27;</span>, shape=params_shape, dtype=dtype, initializer=moving_variance_initializer, trainable=<span class="literal">False</span>, collections=moving_variance_collections)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断是训练阶段还是测试阶段，不同的时期计算均值的方差的方式是不同的，训练时基于的是batch</span></span><br><span class="line">    is_training_value = utils.constant_value(is_training)</span><br><span class="line">    need_moments = is_training_value <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> is_training_value</span><br><span class="line">    <span class="keyword">if</span> need_moments:</span><br><span class="line">       <span class="comment"># Calculate the moments based on the individual batch.</span></span><br><span class="line">       ......</span><br><span class="line">       <span class="keyword">if</span> data_format == DATA_FORMAT_NCHW:</span><br><span class="line">          <span class="comment"># 下面这样写和直接：mean, variance = nn.moments(inputs, moments_axes) 有啥区别..？</span></span><br><span class="line">          mean, variance = nn.moments(inputs, moments_axes, keep_dims=<span class="literal">True</span>)</span><br><span class="line">          mean = array_ops.reshape(mean, [-<span class="number">1</span>])</span><br><span class="line">          variance = array_ops.reshape(variance, [-<span class="number">1</span>])</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">          mean, variance = nn.moments(inputs, moments_axes)</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># 训练阶段，moving_mean, moving_variance 需要更新。</span></span><br><span class="line">       moving_vars_fn = <span class="keyword">lambda</span>: (moving_mean, moving_variance)</span><br><span class="line">       <span class="keyword">if</span> updates_collections <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">_force_updates</span>():</span></span><br><span class="line">             <span class="string">&quot;&quot;&quot;Internal function forces updates moving_vars if is_training.&quot;&quot;&quot;</span></span><br><span class="line">             update_moving_mean = moving_averages.assign_moving_average(moving_mean, mean, decay, zero_debias=zero_debias_moving_mean)</span><br><span class="line">             update_moving_variance = moving_averages.assign_moving_average(moving_variance, variance, decay, zero_debias=<span class="literal">False</span>)</span><br><span class="line">             <span class="keyword">with</span> ops.control_dependencies([update_moving_mean, update_moving_variance]):</span><br><span class="line">                <span class="keyword">return</span> array_ops.identity(mean), array_ops.identity(variance)</span><br><span class="line">          <span class="comment"># need_moments 不是已经能够判断是不是在训练阶段了吗?</span></span><br><span class="line">          mean, variance = utils.smart_cond(is_training, _force_updates, moving_vars_fn)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">_delay_updates</span>():</span></span><br><span class="line">             <span class="string">&quot;&quot;&quot;Internal function that delay updates moving_vars if is_training.&quot;&quot;&quot;</span></span><br><span class="line">             update_moving_mean = moving_averages.assign_moving_average(moving_mean, mean, decay, zero_debias=zero_debias_moving_mean)</span><br><span class="line">             update_moving_variance = moving_averages.assign_moving_average(moving_variance, variance, decay, zero_debias=<span class="literal">False</span>)</span><br><span class="line">             <span class="keyword">return</span> update_moving_mean, update_moving_variance</span><br><span class="line"></span><br><span class="line">          update_mean, update_variance = utils.smart_cond(is_training, _delay_updates, moving_vars_fn)</span><br><span class="line">          ops.add_to_collections(updates_collections, update_mean)</span><br><span class="line">          ops.add_to_collections(updates_collections, update_variance)</span><br><span class="line">        </span><br><span class="line">          <span class="comment"># Use computed moments during training and moving_vars otherwise.</span></span><br><span class="line">          vars_fn = <span class="keyword">lambda</span>: (mean, variance)</span><br><span class="line">          mean, variance = utils.smart_cond(is_training, vars_fn, moving_vars_fn)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       mean, variance = moving_mean, moving_variance</span><br><span class="line">    <span class="keyword">if</span> data_format == DATA_FORMAT_NCHW:</span><br><span class="line">       mean = array_ops.reshape(mean, params_shape_broadcast)</span><br><span class="line">       variance = array_ops.reshape(variance, params_shape_broadcast)</span><br><span class="line">       <span class="keyword">if</span> beta <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          beta = array_ops.reshape(beta, params_shape_broadcast)</span><br><span class="line">       <span class="keyword">if</span> gamma <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          gamma = array_ops.reshape(gamma, params_shape_broadcast)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Compute batch_normalization.</span></span><br><span class="line">    outputs = nn.batch_normalization(inputs, mean, variance, beta, gamma, epsilon)</span><br><span class="line">    outputs.set_shape(inputs_shape)</span><br><span class="line">    <span class="keyword">if</span> activation_fn <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">       outputs = activation_fn(outputs)</span><br><span class="line">    <span class="keyword">return</span> utils.collect_named_outputs(outputs_collections, sc.name, outputs)</span><br></pre></td></tr></table></figure>

<h5 id="3-tf-contrib-layers-layer-norm-函数"><a href="#3-tf-contrib-layers-layer-norm-函数" class="headerlink" title="3. tf.contrib.layers.layer_norm() 函数"></a>3. tf.contrib.layers.layer_norm() 函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer_norm</span>(<span class="params">inputs,</span></span></span><br><span class="line"><span class="params"><span class="function">               center=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               scale=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               activation_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               reuse=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               variables_collections=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               outputs_collections=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               trainable=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               begin_norm_axis=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               begin_params_axis=-<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               scope=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Adds a Layer Normalization layer.</span></span><br><span class="line"><span class="string">1. Can be used as a normalizer function for conv2d and fully_connected.</span></span><br><span class="line"><span class="string">2. Given a tensor `inputs` of rank `R`, moments are calculated and normalization is performed over axes `begin_norm_axis ... R - 1`.  Scaling and centering, if requested, is performed over axes `begin_params_axis .. R - 1`. By default, `begin_norm_axis = 1` and `begin_params_axis = -1`, meaning that normalization is performed over all but the first axis (the `HWC` if `inputs` is `NHWC`), while the `beta` and `gamma` trainable parameters are calculated for the rightmost axis (the `C` if `inputs` is `NHWC`). Scaling and recentering is performed via broadcast of the `beta` and `gamma` parameters with the normalized tensor.</span></span><br><span class="line"><span class="string">3. The shapes of `beta` and `gamma` are `inputs.shape[begin_params_axis:]`, and this part of the inputs&#x27; shape must be fully defined.</span></span><br><span class="line"><span class="string">4. Args:</span></span><br><span class="line"><span class="string">    - inputs: A tensor having rank `R`. The normalization is performed over axes `begin_norm_axis ... R  - 1` and centering and scaling parameters are calculated over `begin_params_axis ... R - 1`.</span></span><br><span class="line"><span class="string">    - center: If True, add offset of `beta` to normalized tensor. If False, `beta` is ignored.</span></span><br><span class="line"><span class="string">    - scale: If True, multiply by `gamma`. If False, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling can be done by the next layer.</span></span><br><span class="line"><span class="string">    - activation_fn: Activation function, default set to None to skip it and maintain a linear activation.</span></span><br><span class="line"><span class="string">    - begin_norm_axis: The first normalization dimension: normalization will be performed along dimensions `begin_norm_axis : rank(inputs)`</span></span><br><span class="line"><span class="string">    - begin_params_axis: The first parameter (beta, gamma) dimension: scale and centering parameters will have dimensions `begin_params_axis : rank(inputs)` and will be broadcast with the normalized inputs accordingly.</span></span><br><span class="line"><span class="string">5. Returns:</span></span><br><span class="line"><span class="string">    A `Tensor` representing the output of the operation, having the same shape and dtype as `inputs`.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">with</span> variable_scope.variable_scope(scope, <span class="string">&#x27;LayerNorm&#x27;</span>, [inputs], reuse=reuse) <span class="keyword">as</span> sc:</span><br><span class="line">    inputs = ops.convert_to_tensor(inputs)</span><br><span class="line">    inputs_shape = inputs.shape</span><br><span class="line">    inputs_rank = inputs_shape.ndims</span><br><span class="line">    <span class="keyword">if</span> inputs_rank <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Inputs %s has undefined rank.&#x27;</span> % inputs.name)</span><br><span class="line">    dtype = inputs.dtype.base_dtype</span><br><span class="line">    <span class="keyword">if</span> begin_norm_axis &lt; <span class="number">0</span>:</span><br><span class="line">      begin_norm_axis = inputs_rank + begin_norm_axis</span><br><span class="line">    <span class="keyword">if</span> begin_params_axis &gt;= inputs_rank <span class="keyword">or</span> begin_norm_axis &gt;= inputs_rank:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">&#x27;begin_params_axis (%d) and begin_norm_axis (%d) must be &lt; rank(inputs) (%d)&#x27;</span> % (begin_params_axis, begin_norm_axis, inputs_rank))</span><br><span class="line">    params_shape = inputs_shape[begin_params_axis:]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> params_shape.is_fully_defined():</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Inputs %s: shape(inputs)[%s:] is not fully defined: %s&#x27;</span> % (inputs.name, begin_params_axis, inputs_shape))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Allocate parameters for the beta and gamma of the normalization.</span></span><br><span class="line">    beta, gamma = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> center:</span><br><span class="line">      beta_collections = utils.get_variable_collections(variables_collections,<span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">      beta = variables.model_variable(<span class="string">&#x27;beta&#x27;</span>, shape=params_shape,dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)</span><br><span class="line">    <span class="keyword">if</span> scale:</span><br><span class="line">      gamma_collections = utils.get_variable_collections(variables_collections, <span class="string">&#x27;gamma&#x27;</span>)</span><br><span class="line">      gamma = variables.model_variable(<span class="string">&#x27;gamma&#x27;</span>, shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Calculate the moments on the last axis (layer activations).</span></span><br><span class="line">    norm_axes = <span class="built_in">list</span>(<span class="built_in">range</span>(begin_norm_axis, inputs_rank))</span><br><span class="line">    mean, variance = nn.moments(inputs, norm_axes, keep_dims=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute layer normalization using the batch_normalization function.</span></span><br><span class="line">    variance_epsilon = <span class="number">1e-12</span></span><br><span class="line">    outputs = nn.batch_normalization(inputs, mean, variance, offset=beta, scale=gamma, variance_epsilon=variance_epsilon)</span><br><span class="line">    outputs.set_shape(inputs_shape)</span><br><span class="line">    <span class="keyword">if</span> activation_fn <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">      outputs = activation_fn(outputs)</span><br><span class="line">    <span class="keyword">return</span> utils.collect_named_outputs(outputs_collections, sc.name, outputs)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>NLP 学习相关网站</title>
    <url>//posts/407/</url>
    <content><![CDATA[<h2 id="BERT"><a href="#BERT" class="headerlink" title=" BERT "></a><span> BERT </span></h2><ul>
<li><p>📽️ <a href="https://www.youtube.com/watch?v=tFBrqPPxWzE&list=PLJV_el3uVTsO07RpBYFsXg-bN5Lu0nhdG&index=17">Overview of NLP Tasks</a></p>
</li>
<li><p>📽️ <a href="https://www.youtube.com/watch?v=1_gRK9EIQpc&list=PLJV_el3uVTsO07RpBYFsXg-bN5Lu0nhdG&index=18">BERT and its family - Introduction and Fine-tune</a></p>
</li>
<li><p>📽️ <a href="https://www.youtube.com/watch?v=Bywo7m6ySlk&list=PLJV_el3uVTsO07RpBYFsXg-bN5Lu0nhdG&index=19">BERT and its family - ELMo, BERT, GPT, XLNet, MASS, BART, UniLM, ELECTRA, and more</a></p>
</li>
<li><p>📄 <a href="https://zhuanlan.zhihu.com/p/66676144">BERT 时代与后时代的 NLP - 知乎 (zhihu.com)</a></p>
</li>
</ul>
<span id="more"></span>

<h2 id="GPT-3"><a href="#GPT-3" class="headerlink" title=" GPT-3 "></a><span> GPT-3 </span></h2><ul>
<li><p><a href="https://dugas.ch/artificial_curiosity/GPT_architecture.html">The GPT-3 Architecture, on a Napkin (dugas.ch)</a></p>
</li>
<li><p><a href="https://gpt3examples.com/#examples">GPT3 Examples</a></p>
</li>
</ul>
<h2 id="Bert-fine-tune-策略"><a href="#Bert-fine-tune-策略" class="headerlink" title=" Bert fine-tune 策略 "></a><span> Bert fine-tune 策略 </span></h2><p><a href="https://arxiv.org/pdf/1905.05583.pdf">bert fine-tune 策略</a></p>
<ul>
<li>The top layer of BERT is more useful for text classification; </li>
<li>With an appropriate layer-wise decreasing learning rate, BERT can overcome the catastrophic for getting problem; </li>
<li>Within-task and in-domain further pre-training can significantly boost its performance; </li>
<li>A preceding multi-task fine-tuning is also helpful to the single-task fine-tuning, but its benefit is smaller than further pre-training; </li>
<li>BERT can improve the task with small-size data.</li>
</ul>
<h2 id="CTR-预估模型"><a href="#CTR-预估模型" class="headerlink" title=" CTR 预估模型 "></a><span> CTR 预估模型 </span></h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/61154299">前深度学习时代的CTR预估模型</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/63186101">基于深度学习的CTR预估模型</a></li>
</ul>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>将keras的h5文件转为tensorflow的pb文件</title>
    <url>//posts/301/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><span>背景</span></h2><p>目前keras框架使用简单，很容易上手，深得广大算法工程师的喜爱，但是当部署到客户端时，可能会出现各种各样的bug，甚至不支持使用keras，本文来解决的是将keras的h5模型转换为客户端常用的tensorflow的pb模型并使用tensorflow加载pb模型。</p>
<span id="more"></span>

<h2 id="将keras的h5转为tensorflow加载pb"><a href="#将keras的h5转为tensorflow加载pb" class="headerlink" title="将keras的h5转为tensorflow加载pb"></a><span>将keras的h5转为tensorflow加载pb</span></h2><p>🎋. 网上各种给的代码乱七八糟，直接用下面这个链接的程序转就好了：<a href="https://github.com/amir-abdi/keras_to_tensorflow">https://github.com/amir-abdi/keras_to_tensorflow</a></p>
<p>🎋. <strong>keras中：</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cnn.save(<span class="string">&quot;model.h5&quot;</span>)   <span class="comment"># 保存模型和权值</span></span><br><span class="line">cnn.save_weights(<span class="string">&quot;model_weights.h5&quot;</span>) <span class="comment"># 保存权值</span></span><br><span class="line">cnn = load_model(<span class="string">&quot;model.h5&quot;</span>) <span class="comment"># 导入模型和权值</span></span><br><span class="line">cnn.load_weights(<span class="string">&quot;model_weights.h5&quot;</span>)  <span class="comment"># 导入权值</span></span><br></pre></td></tr></table></figure>

<p> 🎋. <strong>在python中的使用：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recognize</span>(<span class="params">input_1, input_2</span>):</span></span><br><span class="line">   <span class="keyword">with</span> tf.Graph().as_default():</span><br><span class="line">       output_graph_def = tf.GraphDef()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;model.pb&#x27;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">           output_graph_def.ParseFromString(f.read())</span><br><span class="line">           _ = tf.import_graph_def(output_graph_def, name=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 这里是看pb文件中保存的模型的每一层的名字</span></span><br><span class="line">       tensor_name = [tensor.name <span class="keyword">for</span> tensor <span class="keyword">in</span> output_graph_def.node]</span><br><span class="line">       <span class="built_in">print</span>(tensor_name)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">           init = tf.global_variables_initializer()</span><br><span class="line">           sess.run(init)</span><br><span class="line"></span><br><span class="line">           input_x1 = sess.graph.get_tensor_by_name(<span class="string">&quot;input_1:0&quot;</span>)</span><br><span class="line">           input_x2 = sess.graph.get_tensor_by_name(<span class="string">&quot;input_2:0&quot;</span>)</span><br><span class="line">           output = sess.graph.get_tensor_by_name(<span class="string">&quot;dense_3/Sigmoid:0&quot;</span>)</span><br><span class="line">           <span class="built_in">print</span>(sess.run(output, feed_dict=&#123;input_x1:input_1, input_x2:input_2&#125;))</span><br></pre></td></tr></table></figure>
<p>参考代码：<a href="https://blog.csdn.net/Butertfly/article/details/80952987">https://blog.csdn.net/Butertfly/article/details/80952987</a></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 空间换时间</title>
    <url>//posts/1/</url>
    <content><![CDATA[<p>HashMap 的使用，很多时候都是为了空间换时间。</p>
<p>有时遇到字母或者字符时，还可以利用固定长度的数组代替 HashMap，比如字符为 <code>Object[256]</code> , 字母的话为 <code>Object[26]</code> 。 </p>
<span id="more"></span>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><span>例题</span></h2><h3 id="leetcode-387-First-Unique-Character-in-a-String"><a href="#leetcode-387-First-Unique-Character-in-a-String" class="headerlink" title="leetcode 387. First Unique Character in a String"></a><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">leetcode 387. First Unique Character in a String</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a string, find the first non-repeating character in it and <span class="keyword">return</span> it<span class="string">&#x27;s index. If it doesn&#x27;</span>t exist, <span class="keyword">return</span> -<span class="number">1.</span></span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">s = <span class="string">&quot;leetcode&quot;</span>  <span class="keyword">return</span> <span class="number">0.</span></span><br><span class="line">s = <span class="string">&quot;loveleetcode&quot;</span>  <span class="keyword">return</span> <span class="number">2.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以用hash表，统计每个字符出现的次数，然后再遍历一遍字符串，当当前元素出现的次数为1时，输出该字符的index。</li>
<li>因为字符串中字符的种类最多256个，所以可以用数组模拟hash表。以字符的index作为key，出现次数作为value即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> ch:s.toCharArray())</span><br><span class="line">        count[ch-<span class="string">&#x27;0&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        <span class="keyword">if</span>(count[s.charAt(i)-<span class="string">&#x27;0&#x27;</span>]==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>soft label 和 hard label</title>
    <url>//posts/302/</url>
    <content><![CDATA[<p>soft label：软标签，例如：probs 0.3, 0,8, 0,2…</p>
<p>hard label：硬标签，例如：实际label值 0, 1, 2…</p>
<span id="more"></span>

<h2 id="label-选择"><a href="#label-选择" class="headerlink" title=" label 选择 "></a><span> label 选择 </span></h2><ul>
<li><p>硬标签：使用会比较多一点，用于非是即非的任务上，例如是猫就是猫，是狗就是狗；</p>
</li>
<li><p>软标签：</p>
<ul>
<li>用于模棱两可的情况；</li>
<li>用于蒸馏，例如，计算 teacher 模型的参数于 student 模型参数的 loss，用硬标签会过于绝对，不利于 student 模型更好地学习 teacher 参数的分布和 teacher 的决策行为，当然也可以软硬标签都用上，不过在大规模无监督的蒸馏背景下，用 soft label 更为何时。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>//posts/2/</url>
    <content><![CDATA[<h2 id="二叉树结构的定义"><a href="#二叉树结构的定义" class="headerlink" title="二叉树结构的定义"></a><span>二叉树结构的定义</span></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a><span>二叉树的遍历</span></h2><h3 id="leetcode-144-二叉树的先序遍历"><a href="#leetcode-144-二叉树的先序遍历" class="headerlink" title="leetcode 144 . 二叉树的先序遍历"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">leetcode 144 . 二叉树的先序遍历</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(node==<span class="keyword">null</span>)  <span class="comment">// 终止条件</span></span><br><span class="line">       <span class="keyword">return</span>;     </span><br><span class="line">   res.add(node.val);         <span class="comment">// 先序遍历，访问到当前节点，需要执行的操作</span></span><br><span class="line">   preorder(node.left, res);  <span class="comment">// 访问左子节点</span></span><br><span class="line">   preorder(node.right, res); <span class="comment">// 访问右子节点</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"> List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> preorder(root, res);</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="leetcode-94-二叉树的中序遍历"><a href="#leetcode-94-二叉树的中序遍历" class="headerlink" title="leetcode 94. 二叉树的中序遍历"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">leetcode 94. 二叉树的中序遍历</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(node==<span class="keyword">null</span>)  <span class="comment">// 终止条件</span></span><br><span class="line">       <span class="keyword">return</span>;           </span><br><span class="line">   preorder(node.left, res);  <span class="comment">// 访问左子节点</span></span><br><span class="line">   res.add(node.val);         <span class="comment">// 中序遍历，访问到当前节点，需要执行的操作</span></span><br><span class="line">   preorder(node.right, res); <span class="comment">// 访问右子节点</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="leetcode-145-二叉树的后序遍历"><a href="#leetcode-145-二叉树的后序遍历" class="headerlink" title="leetcode 145. 二叉树的后序遍历"></a><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">leetcode 145. 二叉树的后序遍历</a></h3>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)  <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">return</span>;           </span><br><span class="line">    preorder(node.left, res);   <span class="comment">// 访问左子节点</span></span><br><span class="line">    preorder(node.right, res);  <span class="comment">// 访问右子节点</span></span><br><span class="line">    res.add(node.val);          <span class="comment">// 后序遍历，访问到当前节点，需要执行的操作</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="leetcode-102-二叉树的层次遍历"><a href="#leetcode-102-二叉树的层次遍历" class="headerlink" title="leetcode 102. 二叉树的层次遍历"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">leetcode 102. 二叉树的层次遍历</a></h3><blockquote>
<p>要注意用两个临时变量 node_count 和 next_count 来记录当前层和下一层节点的数量</p>
</blockquote>
<p>以前我想的方法是当队列中访问到null节点时表示当前层已经访问完，显然这不是一个好的方法，尤其是到最后一层，下一层都是null了，那么就还要加条件判断当前层节点个数是不是空，就很麻烦。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">   List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> result;   <span class="comment">// 别忘了二叉树为空的特殊情况处理</span></span><br><span class="line"></span><br><span class="line">   List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> LinkedList();   <span class="comment">// 用队列来暂存二叉树的节点</span></span><br><span class="line">   que.add(root);</span><br><span class="line">   <span class="keyword">int</span> node_count = <span class="number">1</span>;    <span class="comment">// 用来表示当前层节点个数</span></span><br><span class="line">   <span class="keyword">int</span> next_count = <span class="number">0</span>;    <span class="comment">// 用来表示下一层节点个数</span></span><br><span class="line">   <span class="keyword">while</span>(!que.isEmpty()) &#123;</span><br><span class="line">       TreeNode tmp_node = que.remove();</span><br><span class="line">       tmp_res.add(tmp_node.val);</span><br><span class="line">       node_count -= <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span>(tmp_node.left!=<span class="keyword">null</span>) &#123;   <span class="comment">// 左子节点不为空，将左子节点加入队列</span></span><br><span class="line">         que.add(tmp_node.left);</span><br><span class="line">         next_count += <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(tmp_node.right!=<span class="keyword">null</span>) &#123;  <span class="comment">// 右子节点不为空，将右子节点加入队列</span></span><br><span class="line">         que.add(tmp_node.right);</span><br><span class="line">         next_count += <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(node_count==<span class="number">0</span>) &#123;   <span class="comment">//表示当前层已经访问完</span></span><br><span class="line">         node_count = next_count;</span><br><span class="line">         next_count = <span class="number">0</span>;</span><br><span class="line">         result.add(tmp_res);</span><br><span class="line">         tmp_res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树例题"><a href="#二叉树例题" class="headerlink" title="二叉树例题"></a><span>二叉树例题</span></h2><h3 id="二叉树给定任意一个节点，找出其中序遍历的下一个节点（剑指-offer）："><a href="#二叉树给定任意一个节点，找出其中序遍历的下一个节点（剑指-offer）：" class="headerlink" title="二叉树给定任意一个节点，找出其中序遍历的下一个节点（剑指 offer）："></a>二叉树给定任意一个节点，找出其中序遍历的下一个节点（剑指 offer）：</h3><p>题目描述：给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="number">1</span></span><br><span class="line">      /   \</span><br><span class="line">     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">   /  \   / \</span><br><span class="line">  <span class="number">4</span>    <span class="number">5</span> <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"> /    / \    </span><br><span class="line"><span class="number">14</span>   <span class="number">8</span>   <span class="number">9</span>   </span><br><span class="line">   /  \   </span><br><span class="line">  <span class="number">10</span>  <span class="number">11</span> </span><br></pre></td></tr></table></figure>

<p>如上图所示，其中序遍历结果为：[14, 4, 2, 10, 8, 11, 5, 9, 1, 6, 3, 7, 9 ]</p>
<ul>
<li>因为是中序遍历，所以当前节点的下一个节点必然在其右子树中产生。只需要考虑有没有右子树即可，而不用再去考虑当前节点是不是存在左子树。因为访问到当前节点的时候，其左子树肯定已经都访问完了。</li>
<li>如果它存在右子树，则其中序遍历的下一个节点是右子树的最左子节点 […2, 10…]；[…1, 6…]</li>
<li>节点4无右子树，且它为其父节点2的左子节点，则其中序遍历的下一个节点是其<strong>父节点</strong>。[…4, 2…]</li>
<li>节点9无右子树，且它为其父节点5的右子节点，则其中序遍历的下一个节点要<strong>沿着指向父节点的指针不断向上找，直到找到一个视其父节点为左子节点的节点</strong>。[…9, 1…]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">getInorderNext</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) &#123;   <span class="comment">// 如果右子树不为空，返回右子树的最左子节点</span></span><br><span class="line">         TreeNode tmp_node = node.right;</span><br><span class="line">         <span class="keyword">while</span>(tmp_node.left!=<span class="keyword">null</span>)</span><br><span class="line">            tmp_node = tmp_node.left;</span><br><span class="line">         <span class="keyword">return</span> tmp_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node.father!=<span class="keyword">null</span>) &#123;   <span class="comment">// 如果右子树为空</span></span><br><span class="line">        <span class="keyword">while</span>(node.father!=<span class="keyword">null</span> &amp;&amp; node.father.right==node) &#123;</span><br><span class="line">            node = node.father;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.father;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-105-根据先序遍历和中序遍历确定二叉树的结构："><a href="#leetcode-105-根据先序遍历和中序遍历确定二叉树的结构：" class="headerlink" title="leetcode 105. 根据先序遍历和中序遍历确定二叉树的结构："></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">leetcode 105. 根据先序遍历和中序遍历确定二叉树的结构</a>：</h3><p>输入：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">preorder</span> = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line"><span class="attr">inorder</span>  = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>分析：preorder中先访问的是根节点，那么在inorder中找到根节点的位置，然后iorder根节点左侧的即为其左子树，右侧的即为其右子树，然后递归进行该过程即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pre_index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(left&gt;=right)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  TreeNode node = <span class="keyword">new</span> TreeNode(preorder[pre_index]);  <span class="comment">// 建立当前节点</span></span><br><span class="line">  <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;right;i++) &#123;   <span class="comment">// 找到preorder中当前节点在inoder中的位置</span></span><br><span class="line">    <span class="keyword">if</span>(inorder[i]==preorder[pre_index])</span><br><span class="line">      index = i;</span><br><span class="line">  &#125;</span><br><span class="line">  pre_index += <span class="number">1</span>;</span><br><span class="line">  node.left = buildTree(preorder, inorder, left, index);     <span class="comment">// 递归inorder中当前节点的左侧节点</span></span><br><span class="line">  node.right = buildTree(preorder, inorder, index+<span class="number">1</span>, right); <span class="comment">// 递归inorder中当前节点的右侧节点</span></span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-106-根据后序遍历和中序遍历确定二叉树的结构："><a href="#leetcode-106-根据后序遍历和中序遍历确定二叉树的结构：" class="headerlink" title="leetcode 106. 根据后序遍历和中序遍历确定二叉树的结构："></a><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">leetcode 106. 根据后序遍历和中序遍历确定二叉树的结构</a>：</h3><p>输入：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">inorder</span>   = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line"><span class="attr">postorder</span> = [<span class="number">9</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>分析：因为是后序遍历，所以postorder要从后向前看，最右一个是根节点，然后逐渐向前遍历。postorder中从后向前访问根节点，那么在inorder中找到根节点的位置，然后iorder根节点左侧的即为其左子树，右侧的即为其右子树，然后递归进行该过程即可。</p>
<p><strong>注意：3题和4题最后两个递归循环的顺序是不一样的，后序遍历中，因为是从后向前遍历postorder， 所以它会先访问右子树，所以递归循环时要先建立右子树，再建立左子树。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> post_index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] postorder, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(postorder[post_index]);</span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;right;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder[i]==postorder[post_index])</span><br><span class="line">            index = i;</span><br><span class="line">    &#125;</span><br><span class="line">    post_index -= <span class="number">1</span>;</span><br><span class="line">    node.right = buildTree(postorder, inorder, index+<span class="number">1</span>, right);</span><br><span class="line">    node.left = buildTree(postorder, inorder, left, index);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">    post_index = postorder.length-<span class="number">1</span>;</span><br><span class="line">    TreeNode node = buildTree(postorder, inorder, <span class="number">0</span>, inorder.length);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-100-判断两棵二叉树是否相等："><a href="#leetcode-100-判断两棵二叉树是否相等：" class="headerlink" title="leetcode 100. 判断两棵二叉树是否相等："></a><a href="https://leetcode.com/problems/same-tree/">leetcode 100. 判断两棵二叉树是否相等</a>：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(TreeNode n1, TreeNode n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n1==<span class="keyword">null</span> &amp;&amp; n2==<span class="keyword">null</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n1==<span class="keyword">null</span> || n2==<span class="keyword">null</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n1.val!=n2.val)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (judge(n1.left, n2.left) &amp;&amp; judge(n1.right, n2.right));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preorder(p, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-101-判断二叉树是不是对称的："><a href="#leetcode-101-判断二叉树是不是对称的：" class="headerlink" title="leetcode 101. 判断二叉树是不是对称的："></a><a href="https://leetcode.com/problems/symmetric-tree/">leetcode 101. 判断二叉树是不是对称的</a>：</h3><p>一种方法，就是判断二叉树镜像之后和自己是不是相等。如果相等就是对称的。但是那样有点太麻烦了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="number">1</span></span><br><span class="line">    /   \</span><br><span class="line">   <span class="number">2</span>     <span class="number">2</span></span><br><span class="line"> /  \   /  \</span><br><span class="line"><span class="number">4</span>    <span class="number">3</span> <span class="number">3</span>    <span class="number">4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left==<span class="keyword">null</span> &amp;&amp; right==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(left==<span class="keyword">null</span> || right==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(left.val!=right.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (judge(left.left, right.right) &amp;&amp; judge(left.right, right.left));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> judge(node.left, node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到第五题和第六题很相似，只是在递归的时候传的参数不一样。</p>
<h3 id="leetcode-226-二叉树的镜像："><a href="#leetcode-226-二叉树的镜像：" class="headerlink" title="leetcode 226. 二叉树的镜像："></a><a href="https://leetcode.com/problems/invert-binary-tree/">leetcode 226. 二叉树的镜像</a>：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="number">1</span>          |          <span class="number">1</span></span><br><span class="line">    /   \        |        /   \</span><br><span class="line">   <span class="number">2</span>     <span class="number">3</span>       |       <span class="number">3</span>     <span class="number">2</span></span><br><span class="line"> /  \   / \      |      / \   /  \</span><br><span class="line"><span class="number">4</span>    <span class="number">5</span> <span class="number">6</span>   <span class="number">7</span>     |     <span class="number">7</span>   <span class="number">6</span> <span class="number">5</span>    <span class="number">4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">SymmetricTree</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span> &amp;&amp; node.right==<span class="keyword">null</span>)</span><br><span class="line">       <span class="keyword">return</span> node;</span><br><span class="line">    TreeNode tmp = node.left;   <span class="comment">// 左右节点交换</span></span><br><span class="line">    node.left = node.right;</span><br><span class="line">    node.right = tmp;</span><br><span class="line">    SymmetricTree(node.left);</span><br><span class="line">    SymmetricTree(node.right);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a><span>完全二叉树</span></h2><h3 id="leetcode-222-完全二叉树的节点个数"><a href="#leetcode-222-完全二叉树的节点个数" class="headerlink" title="leetcode 222. 完全二叉树的节点个数"></a><a href="https://leetcode.com/problems/count-complete-tree-nodes/">leetcode 222. 完全二叉树的节点个数</a></h3><ul>
<li>完全二叉树和普通二叉树的区别就在于，除了最后一层可能不满以外，其他层全都是满的。</li>
<li>所以想要查完全二叉树的节点个数，除了和普通的方法一样，遍历一遍，只需要知道完全二叉树的层数，和最后一层的节点个数就行了。前面可以用公式 $2^n-1$ 即可。n为前面满二叉树的层数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get_num</span><span class="params">(TreeNode node, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span> &amp;&amp; node.right!=<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> get_num(node.left, num-<span class="number">1</span>) + get_num(node.right, num-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    TreeNode left = root;</span><br><span class="line">    TreeNode right = root;</span><br><span class="line">    <span class="keyword">int</span> num_left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left!=<span class="keyword">null</span>) &#123;   <span class="comment">// 通过左子节点计算二叉树的层数。</span></span><br><span class="line">        num_left += <span class="number">1</span>;</span><br><span class="line">        left = left.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num_right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right!=<span class="keyword">null</span>) &#123;  <span class="comment">// 从右侧计算二叉树的层数。</span></span><br><span class="line">        num_right += <span class="number">1</span>;</span><br><span class="line">        right = right.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果左侧层数和右侧计算的层数相等，那么这是一棵满二叉树。直接用公式计算节点数即可。</span></span><br><span class="line">    <span class="keyword">if</span>(num_left==num_right) <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, num_left)-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 如果不是满二叉树，那么用公式计算前num_right层，然后递归计算最后一层的数目即可。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.pow(<span class="number">2</span>, num_right)-<span class="number">1</span> + get_num(root, num_right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-958-判断一棵二叉树是不是完全二叉树"><a href="#leetcode-958-判断一棵二叉树是不是完全二叉树" class="headerlink" title="leetcode 958. 判断一棵二叉树是不是完全二叉树"></a><a href="https://leetcode.com/problems/check-completeness-of-a-binary-tree/">leetcode 958. 判断一棵二叉树是不是完全二叉树</a></h3><ul>
<li>联想堆，堆就是一棵完全二叉树，堆排序中我们知道，堆可以用一个数组表示，所以完全二叉树也可以由一个数组表示，第 <code>k</code> 个节点的儿子节点是 <code>2k</code> 和 <code>2k+1</code>，那么我们就可以在遍历二叉树的时候给每个节点一个编号，如果最后一层最右侧的节点的编号和二叉树节点个数相等，那么就说明他是一棵完全二叉树。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="number">1</span>          |          <span class="number">1</span></span><br><span class="line">    /   \        |        /   \</span><br><span class="line">   <span class="number">2</span>     <span class="number">3</span>       |       <span class="number">2</span>     <span class="number">3</span></span><br><span class="line"> /      / \      |      / \  	</span><br><span class="line"><span class="number">4</span>      <span class="number">6</span>   <span class="number">7</span>     |     <span class="number">4</span>   <span class="number">5</span>     </span><br></pre></td></tr></table></figure>

<ul>
<li>如上图所示，按照编号左侧最后一层最右节点编号为7，但二叉树只有6个节点，所以其不是一棵完全二叉树。右面的二叉树，最后一层最右节点编号为5，而二叉树有5个节点，所以是完全二叉树。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;  <span class="comment">// 二叉树节点个数</span></span><br><span class="line"><span class="keyword">int</span> final_index = <span class="number">0</span>;  <span class="comment">// 最后一个节点的编号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode node, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span> &amp;&amp; node.right==<span class="keyword">null</span>) </span><br><span class="line">        final_index = index&gt;final_index?index:final_index;</span><br><span class="line">    dfs(node.left, index*<span class="number">2</span>);</span><br><span class="line">    dfs(node.right, index*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCompleteTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(final_index==num)  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a><span>二叉搜索树</span></h2><h3 id="leetcode-98-判断一棵二叉树是不是二叉搜索树"><a href="#leetcode-98-判断一棵二叉树是不是二叉搜索树" class="headerlink" title="leetcode 98. 判断一棵二叉树是不是二叉搜索树"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/">leetcode 98. 判断一棵二叉树是不是二叉搜索树</a></h3><ul>
<li>二叉搜索树的中序遍历是有序的，只要判断中序遍历时当前值是不是大于前一个值就行了</li>
<li>下面的代码，本来没设置num来标记是不是第一个节点。直接第一个节点和 <code>Integer.MIN_VALUE</code> 就好了，谁知道测试用例有第一个值是 <code>Integer.MIN_VALUE</code> 的，没办法又多设置了一个变量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp_value = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span> || flag == <span class="keyword">false</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    preorder(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num!=<span class="number">0</span> &amp;&amp; node.val&lt;=tmp_value) &#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  &#123;</span><br><span class="line">        tmp_value = node.val;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    preorder(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    preorder(root);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-108-将排序数组转为平衡的二叉搜索树"><a href="#leetcode-108-将排序数组转为平衡的二叉搜索树" class="headerlink" title="leetcode 108. 将排序数组转为平衡的二叉搜索树"></a><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">leetcode 108. 将排序数组转为平衡的二叉搜索树</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given the sorted array: [-<span class="number">10</span>,-<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line"></span><br><span class="line">One possible answer is: [<span class="number">0</span>,-<span class="number">3</span>,<span class="number">9</span>,-<span class="number">10</span>,<span class="keyword">null</span>,<span class="number">5</span>], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">     / \</span><br><span class="line">   -<span class="number">3</span>   <span class="number">9</span></span><br><span class="line">   /   /</span><br><span class="line"> -<span class="number">10</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>很简单，每次选取中间节点作为当前节点，然后递归调用就好了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">BST</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin&gt;=end)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (begin + end)/<span class="number">2</span>;</span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">    node.left = BST(nums, begin, mid);</span><br><span class="line">    node.right = BST(nums, mid+<span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BST(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-109-将排序链表转为平衡的二叉搜索树"><a href="#leetcode-109-将排序链表转为平衡的二叉搜索树" class="headerlink" title="leetcode 109. 将排序链表转为平衡的二叉搜索树"></a><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/">leetcode 109. 将排序链表转为平衡的二叉搜索树</a></h3><ul>
<li>跟上道题是一样的，只不过由排序数组改为了排序链表。</li>
<li>方法一：把链表中的内容先存到数组中，再用9.2题的方法。</li>
<li>方法二：直接用链表去找中间节点，其他方法同9.2。找中间节点的方法就是设置快慢指针。一个每次走一步，一个每次走两步。第一个到达尾部时，第二个指向中间节点。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">BST</span><span class="params">(ListNode begin, ListNode end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin==end)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode slow = begin;</span><br><span class="line">    ListNode fast = begin;</span><br><span class="line">    <span class="keyword">while</span>(fast!=end &amp;&amp; fast.next!=end) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(slow.val);</span><br><span class="line">    node.left = BST(begin, slow);</span><br><span class="line">    node.right = BST(slow.next, end);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BST(head, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Z字形打印二叉树："><a href="#Z字形打印二叉树：" class="headerlink" title="Z字形打印二叉树："></a>Z字形打印二叉树：</h3><h3 id="二叉搜索树："><a href="#二叉搜索树：" class="headerlink" title="二叉搜索树："></a>二叉搜索树：</h3><h3 id="给定一个数组，判断该数组是不是二叉搜索树的后序遍历结果："><a href="#给定一个数组，判断该数组是不是二叉搜索树的后序遍历结果：" class="headerlink" title="给定一个数组，判断该数组是不是二叉搜索树的后序遍历结果："></a>给定一个数组，判断该数组是不是二叉搜索树的后序遍历结果：</h3><h3 id="二叉搜索树转为双向链表："><a href="#二叉搜索树转为双向链表：" class="headerlink" title="二叉搜索树转为双向链表："></a>二叉搜索树转为双向链表：</h3>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>//posts/3/</url>
    <content><![CDATA[<h5 id="1-leetcode-136-Single-Number"><a href="#1-leetcode-136-Single-Number" class="headerlink" title="1. leetcode 136. Single Number"></a>1. <a href="https://leetcode.com/problems/single-number/">leetcode 136. Single Number</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a non-empty array of integers, every element appears twice except <span class="keyword">for</span> one. Find that single one.</span><br><span class="line">数组中只有一个数字出现了一次，其他数字都出现了<span class="number">2</span>次。找出这个只出现一次的数字。</span><br></pre></td></tr></table></figure>

<ul>
<li>异或。相同的两个数二进制异或为0.</li>
<li>所有的元素进行异或，最后的值即为出现一次的元素的值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">        res = res^nums[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="2-leetcode-137-Single-Number-II"><a href="#2-leetcode-137-Single-Number-II" class="headerlink" title="2. leetcode 137. Single Number II"></a>2. <a href="https://leetcode.com/problems/single-number-ii/">leetcode 137. Single Number II</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a non-empty array of integers, every element appears three times except <span class="keyword">for</span> one, which appears exactly once. Find that single one.</span><br><span class="line">数组中只有一个数字出现了一次，其他数字都出现了<span class="number">3</span>次。找出这个只出现一次的数字。</span><br></pre></td></tr></table></figure>

<ul>
<li>我们把数组中的每个数字都转为二进制。</li>
<li>如果一个数字出现三次，那么二进制的每一位也都出现三次。如果把所有出现三次的数字的二进制表示的每一位都分别累加起来，那么每一位的和都能被3整除。</li>
<li>那么我们就把所有数字的对应位都累加起来，如果能被3整除，那么出现一次的数字该位为0，否则该位为1，这样运算下来，我们就能知道只出现一次的这个数字的二进制表示，那么我们就可以得到这个数字的值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="3-leetcode-260-Single-Number-III"><a href="#3-leetcode-260-Single-Number-III" class="headerlink" title="3. leetcode 260. Single Number III"></a>3. <a href="https://leetcode.com/problems/single-number-iii/">leetcode 260. Single Number III</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.</span><br><span class="line">数组中有两个数字仅出现一次，其余数字都出现两次。找出仅出现一次的这两个数字。</span><br></pre></td></tr></table></figure>

<ul>
<li>只有一个数字可以直接异或，因为其他部分异或都为0。而两个数字，就不能直接整个数组异或了，因为这两个只出现一次的数字也会求异或，所以得不到两个数字的值。如果能把这两个数字分开，分到两个不同的子数组里就好了。</li>
<li>如何划分到两个不同的子数组中呢？</li>
</ul>
<ol>
<li>假设不同的数字为a和b，</li>
<li>先将整个数组求异或，那么得到的就是a和b异或的值c</li>
<li>我们得到c的二进制值，找到第一个为1的位置。该位之所以为1，是因为a和b中只有一个该位置为1，那么我们就能够把a和b区分开了。</li>
<li>所以，我们假设c的第n位为1，那么我们将整个数组按照第n位是不是为1分成两个数组。那么a和b肯定在不同的数组中</li>
<li>同时，其他出现两次的每个数字，每个相同的两个数必出现在同一个子数组中，因为他们俩完全相等，第n位是不是1当然也是同样的结果。</li>
<li>也就是说，两个子数组中，除了a和b分别在自己的子数组中出现一次，其他数字都出现两次，那么我们将两个子数组分别求异或，就能得到a和b的值了。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法</title>
    <url>//posts/5/</url>
    <content><![CDATA[<blockquote>
<p>回溯法：实现某个元素选或不选的问题。</p>
</blockquote>
<span id="more"></span>

<h2 id="回溯法的基本思想"><a href="#回溯法的基本思想" class="headerlink" title="回溯法的基本思想"></a><span>回溯法的基本思想</span></h2><ul>
<li>选当前元素，递归的进行后续元素的选择；</li>
<li>将当前元素拿出，再进行一次不放入该元素，递归的进行后续元素的选择。</li>
<li><strong>本来选择放入，再选择不放入的过程，称为回溯试探法。</strong></li>
<li>回溯就是，返回之前的状态，再进行一次递归。</li>
<li>回溯问题的求解一般流程：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Object&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(字符串 或 数组, <span class="keyword">int</span> index, List&lt;Object&gt; tmp....)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(不满足条件) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(满足条件) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList(tmp)); <span class="comment">// 将结果存在最终的List&lt;List&lt;Object&gt;&gt; 里面</span></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=?;j&lt;arr.length();j++) &#123;  <span class="comment">// 根据需要确定循环条件</span></span><br><span class="line">        tmp.add(某一部分);</span><br><span class="line">        记录当前状态S1</span><br><span class="line">        更新状态为<span class="function">S2</span></span><br><span class="line"><span class="function">        <span class="title">backtracking</span><span class="params">(用状态S2回溯)</span></span>;</span><br><span class="line">        tmp.remove(tmp.size()-<span class="number">1</span>); <span class="comment">// 移除添加的元素</span></span><br><span class="line">        回到状态S1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Object&gt;&gt; main(字符串 或 数组) &#123;</span><br><span class="line">    List&lt;Object&gt; tmp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    backtracking(需要传递的参数值。一般有源参数，index, tmp....);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回溯法的相关例题"><a href="#回溯法的相关例题" class="headerlink" title="回溯法的相关例题"></a><span>回溯法的相关例题</span></h2><h3 id="leetcode-78-求子集-Subsets"><a href="#leetcode-78-求子集-Subsets" class="headerlink" title="leetcode 78. 求子集 Subsets"></a><a href="https://leetcode.com/problems/subsets/">leetcode 78. 求子集 Subsets</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a set of distinct integers, nums, <span class="keyword">return</span> all possible subsets.</span><br><span class="line">Input: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, List&lt;Integer&gt; tmp_res)</span> </span>&#123;</span><br><span class="line">    result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp_res));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">        tmp_res.add(nums[i]);</span><br><span class="line">        backtracking(nums, i+<span class="number">1</span>, tmp_res);</span><br><span class="line">        tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    backtracking(nums, <span class="number">0</span>, tmp_res);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-90-带有重复元素求子集-Subsets-II"><a href="#leetcode-90-带有重复元素求子集-Subsets-II" class="headerlink" title="leetcode 90. 带有重复元素求子集 Subsets II"></a><a href="https://leetcode.com/problems/subsets-ii/">leetcode 90. 带有重复元素求子集 Subsets II</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a collection of integers that might contain duplicates, nums, <span class="keyword">return</span> <span class="function">all possible <span class="title">subsets</span> <span class="params">(the power set)</span>.</span></span><br><span class="line"><span class="function">Input: nums </span>= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>将数组先进行排序，然后将得到的结果放入set中去重。</li>
<li>一定要先排序，否则就会出现 <code>[1,2,2,1]</code> 和 <code>[1,1,2,2]</code>，就会出错。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, List&lt;Integer&gt; tmp_res)</span> </span>&#123;</span><br><span class="line">    result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp_res));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">        tmp_res.add(nums[i]);</span><br><span class="line">        backtracking(nums, i+<span class="number">1</span>, tmp_res);</span><br><span class="line">        tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    backtracking(nums, <span class="number">0</span>, tmp_res);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以不用set，回溯时遇到相同元素就跳过。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, List&lt;Integer&gt; tmp_res)</span> </span>&#123;</span><br><span class="line">    result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp_res));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">        tmp_res.add(nums[i]);</span><br><span class="line">        backtracking(nums, i+<span class="number">1</span>, tmp_res);</span><br><span class="line">        tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(i+<span class="number">1</span>&lt;nums.length &amp;&amp; nums[i+<span class="number">1</span>]==nums[i]) </span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    backtracking(nums, <span class="number">0</span>, tmp_res);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-46-全排列-Permutations"><a href="#leetcode-46-全排列-Permutations" class="headerlink" title="leetcode 46.  全排列 Permutations"></a><a href="https://leetcode.com/problems/permutations/">leetcode 46.  全排列 Permutations</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a collection of distinct integers, <span class="keyword">return</span> all possible permutations.</span><br><span class="line">Input: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;Integer&gt; tmp_res, <span class="keyword">int</span>[] visit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp_res.size()==nums.length) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList(tmp_res));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>) &#123;</span><br><span class="line">            tmp_res.add(nums[i]);</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            backtracking(nums, tmp_res, visit);</span><br><span class="line">            tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">int</span>[] visit = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    backtracking(nums, tmp_res, visit);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-47-有重复元素的全排列-Permutations-II"><a href="#leetcode-47-有重复元素的全排列-Permutations-II" class="headerlink" title="leetcode 47. 有重复元素的全排列 Permutations II"></a><a href="https://leetcode.com/problems/permutations-ii/">leetcode 47. 有重复元素的全排列 Permutations II</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a collection of numbers that might contain duplicates, <span class="keyword">return</span> all possible unique permutations.</span><br><span class="line">Input: nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;Integer&gt; tmp_res, <span class="keyword">int</span>[] visit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp_res.size()==nums.length) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList(tmp_res));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>) &#123;</span><br><span class="line">            tmp_res.add(nums[i]);</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            backtracking(nums, tmp_res, visit);</span><br><span class="line">            tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+<span class="number">1</span>&lt;nums.length &amp;&amp; nums[i+<span class="number">1</span>]==nums[i]) </span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">int</span>[] visit = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    backtracking(nums, tmp_res, visit);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-39-和为target的所有组合，选择的元素可重复-Combination-Sum"><a href="#leetcode-39-和为target的所有组合，选择的元素可重复-Combination-Sum" class="headerlink" title="leetcode 39. 和为target的所有组合，选择的元素可重复 Combination Sum"></a><a href="https://leetcode.com/problems/combination-sum/">leetcode 39. 和为target的所有组合，选择的元素可重复 Combination Sum</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Given a set of candidate <span class="title">numbers</span> <span class="params">(candidates)</span> <span class="params">(without duplicates)</span> and a target <span class="title">number</span> <span class="params">(target)</span>, find all unique combinations in candidates where the candidate numbers sums to target.</span></span><br><span class="line"><span class="function">The same repeated number may be chosen from candidates unlimited number of times.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Input: candidates </span>= [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], target = <span class="number">7</span>,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>因为元素可以重复使用，所以backtracking时从 <code>i</code> 开始即可。</li>
<li>而且原始数组中无重复元素，所以直接用list即可，否则使用set.</li>
<li>类似题目1：<a href="https://leetcode.com/problems/combination-sum-ii/">leetcode 40. Combination Sum II</a> : 元素不可重复使用：backtracking时从 <code>i+1</code> 开始；原始数组有重复元素：使用set即可。</li>
<li>类似题目2：<a href="https://leetcode.com/problems/combination-sum-iii/">leetcode 216. Combination Sum III</a>：直接初始化原始数组为0-9、判断条件多加一条即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, <span class="keyword">int</span> target, <span class="keyword">int</span> sum, List&lt;Integer&gt; tmp_res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;target) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum==target) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList(tmp_res));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">        tmp_res.add(nums[i]);</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        backtracking(nums, i, target, sum, tmp_res);</span><br><span class="line">        tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">        sum -= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Arrays.sort(candidates);</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    backtracking(candidates,<span class="number">0</span>, target, <span class="number">0</span>, tmp_res);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-131-Palindrome-Partitioning"><a href="#leetcode-131-Palindrome-Partitioning" class="headerlink" title="leetcode 131. Palindrome Partitioning"></a><a href="https://leetcode.com/problems/palindrome-partitioning/">leetcode 131. Palindrome Partitioning</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a string s, partition s such that every substring of the partition is a palindrome.</span><br><span class="line">分区s使得分区的每个子字符串都是回文.</span><br><span class="line">Return all possible palindrome partitioning of s.</span><br><span class="line">    </span><br><span class="line">Input: <span class="string">&quot;aab&quot;</span></span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;b&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>就是从头开始找回文串，找到一个就放进List里，再判断后面是不是回文串就行了。</li>
<li>回溯都是有模板的，先把模板写出来，然后再填充具体需要判断的内容，就会思路清晰很多。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isplindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>, end = s.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(begin&lt;=end) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(begin)==s.charAt(end)) &#123;</span><br><span class="line">            begin += <span class="number">1</span>;</span><br><span class="line">            end -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(String s, List&lt;String&gt; tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length()==<span class="number">0</span>) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList(tmp));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s.length();j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isplindrome(s.substring(<span class="number">0</span>, j+<span class="number">1</span>))) &#123;</span><br><span class="line">            tmp.add(s.substring(<span class="number">0</span>, j+<span class="number">1</span>));</span><br><span class="line">            String tmp_s = s;</span><br><span class="line">            s = s.substring(j+<span class="number">1</span>, s.length());</span><br><span class="line">            backtracking(s, tmp);</span><br><span class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);</span><br><span class="line">            s = tmp_s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">    List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    backtracking(s, tmp);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-842-Split-Array-into-Fibonacci-Sequence"><a href="#leetcode-842-Split-Array-into-Fibonacci-Sequence" class="headerlink" title="leetcode 842. Split Array into Fibonacci Sequence"></a><a href="https://leetcode.com/problems/split-array-into-fibonacci-sequence/">leetcode 842. Split Array into Fibonacci Sequence</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a string S of digits, such as S = <span class="string">&quot;123456579&quot;</span>, we can split it into a Fibonacci-like sequence [<span class="number">123</span>, <span class="number">456</span>, <span class="number">579</span>].</span><br><span class="line">(F.length &gt;= <span class="number">3</span>) and (F[i] + F[i+<span class="number">1</span>] = F[i+<span class="number">2</span>] <span class="keyword">for</span> all <span class="number">0</span> &lt;= i &lt; F.length - <span class="number">2</span>).</span><br><span class="line">每个数字不能有前导<span class="number">0.</span>除非单独一个<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Input: <span class="string">&quot;11235813&quot;</span>    Output: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>]</span><br><span class="line">Input: <span class="string">&quot;112358130&quot;</span>   Output: []</span><br><span class="line">Input: <span class="string">&quot;0123&quot;</span>        Output: []</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>try catch</code> 主要是应对字符串长度过长，超出整数的范围。</p>
</li>
<li><p>本来写了三重循环，因为不知道初始的那两个元素怎么加到res里。后来发现：</p>
<p><code>if(res.size()&lt;2||res.get(len-1)+res.get(len-2)==value) </code>，用  <code>res.size()&lt;2</code> 判断一下就行了呀</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">backtracking</span><span class="params">(String S, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=S.length() &amp;&amp; res.size()&gt;<span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k&gt;=S.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> len = res.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;S.length();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;k &amp;&amp; S.charAt(k)==<span class="string">&#x27;0&#x27;</span>) <span class="comment">// 前导0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;value = Integer.parseInt(S.substring(k, i+<span class="number">1</span>));&#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span> || res.get(len-<span class="number">1</span>)+res.get(len-<span class="number">2</span>)==value) &#123;</span><br><span class="line">            res.add(value);</span><br><span class="line">            <span class="keyword">boolean</span> flag = backtracking(S, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            res.remove(res.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res.get(len-<span class="number">1</span>)+res.get(len-<span class="number">2</span>)&lt;value) <span class="comment">// 提前结束</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  List&lt;Integer&gt; <span class="title">splitIntoFibonacci</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">    backtracking(S, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>//posts/7/</url>
    <content><![CDATA[<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><span>例题</span></h2><h3 id="leetcode-316-删除字符串中的重复字符"><a href="#leetcode-316-删除字符串中的重复字符" class="headerlink" title="leetcode 316. 删除字符串中的重复字符"></a><a href="https://leetcode.com/problems/remove-duplicate-letters/">leetcode 316. 删除字符串中的重复字符</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given a string which contains only lowercase letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</span><br><span class="line">Example <span class="number">1</span>:  Input: <span class="string">&quot;bcabc&quot;</span>      Output: <span class="string">&quot;abc&quot;</span></span><br><span class="line">Example <span class="number">2</span>:  Input: <span class="string">&quot;cbacdcbc&quot;</span>   Output: <span class="string">&quot;acdb&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>因为只有26个小写字母，所以可以用数组模拟 hashmap 先统计每个字符出现的次数。</li>
<li>然后要用辅助栈。其实发现很多问题都是数组和栈辅助进行操作，来对比当前元素和栈顶元素的大小，从而进行相应的操作。删除栈顶元素还是向栈中添加元素。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicateLetters</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];  <span class="comment">// 统计每个字符出现的次数</span></span><br><span class="line">    <span class="keyword">boolean</span>[] visit = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">26</span>];  <span class="comment">// 表示某个字符是否已经出现在栈中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> ch : s.toCharArray())  </span><br><span class="line">        count[ch-<span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">    Stack&lt;Character&gt; sta = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">        count[ch-<span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(visit[ch-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 如果当前元素比栈顶元素小，并且栈顶元素次数不等0</span></span><br><span class="line">        <span class="comment">// 那么就把栈顶元素弹出来，把当前元素入栈</span></span><br><span class="line">        <span class="keyword">while</span>(!sta.isEmpty() &amp;&amp; ch&lt;sta.peek() &amp;&amp; count[sta.peek()-<span class="string">&#x27;a&#x27;</span>]!=<span class="number">0</span>) </span><br><span class="line">            visit[sta.pop()-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">false</span>;</span><br><span class="line">        sta.push(ch);</span><br><span class="line">        visit[ch-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sta.isEmpty())</span><br><span class="line">        res = sta.pop()+res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="leetcode-567-字符串中的全排列"><a href="#leetcode-567-字符串中的全排列" class="headerlink" title="leetcode 567. 字符串中的全排列"></a><a href="https://leetcode.com/problems/permutation-in-string/">leetcode 567. 字符串中的全排列</a></h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Given two strings s1 <span class="keyword">and</span> s2, <span class="built_in">write</span> a function <span class="keyword">to</span> <span class="literal">return</span> <span class="literal">true</span> <span class="keyword">if</span> s2 <span class="keyword">contains</span> <span class="keyword">the</span> permutation <span class="keyword">of</span> s1. In other <span class="built_in">words</span>, one <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">string</span>&#x27;s permutations <span class="keyword">is</span> <span class="keyword">the</span> substring <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">second</span> <span class="built_in">string</span>.</span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Input</span>: s<span class="number">1</span> = <span class="string">&quot;ab&quot;</span> s<span class="number">2</span> = <span class="string">&quot;eidbaooo&quot;</span></span><br><span class="line"><span class="attribute">Output</span>: True</span><br><span class="line"><span class="attribute">Explanation</span>: s<span class="number">2</span> contains one permutation of s<span class="number">1</span> (<span class="string">&quot;ba&quot;</span>).</span><br></pre></td></tr></table></figure>

<ul>
<li>最直观的做法就是把s1的全排列都列出来，然后看每个全排列是不是s2的子串，但是当字符串的长度过长时，会超时。</li>
<li><strong>如何判断字符串m是不是字符串n的全排列，我们只要把字符串m和字符串n中的每个字符出现的次数做统计，如果两者每个字符出现的次数都相等，那么就证明字符串m是字符串n的一个全排列。</strong></li>
<li>如何判断字符串n是不是包含字符串m的全排列，也就是字符串m的全排列是不是字符串n的一个子串，那么我们就需要<strong>建立一个长度为m.length的滑动窗口</strong>，判断n的这个滑动窗口中n子串和m字符串每个字符出现的次数是不是相等。</li>
<li>但每到一个滑动窗口都重新统计一次次数很麻烦，每次移动滑动窗口的时候，只有左侧被移出去的字符和右侧被移进来的字符的次数有变化，那么我们把左侧移出去的字符数-1，右侧移进来的字符数+1，即为当前窗口n的每个字符出现的次数。</li>
<li>该题的类似题目：<a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/">leetcode 438. 找到s1的全排列在s2中的位置</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s1.length()&gt;s2.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//统计s1中每个字符出现的次数，s2中每个长度为s1.length的窗口中字符出现的次数</span></span><br><span class="line">    <span class="keyword">int</span>[] hash1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span>[] hash2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++) &#123;</span><br><span class="line">        hash1[s1.charAt(i)-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        hash2[s2.charAt(i)-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Arrays.equals(hash1, hash2))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s1.length();i&lt;s2.length();i++) &#123;</span><br><span class="line">        hash2[s2.charAt(i)-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        hash2[s2.charAt(i-s1.length())-<span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">        <span class="keyword">if</span>(Arrays.equals(hash1, hash2))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-179-将数组进行排序，使之组成的数最大-实则为对字符串排序"><a href="#leetcode-179-将数组进行排序，使之组成的数最大-实则为对字符串排序" class="headerlink" title="leetcode 179. 将数组进行排序，使之组成的数最大 (实则为对字符串排序)"></a><a href="https://leetcode.com/problems/largest-number/">leetcode 179. 将数组进行排序，使之组成的数最大 (实则为对字符串排序)</a></h3><ul>
<li>输入：<code>[3,30,34,5,9]</code> </li>
<li>输出：<code>9534330</code></li>
<li>特殊问题：<code>[2, 2281]</code>   <code>[12, 121]</code>   <code>[23, 234]</code></li>
<li>碰到长度不等时，会有些问题，比如第一个要交换。第二个不要交换；第三个要交换</li>
<li>最好的办法就是直接把两个字符串m和n拼接起来，然后比较mn和nm的大小即可，不存在长度不等的情况。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String[] str, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"> String tmp = str[i];</span><br><span class="line"> str[i] = str[j];</span><br><span class="line"> str[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为这道题涉及到了长度不同，谁放在前面的问题，不能简单地直接逐个字符比较</span></span><br><span class="line"><span class="comment">//那么，把m和n拼接成的mn和nm按照字符串大小的比较规则来处理即可。</span></span><br><span class="line"><span class="comment">//如果mn &lt; nm,应该打印出nm,即n应该排在m前面，要交换顺序，反之，m应该排在n前面。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cmp</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">    String new_1 = a+b;</span><br><span class="line">    String new_2 = b+a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;new_1.length();i++)  &#123;</span><br><span class="line">        <span class="keyword">if</span>(new_1.charAt(i)==new_2.charAt(i)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">return</span> new_1.charAt(i)&lt;new_2.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    String[] str = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;  <span class="comment">// 先将数组中的数字转为字符串，再去比较。</span></span><br><span class="line">        str[i] = nums[i]+<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写个冒泡排序，任何一种排序算法都可以，只要把交换的条件变为我们的cmp条件即可。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cmp(str[j], str[j+<span class="number">1</span>])) &#123;</span><br><span class="line">                swap(str, j, j+<span class="number">1</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">        result += str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result.charAt(<span class="number">0</span>)==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>; <span class="comment">//防止出现&quot;00&quot;的情况。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>//posts/6/</url>
    <content><![CDATA[<p>图，最多的遇到的面试题就是深度优先搜索和广度优先搜索，这也是最基础的。<br>图的一个最重要的点：<strong>设置一个 visit[] 数组，用来表示图中的每个节点是否已经被访问过</strong>。</p>
<span id="more"></span>

<h2 id="图的深度优先搜索和广度优先搜索"><a href="#图的深度优先搜索和广度优先搜索" class="headerlink" title="图的深度优先搜索和广度优先搜索"></a><span>图的深度优先搜索和广度优先搜索</span></h2><ul>
<li><p>图分为邻接矩阵和邻接表。</p>
</li>
<li><p>邻接矩阵：<br><img data-src="/images/graph/2.png"></p>
</li>
<li><p>邻接表：<br><img data-src="/images/graph/3.png"></p>
</li>
<li><p>不管是 DFS 还是 BFS，都要设置一个 visit 变量，表示当前 node 是否已经被访问过，使用递归遍历所有的节点。</p>
</li>
</ul>
<h3 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索 DFS"></a>深度优先搜索 DFS</h3><ul>
<li>访问顶点v；</li>
<li>依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</li>
<li>若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] visit, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">    visit[node] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 访问node节点要执行的操作</span></span><br><span class="line">    System.out.println(node);</span><br><span class="line">    <span class="comment">//DFS遍历其他节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph[node].length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[node][i]==<span class="number">1</span> &amp;&amp; visit[i]==<span class="number">0</span>)</span><br><span class="line">            DFS(graph, visit, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索 BFS"></a>广度优先搜索 BFS</h3><ul>
<li>首先将根节点放入队列中;</li>
<li>从队列中取出第一个节点, 将它所有尚未检验过的直接子节点加入队列中;</li>
<li>若队列为空，表示整张图都检查过了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] visit, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">    visit[node] = <span class="number">1</span>;</span><br><span class="line">    Queue&lt;Integer&gt; que = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    que.add(node);</span><br><span class="line">    <span class="keyword">while</span>(!que.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> new_node = que.poll();</span><br><span class="line">        <span class="comment">// 访问node节点要执行的操作</span></span><br><span class="line">        System.out.println(new_node);</span><br><span class="line">        <span class="comment">// 将new_node相连的节点放入队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph[new_node].length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[new_node][i]==<span class="number">1</span> &amp;&amp; visit[i]==<span class="number">0</span>) &#123;</span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                que.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="经典题"><a href="#经典题" class="headerlink" title="经典题"></a><span>经典题</span></h2><h3 id="leetcode-200-岛屿的数量"><a href="#leetcode-200-岛屿的数量" class="headerlink" title="leetcode 200. 岛屿的数量"></a><a href="https://leetcode.com/problems/number-of-islands/">leetcode 200. 岛屿的数量</a></h3><ul>
<li>1为陆地，0为水，垂直方向才能算作一个岛屿，斜着不能算作一个岛屿。</li>
<li>类似题目1：<a href="https://leetcode.com/problems/max-area-of-island/">leetcode 695. 岛屿的最大面积</a>，只需再增加一个计数功能即可。</li>
<li>类似题目2：<a href="https://leetcode.com/problems/flood-fill/">leetcode 733. Flood Fill</a>,  访问节点时再改变一下节点的值即可。</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Input:</span></span><br><span class="line"><span class="number">11000</span></span><br><span class="line"><span class="number">11000</span></span><br><span class="line"><span class="number">00100</span></span><br><span class="line"><span class="number">00011</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Output:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">islandDFS</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span>[][] visit, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=grid.length || j&lt;<span class="number">0</span> || j&gt;=grid[<span class="number">0</span>].length)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(grid[i][j]==<span class="string">&#x27;1&#x27;</span> &amp;&amp; visit[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">        visit[i][j] = <span class="number">1</span>;</span><br><span class="line">        islandDFS(grid, visit, i, j-<span class="number">1</span>);</span><br><span class="line">        islandDFS(grid, visit, i, j+<span class="number">1</span>);</span><br><span class="line">        islandDFS(grid, visit, i+<span class="number">1</span>, j);</span><br><span class="line">        islandDFS(grid, visit, i-<span class="number">1</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(grid.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] visit = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="string">&#x27;1&#x27;</span> &amp;&amp; visit[i][j]==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 把和grid[i][j]相连接的位置都标记为1，记作一块岛屿</span></span><br><span class="line">                islandDFS(grid, visit, i, j);</span><br><span class="line">                number += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-463-确定岛屿的周长"><a href="#leetcode-463-确定岛屿的周长" class="headerlink" title="leetcode 463. 确定岛屿的周长"></a><a href="https://leetcode.com/problems/island-perimeter/">leetcode 463. 确定岛屿的周长</a></h3><ul>
<li>题目中只有一个岛屿，确定岛屿的周长</li>
<li>就是确定每个1周围有几个0，或者在边界位置。</li>
<li>这道题跟图没什么关系。遍历一遍就行了。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从头到尾遍历，查看每个1周围几个0，上下左右。</span></span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> || grid[i-<span class="number">1</span>][j]==<span class="number">0</span>) number += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span> || grid[i][j-<span class="number">1</span>]==<span class="number">0</span>) number += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==grid.length-<span class="number">1</span> || grid[i+<span class="number">1</span>][j]==<span class="number">0</span>) number += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j==grid[<span class="number">0</span>].length-<span class="number">1</span> || grid[i][j+<span class="number">1</span>]==<span class="number">0</span>) number += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-787-从src飞到dst的最小花销"><a href="#leetcode-787-从src飞到dst的最小花销" class="headerlink" title="leetcode. 787 从src飞到dst的最小花销"></a><a href="https://leetcode.com/problems/cheapest-flights-within-k-stops/">leetcode. 787 从src飞到dst的最小花销</a></h3><ul>
<li>方法一：递归调用，但leetcode会超时。</li>
<li>优化：对于遍历到的结点，首先判断如果当前结点已经访问过了，直接跳过。或者是当前价格out加上到达这个结点需要的价格之和大于结果res的话，那么直接跳过。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> [][] flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K, <span class="keyword">int</span> v, <span class="keyword">int</span>[] visit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(src==dst &amp;&amp; v&lt;min) &#123;</span><br><span class="line">        min = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(K&lt;<span class="number">0</span>||v&gt;min) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;flights.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[src]==<span class="number">0</span> &amp;&amp; flights[i][<span class="number">0</span>]==src) &#123;</span><br><span class="line">            visit[src] = <span class="number">1</span>;</span><br><span class="line">            DFS(flights, flights[i][<span class="number">1</span>], dst, K-<span class="number">1</span>, v+flights[i][<span class="number">2</span>], visit);    </span><br><span class="line">            visit[src] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] f, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] visit = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    DFS(f, src, dst, K, <span class="number">0</span>, visit);</span><br><span class="line">    <span class="keyword">if</span>(min == Integer.MAX_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-529-扫雷游戏"><a href="#leetcode-529-扫雷游戏" class="headerlink" title="leetcode 529. 扫雷游戏"></a><a href="https://leetcode.com/problems/minesweeper/">leetcode 529. 扫雷游戏</a></h3><ul>
<li>题太复杂了。。之后再做。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a><span>拓扑排序</span></h2><hr>
<p>图片来源： <a href="https://www.cnblogs.com/XMU-hcq/p/6065057.html">https://www.cnblogs.com/XMU-hcq/p/6065057.html</a></p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配算法－KMP算法</title>
    <url>//posts/8/</url>
    <content><![CDATA[<p>给定一个主串S及一个模式串P，判断模式串是否为主串的子串；若是，返回匹配的第一个元素的位置，否则返回-1；</p>
<p>如S=“abcd”，P=“bcd”，则返回1；S=“abcd”，P=“acb”，返回-1。</p>
<span id="more"></span>

<h2 id="朴素算法：回溯法"><a href="#朴素算法：回溯法" class="headerlink" title="朴素算法：回溯法"></a><span>朴素算法：回溯法</span></h2><p>最简单的方法就是遍历主串S和模式串P，逐个字符进行匹配，不匹配时返回开始的位置，从主串S的下一个字符开始，继续域模式串P匹配。以一张动图来说明：</p>
<p><img data-src="/images/kmp/1.gif" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找出模式串patn在主串src中第一次出现的位置</span></span><br><span class="line"><span class="comment">//返回patn在src中出现的位置，当src中并没有patn时，返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(String src, String patn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;src.length() &amp;&amp; j&lt;patn.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(src.charAt(i)==patn.charAt(j)) &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则，指针回溯，重新开始匹配</span></span><br><span class="line">            i = i - j + <span class="number">1</span>;  <span class="comment">//退回到最开始时比较的位置+1</span></span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( j &gt;= patn.length() )</span><br><span class="line">        <span class="keyword">return</span> i - plen;  <span class="comment">//如果字符串相同的长度大于模式串的长度，则匹配成功</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>朴素算法理解简单，但两个串都有依次遍历，时间复杂度为O(n*m)，效率不高。</p>
<h2 id="优化算法：KMP算法"><a href="#优化算法：KMP算法" class="headerlink" title="优化算法：KMP算法"></a><span>优化算法：KMP算法</span></h2><blockquote>
<p>KMP算法的核心，是一个被称为<strong>部分匹配表 (Partial Match Table) 的数组</strong>。</p>
</blockquote>
<h3 id="PMT表：对于模式字符串“abababca”，它的PMT如下表所示："><a href="#PMT表：对于模式字符串“abababca”，它的PMT如下表所示：" class="headerlink" title="PMT表：对于模式字符串“abababca”，它的PMT如下表所示："></a>PMT表：对于模式字符串“abababca”，它的PMT如下表所示：</h3><p><img data-src="/images/kmp/2.jpg" alt="img"></p>
<p>第一行：字符串的每个字符；<br>第二行：每个字符的索引；<br>重要的是value值：PMT中的value是字符串的前缀集合与后缀集合的交集中最长元素的长度。</p>
<p>例如，对于 “aba” ，它的前缀集合为{“a”, “ab”}，后缀集合为{“ba”, “a”}。两个集合的交集为{“a”}，那么长度最长的元素就是字符串 “a” 了，长度为1，所以对于 “aba” 而言，它在PMT表中对应的值就是1。再比如，对于字符串 “ababa”，它的前缀集合为{“a”, “ab”, “aba”, “abab”}，它的后缀集合为{“baba”, “aba”, “ba”, “a”}， 两个集合的交集为{“a”, “aba”}，其中最长的元素为 “aba”，长度为3，则 “ababa” 在PMT表中对应的值就是3。</p>
<h3 id="如何使用PMT表加速字符串的查找："><a href="#如何使用PMT表加速字符串的查找：" class="headerlink" title="如何使用PMT表加速字符串的查找："></a>如何使用PMT表加速字符串的查找：</h3><ul>
<li>主字符串为：“ababababca” -&gt; main_string[0:len_m] </li>
<li>模式字符串为：“abababca” -&gt; pattern_string[0:len_p] </li>
</ul>
<p>在主字符串 <code>main_string</code> 中查找模式字符串 <code>pattern_string</code>。当 <code>main_string[i] != pattern_string[j]</code> 时，我们知道，<code>main_string[i-j:i-1]</code> 和 <code>pattern_string[0:j-1]</code> 是完全一致的。</p>
<p>具体到下图：<code>i=j=6</code> 时，两个字符不相等，<code>main_string[0:5] = pattern_string[0:5] = “ababab”</code></p>
<p>那么此时我们应该如何操作：从PMT表中，我们能够看到 <code>PMT[5]</code> 的值（ <code>pattern_string[0:5]</code> 中的前缀集合与后缀集合的交集中最长元素的长度）， <code>PMT[5]=4</code>，也就是说，该字符串中，前缀和后缀相同的最长长度为4，也就是说，<code>pattern_string[0:5]</code> 前四位和后四位是相同的。因为 <code>main_string[0:5] = pattern_string[0:5]</code> ,也就是说，<code>pattern_string[0:5]</code> 的前四位和 <code>main_string[0:5]</code> 的后四位是相同的，那么我们就可以直接进行移动了，保持 <code>i</code> 指针不动，然后将 <code>j</code> 指针指向模式字符串的 <code>PMT[5]</code> 位即可。</p>
<p>简言之，以图中的例子来说，在 <code>i</code> 处失配，那么主字符串和模式字符串的前边6位就是相同的。又因为模式字符串的前6位，它的前4位前缀和后4位后缀是相同的，所以我们推知主字符串 <code>i</code> 之前的4位和模式字符串开头的4位是相同的。就是图中的灰色部分。那这部分就不用再比较了。</p>
<p><img data-src="/images/kmp/3.jpg" alt="img"></p>
<p>有了上面的思路，我们就可以使用PMT加速字符串的查找了。<strong>我们看到如果是在 <code>j</code> 位失配，那么影响 <code>j</code> 指针回溯的位置的其实是第 <code>j −1</code> 位的 PMT 值</strong>，所以为了编程的方便， 我们不直接使用PMT数组，而是将PMT数组向后偏移一位。我们把新得到的这个数组称为<strong>next数组</strong>。下面给出根据next数组进行字符串匹配加速的字符串匹配程序。其中要注意的一个技巧是，在把PMT进行向右偏移时，第0位的值，我们将其设成了-1，这只是为了编程的方便，并没有其他的意义。在本节的例子中，next数组如下表所示。</p>
<p><img data-src="/images/kmp/4.jpg" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; text.length() &amp;&amp; j &lt; pattern.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == -<span class="number">1</span> || text.charAt(i)==pattern.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">           j = next[j];</span><br><span class="line">        <span class="keyword">if</span> (j == pattern.length())</span><br><span class="line">           <span class="keyword">return</span> i - j;  <span class="comment">// 返回text中的开始位置</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;     <span class="comment">// 匹配失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何快速求next数组"><a href="#如何快速求next数组" class="headerlink" title="如何快速求next数组"></a>如何快速求next数组</h3><p>其实，求next数组的过程完全可以看成字符串匹配的过程，即<strong>以模式字符串为主字符串，以模式字符串的前缀为目标字符串，一旦字符串匹配成功，那么当前的next值就是匹配成功的字符串的长度</strong>。</p>
<p>具体来说，就是从模式字符串的第一位(注意，不包括第0位)开始对自身进行匹配运算。 在任一位置，能匹配的最长长度就是当前位置的next值。如下图所示。</p>
<p><strong>p串错开一位匹配，0起始的p串与1起始的p串，前者是瞄准了p的前缀，后者抛弃了p[0]所以是瞄准p的后缀，双方的公共部分即是公共前后缀。</strong></p>
<p><img data-src="/images/kmp/5.jpg" alt="img"></p>
<p><img data-src="/images/kmp/6.jpg" alt="img"></p>
<p><img data-src="/images/kmp/7.jpg" alt="img"></p>
<p><img data-src="/images/kmp/8.jpg" alt="img"></p>
<p><img data-src="/images/kmp/9.jpg" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(String pattern, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; pattern.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == -<span class="number">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;	</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = <span class="number">0</span>;   <span class="comment">//next[j];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>匹配失败时，总是能够让 pattern 回退到某个位置，使 text 不用回退。</li>
<li>在字符串比较时，pattern 提供的信息越多，计算复杂度越低。（有兴趣的可以了解一下 Trie 树，这是 text 提供的信息越多，计算复杂度越低的一个例子。）</li>
</ol>
<hr>
<p>参考链接：<a href="https://www.zhihu.com/question/21923021">https://www.zhihu.com/question/21923021</a><br>参考链接：<a href="https://blog.csdn.net/qq_37969433/article/details/82947411">https://blog.csdn.net/qq_37969433/article/details/82947411</a></p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>//posts/9/</url>
    <content><![CDATA[<h2 id="各种排序算法复杂度分析"><a href="#各种排序算法复杂度分析" class="headerlink" title="各种排序算法复杂度分析"></a><span>各种排序算法复杂度分析</span></h2><ul>
<li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li>
<li>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li>
</ul>
<p><img data-src="/images/sort/analysis.png"></p>
<p>在写排序算法之前，先把每种排序算法都用到的数组元素交换的代码写出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="选择排序-selection-sort"><a href="#选择排序-selection-sort" class="headerlink" title="选择排序 (selection sort)"></a><span>选择排序 (selection sort)</span></h2><ul>
<li>选择出数组中的最小元素，将它与数组的第一个元素进行交换；</li>
<li>从剩下的元素中选择出最小的元素，将它与数组的第二个元素进行交换；</li>
<li>直到将整个数组排序。</li>
</ul>
<p><img data-src="/images/sort/selection_sort.gif"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">        <span class="comment">// 寻找 [i, n) 区间里的最小值的索引</span></span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex]&gt;arr[j])</span><br><span class="line">                minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法分析：最稳定的算法之一；时间复杂度为$O(n^2)$；数据规模越小越好；不占用额外空间。</p>
<h2 id="插入排序-insert-sort"><a href="#插入排序-insert-sort" class="headerlink" title="插入排序 (insert sort)"></a><span>插入排序 (insert sort)</span></h2><ul>
<li>从左到右，每次将当前元素插入到左侧已经排好序的数组当中，使插入后左部分数组依然有序；</li>
<li>第 j 个元素不断与左侧元素进行比较，arr[j] &lt; arr[j-1] 就交换两个元素的位置，并j=j-1。</li>
</ul>
<p><img data-src="/images/sort/insert_sort.gif"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j =i;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; arr[j]&lt;arr[j-<span class="number">1</span>]) &#123;</span><br><span class="line">            swap(arr, j, j-<span class="number">1</span>);</span><br><span class="line">            j = j-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  上面的代码每次都要交换位置，会浪费时间，优化代码：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> j =i;</span><br><span class="line">    <span class="keyword">int</span> e = arr[i];</span><br><span class="line">    <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; e&lt;arr[j-<span class="number">1</span>]) &#123;</span><br><span class="line">        arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">        j = j-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法分析：插入排序通常采用in-place排序（即只需要用O(1)的额外空间的排序），所以在排序过程中，需要不断把元素进行后移，为新的元素插入提供空间。</p>
<h2 id="冒泡排序-bubble-sort"><a href="#冒泡排序-bubble-sort" class="headerlink" title="冒泡排序 (bubble sort)"></a><span>冒泡排序 (bubble sort)</span></h2><ul>
<li>将当前元素与后面的元素逐个比较，若a[j] &gt; a[j+1]，就进行交换，每轮排序后最大值会排到后面去；</li>
<li>当执行一轮循环后，没有发生交换，则表示数组已经有序。</li>
</ul>
<p><img data-src="/images/sort/bubble_sort.gif"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> swap_flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;  <span class="comment">// 因为i后面已经有序了，而且是最大的，所以不需要进行比较了	</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                swap(arr, j, j+<span class="number">1</span>);</span><br><span class="line">                swap_flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!swap_flag)  <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="希尔排序-shell-sort"><a href="#希尔排序-shell-sort" class="headerlink" title="希尔排序 (shell sort)"></a><span>希尔排序 (shell sort)</span></h2><ul>
<li>希尔排序会优先比较距离较远的元素。又叫<strong>缩小增量排序</strong>。</li>
<li>希尔排序把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；</li>
<li>随着增量逐渐减少，每组包含的元素越来越多，当增量减至1时，整个数组恰被分成一组，算法便终止。</li>
</ul>
<p><img data-src="/images/sort/shell_sort.gif"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="comment">//增量gap，并逐步缩小增量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> gap = len/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i = i + gap)&#123;</span><br><span class="line">            <span class="keyword">int</span> j =i;</span><br><span class="line">            <span class="keyword">int</span> e = arr[i];</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; e&lt;arr[j-gap]) &#123;</span><br><span class="line">                arr[j] = arr[j-gap];</span><br><span class="line">                j = j-gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="归并排序-merge-sort"><a href="#归并排序-merge-sort" class="headerlink" title="归并排序 (merge sort)"></a><span>归并排序 (merge sort)</span></h2><ul>
<li>归并排序采用了分治的思想，将大数组化为一个个的小数组去处理，然后再归并到一起。</li>
</ul>
<p><img data-src="/images/sort/merge_sort.gif"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)		</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">    merge_sort(arr, left, mid);</span><br><span class="line">    merge_sort(arr, mid+<span class="number">1</span>, right);</span><br><span class="line">    merge(arr, left, mid, right);  <span class="comment">// left到mid是左数组， mid+1到right是右数组，将两个数组合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意：merge是被递归调用的，所以不能在这里新建res_arr用来保存结果，只能改变arr的值</span></span><br><span class="line">    <span class="comment">// 要不然结果保存不下来，每次递归就不见了！！</span></span><br><span class="line">    <span class="keyword">int</span>[] res_arr = arr.clone();   <span class="comment">// 我们要改变arr数组，所以要备份一份用来比较</span></span><br><span class="line">    <span class="keyword">int</span> l = left;</span><br><span class="line">    <span class="keyword">int</span> r = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=left;i&lt;=right;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;mid) &#123;   	  <span class="comment">// 代表左侧的数组已经排序完成，把右侧剩下的直接赋值给arr就好</span></span><br><span class="line">            arr[i] = res_arr[r];</span><br><span class="line">            r += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r&gt;right) &#123;  <span class="comment">// 表示右侧的数组已经排序完成，把左侧剩下的直接赋值给arr就好</span></span><br><span class="line">            arr[i] = res_arr[l];</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res_arr[l]&lt;res_arr[r]) &#123;   <span class="comment">// 左侧的值小，要左侧</span></span><br><span class="line">            arr[i] = res_arr[l];</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;   <span class="comment">// 右侧的值小，要右侧</span></span><br><span class="line">            arr[i] = res_arr[r];</span><br><span class="line">            r += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">32</span>&#125;;</span><br><span class="line">    merge_sort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速排序-quick-sort"><a href="#快速排序-quick-sort" class="headerlink" title="快速排序 (quick sort)"></a><span>快速排序 (quick sort)</span></h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">一趟快速排序的算法是：</span><br><span class="line"><span class="number">1.</span> 设置两个变量i，j，排序开始的时候：i=<span class="number">0</span>, j=N<span class="number">-1</span>；</span><br><span class="line"><span class="number">2.</span> 以第一个数组元素作为关键元素，赋值给<span class="type">key</span>，即<span class="type">key</span> = arr[<span class="number">0</span>]；</span><br><span class="line"><span class="number">3.</span> 从 j 开始向前搜索，即由后向前开始搜索(j--)，找到第一个小于<span class="type">key</span>的值arr[j], 将arr[j]和<span class="type">key</span>的值进行交换；</span><br><span class="line"><span class="number">4.</span> 从 i 开始向后搜索，即由前向后开始搜索(i++)，找到第一个大于<span class="type">key</span>的值arr[i], 将arr[i]和<span class="type">key</span>的值进行交换；</span><br><span class="line"><span class="number">5.</span> 重复<span class="number">3</span>，<span class="number">4</span>步，直到 i=j。</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/sort/quick_sort.gif" alt="快速排序"></p>
<p><strong>每进行一趟快速排序，都会有一个元素处于最终的位置，它左侧的元素都比他小，它右侧的元素都比他大</strong>。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = arr[left];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[right] &gt;= key &amp;&amp; left &lt; right)</span><br><span class="line">            right -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)</span><br><span class="line">            arr[left] = arr[right];</span><br><span class="line">        <span class="keyword">while</span> (arr[left] &lt;= key &amp;&amp; left &lt; right)</span><br><span class="line">            left += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)</span><br><span class="line">            arr[right] = arr[left];  </span><br><span class="line">    &#125;</span><br><span class="line">    arr[left] = key;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right) </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> positon = partition(arr, left, right);</span><br><span class="line">    quick_sort(arr, left, positon-<span class="number">1</span>);</span><br><span class="line">    quick_sort(arr, positon+<span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">32</span>&#125;;</span><br><span class="line">    quick_sort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这部分按照原始定义要按照下面这种写法，但是因为每次都要交换，所以改成了上面这种。因为一开始key的值已经保存了，所以不需要每次都交换。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr[right] &gt;= key &amp;&amp; left &lt; right)</span><br><span class="line">      	right -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)</span><br><span class="line">-       arr[left] = arr[right];</span><br><span class="line">+       swap(arr, left, right);</span><br><span class="line">    <span class="keyword">while</span> (arr[left] &lt;= key &amp;&amp; left &lt; right)</span><br><span class="line">      	left += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)</span><br><span class="line">-      	arr[right] = arr[left];  </span><br><span class="line">+       swap(arr, left, right);</span><br><span class="line">&#125;</span><br><span class="line">- arr[left] = key;</span><br></pre></td></tr></table></figure>

<h2 id="堆排序-heap-sort"><a href="#堆排序-heap-sort" class="headerlink" title="堆排序 (heap sort)"></a><span>堆排序 (heap sort)</span></h2><h3 id="堆："><a href="#堆：" class="headerlink" title="堆："></a>堆：</h3><ul>
<li>大顶堆的某个节点的值总是大于等于子节点的值。</li>
<li>堆可以用数组来表示，因为堆是完全二叉树，而完全二叉树很容易存储在数组中。</li>
<li>**位置k的节点的父节点的位置为$k/2$，而它的两个子节点的位置分别为$2k$和$2k+1$**，这里不使用数组索引为0的位置，是为了更清晰地描述节点的位置关系。</li>
<li>用count记录当前堆中元素个数</li>
</ul>
<h3 id="堆的基本操作："><a href="#堆的基本操作：" class="headerlink" title="堆的基本操作："></a>堆的基本操作：</h3><ul>
<li><p>在大顶堆中，当一个节点的值比父节点的值要大，那么就需要交换这两个节点。交换后还可能比它新的父节点大，因此就要不断地进行比较和交换操作。把这种操作成为**上浮(ShiftUp)**。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k &gt; <span class="number">1</span> &amp;&amp; data[k] &gt; data[k/<span class="number">2</span>]) &#123;</span><br><span class="line">        swap(data, k, k/<span class="number">2</span>);</span><br><span class="line">        k = k/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>类似的，当一个节点比子节点小，那么就需要不断地向下进行比较和交换操作，这种操作叫做**下沉(ShiftDown)**。一个节点如果有两个子节点，那么应该与两个子节点中最大的那个节点进行交换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> count, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= count) &#123;  <span class="comment">// 当前节点有左孩子 </span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span> &lt;= count &amp;&amp; data[j] &lt; data[j+<span class="number">1</span>])</span><br><span class="line">           j += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//data[j] 表示左右孩子中的最大值</span></span><br><span class="line">        <span class="keyword">if</span>(data[k] &gt; = data[j])</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        swap(data, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>插入元素：将新元素放入数组尾部，然后执行上浮，到合适的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> count, <span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这个这样写是不对的，因为直接用了数组，到时候可以用list动态增加数组长度</span></span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    data[count] = item;</span><br><span class="line">    shiftUp(data, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>删除最大元素：从大顶堆中取出堆顶元素，然后将最后一个元素移到堆顶位置，再下沉到合适的位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extractMax</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> item = data[<span class="number">1</span>];   <span class="comment">// 因为数组0位置没有存储元素</span></span><br><span class="line">    swap(data, <span class="number">1</span>, count);</span><br><span class="line">    shiftDown(data, <span class="number">1</span>);</span><br><span class="line">    count -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="堆排序："><a href="#堆排序：" class="headerlink" title="堆排序："></a>堆排序：</h3><ul>
<li><p>由于大顶堆很容易得到最大的元素并删除它，不断地进行这种操作可以得到一个递减序列。如果把最大元素和当前堆数组中的最后一个元素交换位置，并且不删除它，就可以得到一个递增序列。（其实也可以构造小顶堆，和上面的方法差不多）。堆排序是原地排序，不需要额外空间。</p>
</li>
<li><p>把MaxHeap当作一个类，上面都是他的内部函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> count = arr.length;</span><br><span class="line">      MaxHeap&lt;Integer[]&gt; maxHeap = <span class="keyword">new</span> MaxHeap();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++) &#123;</span><br><span class="line">         maxHeap.insert(arr, count, i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i++)</span><br><span class="line">         arr[i] = maxHeap.extractMax(arr, count);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="计数排序-counting-sort"><a href="#计数排序-counting-sort" class="headerlink" title="计数排序 (counting sort)"></a><span>计数排序 (counting sort)</span></h2><ul>
<li><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是<strong>有确定范围的整数</strong>。</p>
</li>
<li><p>算法描述：</p>
<ol>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li>
</ol>
</li>
</ul>
<p><img data-src="/images/sort/count_sort.gif"></p>
<h2 id="桶排序-bucket-sort"><a href="#桶排序-bucket-sort" class="headerlink" title="桶排序 (bucket sort)"></a><span>桶排序 (bucket sort)</span></h2><h2 id="基数排序-radix-sort"><a href="#基数排序-radix-sort" class="headerlink" title="基数排序 (radix sort)"></a><span>基数排序 (radix sort)</span></h2><p><a href="https://www.cnblogs.com/onepixel/p/7674659.html">https://www.cnblogs.com/onepixel/p/7674659.html</a></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><span>注释</span></h2><p>文中图片来源：<a href="https://www.cnblogs.com/onepixel/p/7674659.html">https://www.cnblogs.com/onepixel/p/7674659.html</a></p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>//posts/10/</url>
    <content><![CDATA[<h2 id="数组的全排列"><a href="#数组的全排列" class="headerlink" title="数组的全排列"></a><span>数组的全排列</span></h2><h3 id="leetcode-31-给出全排列的下一个排列"><a href="#leetcode-31-给出全排列的下一个排列" class="headerlink" title="leetcode 31. 给出全排列的下一个排列"></a><a href="https://leetcode.com/problems/next-permutation/">leetcode 31. 给出全排列的下一个排列</a></h3><ul>
<li>输入1: <code>1,2,3,4,3,8,7,6,5</code> → <code>1,2,3,4,5,3,6,7,8</code></li>
<li>输入2: <code>3,2,1</code> → <code>1,2,3</code></li>
<li>条件：在nums数组上就地转换，并且要使用常数级辅助空间</li>
<li><strong>从后向前，找到递减的位置，然后从后面找到比他大的第一个元素，交换，然后对后面从小到大排序即可</strong></li>
<li>如果当前已经是最大，那么就输出他的最小值  从小到大排序即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(end-begin+<span class="number">1</span>)/<span class="number">2</span>;i++)</span><br><span class="line">        swap(nums, begin+i, end-i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;=nums[i-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//nums[i-1]是递减的那个值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=nums.length-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;nums[i-<span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(nums, i-<span class="number">1</span>, j);</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对后面逆序</span></span><br><span class="line">            reverse(nums, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="leetcode-46-无重复数字数组的全排列"><a href="#leetcode-46-无重复数字数组的全排列" class="headerlink" title="leetcode 46. 无重复数字数组的全排列"></a><a href="https://leetcode.com/problems/permutations/">leetcode 46. 无重复数字数组的全排列</a></h3><ul>
<li>输入：[1,2,3]</li>
<li>输出：[1,2,3]   [1,3,2]  [2,1,3]  [2,3,1]  [3,1,2]  [3,2,1]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_permute</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] visit, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; tmp_res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp_res.size()==nums.length) &#123;</span><br><span class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        tmp.addAll(tmp_res);</span><br><span class="line">        result.add(tmp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>) &#123;</span><br><span class="line">            tmp_res.add(nums[i]);</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            get_permute(nums, visit, result, tmp_res);</span><br><span class="line">            tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] visit = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    get_permute(nums, visit, result, tmp_res);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-47-有重复数字的全排列"><a href="#leetcode-47-有重复数字的全排列" class="headerlink" title="leetcode 47. 有重复数字的全排列"></a><a href="https://leetcode.com/problems/permutations-ii/">leetcode 47. 有重复数字的全排列</a></h3><ul>
<li>输入：[1,2,1]</li>
<li>输出：[1,1,2]  [1,2,1]  [2,1,1]</li>
<li>有重复数字时，可以使用set代替之前的list,因为set本身就有过滤重复的用途。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_permute</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] visit, Set&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; tmp_res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp_res.size()==nums.length) &#123;</span><br><span class="line">     List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        tmp.addAll(tmp_res);</span><br><span class="line">        result.add(tmp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>) &#123;</span><br><span class="line">            tmp_res.add(nums[i]);</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            get_permute(nums, visit, result, tmp_res);</span><br><span class="line">            tmp_res.remove(tmp_res.size()-<span class="number">1</span>);</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    Set&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> HashSet();</span><br><span class="line">true<span class="keyword">int</span>[] visit = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    </span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    get_permute(nums, visit, res, list);</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span>(List&lt;Integer&gt; list1:res)</span><br><span class="line">        result.add(list1);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是这种做法会比较复杂，不管相同不相同的数字，都会进行一次全排列，会比较耗时，所以可以先将数组排序，将相同的放在一起，如果取出下一个元素和上一个相同，那么这一轮就可以不再进行全排列了。</li>
</ul>
<h3 id="leetcode-60-取特定位置的全排列字符串"><a href="#leetcode-60-取特定位置的全排列字符串" class="headerlink" title="leetcode 60. 取特定位置的全排列字符串"></a><a href="https://leetcode.com/problems/permutation-sequence/">leetcode 60. 取特定位置的全排列字符串</a></h3><ul>
<li>n=3, 则全排列为：<code>&quot;123&quot;</code> <code>&quot;132&quot;</code> <code>&quot;213&quot;</code> <code>&quot;231&quot;</code> <code>&quot;312&quot;</code> <code>&quot;321&quot;</code>，若k=3, 则输出为：<code>&quot;213&quot;</code></li>
<li>n=4, k=9, 则输出为：<code>&quot;2314&quot;</code></li>
<li>第一个位置有n中情况，第二个位置n-1中情况，…对于给定的n，其全排列中n!中情况。</li>
<li>求第一个位置的值时：k/(n-1)!  = shang…yu, 若yu&gt;0, 则拿到shang位置的值。其他同理</li>
<li>4 13     13/6 = 2…1    3</li>
<li>7/2! = 7/2 = 3…1   </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="给定第k个全排列，求倒数第k个全排列"><a href="#给定第k个全排列，求倒数第k个全排列" class="headerlink" title="给定第k个全排列，求倒数第k个全排列"></a>给定第k个全排列，求倒数第k个全排列</h3><ul>
<li>n=3, 则全排列为：<code>&quot;123&quot;</code> <code>&quot;132&quot;</code> <code>&quot;213&quot;</code> <code>&quot;231&quot;</code> <code>&quot;312&quot;</code> <code>&quot;321&quot;</code></li>
<li>给定k=3, 第3个全排列为 <code>&quot;213&quot;</code> ，则输出为：<code>&quot;231&quot;</code></li>
<li>这道题比较有规律，倒数第k个全排列，就是n+1减去正数第k个全排列每个位置上面的值。</li>
<li>例：k=2, n=3：正数：<code>&quot;132&quot;</code>；倒数：(n+1-1)(n+1-3)(n+1-2)=<code>&quot;312&quot;</code> </li>
</ul>
<h2 id="输出所有和为target的数组"><a href="#输出所有和为target的数组" class="headerlink" title="输出所有和为target的数组"></a><span>输出所有和为target的数组</span></h2><h3 id="先来一个类似的简单题：leetcode-633-判断一个值可否由两个数的平方和组成"><a href="#先来一个类似的简单题：leetcode-633-判断一个值可否由两个数的平方和组成" class="headerlink" title="先来一个类似的简单题：leetcode 633. 判断一个值可否由两个数的平方和组成"></a>先来一个类似的简单题：<a href="https://leetcode.com/problems/sum-of-square-numbers/">leetcode 633. 判断一个值可否由两个数的平方和组成</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">whether there<span class="string">&#x27;re two integers a and b such that a^2 + b^2 = c.</span></span><br><span class="line"><span class="string">例如：输入5，返回true， 因为 1 * 1 + 2 * 2 = 5。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解法：设置两个变量，i=0, j= $\sqrt5$ 的向下取整， 若$i<em>i+j</em>j&lt;c$, 则增大i，否则减小j，直到i&gt;j或找到满足条件的值为止。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = (<span class="keyword">int</span>)Math.sqrt(c);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = i*i+j*j;</span><br><span class="line">        <span class="keyword">if</span>(value==c) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(value&gt;c) j -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(value&lt;c) i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-15-threesum-输出所有和为0的数组"><a href="#leetcode-15-threesum-输出所有和为0的数组" class="headerlink" title="leetcode 15. threesum, 输出所有和为0的数组"></a><a href="https://leetcode.com/problems/3sum/">leetcode 15. threesum, 输出所有和为0的数组</a></h3><ul>
<li><p>先将数组进行排序。</p>
</li>
<li><p>设置两个指针，一个指向数组头，一个指向数组尾，向中间移动。</p>
</li>
<li><p>如果指针指向的两数之和小于target，则我们将左边那个指针i右移一位，使得指向的数字增大一些。</p>
</li>
<li><p>同理，如果两数之和大于target，则我们将右边那个指针j左移一位，使得指向的数字减小一些。</p>
</li>
<li><p>直到找到满足条件的两个值。</p>
</li>
<li><p>因为该道题是三个数的和为target，所以需要先确定一个数，然后让new_target = target-当前值。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Set&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>-nums[i];</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right &amp;&amp; left!=i &amp;&amp; right!=i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left]+nums[right]&gt;target)</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]+nums[right]&lt;target)</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;Integer&gt; tmp_res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                tmp_res.add(nums[left]);</span><br><span class="line">                tmp_res.add(nums[i]);</span><br><span class="line">                tmp_res.add(nums[right]);</span><br><span class="line">                res.add(tmp_res);</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Iterator&lt;List&lt;Integer&gt;&gt; iterator = res.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">        result.add(iterator.next());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-16-三个数的和最接近target"><a href="#leetcode-16-三个数的和最接近target" class="headerlink" title="leetcode 16. 三个数的和最接近target"></a><a href="https://leetcode.com/problems/3sum-closest/">leetcode 16. 三个数的和最接近target</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> new_tar = target - nums[i];</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right &amp;&amp; left!=i &amp;&amp; right!=i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left]+nums[right]&gt;new_tar)</span><br><span class="line">                right -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]+nums[right]&lt;new_tar)</span><br><span class="line">                left += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left = left==i? left-<span class="number">1</span>: left;</span><br><span class="line">        right = right==i ? right+<span class="number">1</span>:right;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i] + nums[left] + nums[right];</span><br><span class="line">        res = Math.abs(target-tmp)&lt;Math.abs(target-res)?tmp:res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a><span>其他题目</span></h2><h3 id="leetcode-56-Merge-Intervals"><a href="#leetcode-56-Merge-Intervals" class="headerlink" title="leetcode 56. Merge Intervals"></a><a href="https://leetcode.com/problems/merge-intervals/">leetcode 56. Merge Intervals</a></h3><ul>
<li>将数组有重叠的部分进行合并。</li>
<li>先将数组按照第一个元素的位置排序，然后比较前一个的第二个值与后一个的第一个值</li>
<li>如果前一个的第二个值大于后一个的第一个值，就进行合并，右边界取第一个和第二个右边界的大值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>]]</span><br><span class="line">Output: [[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>]]</span><br><span class="line">Explanation: Since intervals [<span class="number">1</span>,<span class="number">3</span>] and [<span class="number">2</span>,<span class="number">6</span>] overlaps, merge them into [<span class="number">1</span>,<span class="number">6</span>].</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] x, <span class="keyword">int</span>[] y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(x[<span class="number">0</span>], y[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;intervals.length) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        tmp[<span class="number">0</span>] = intervals[start][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cur_end = intervals[start][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(start&lt;intervals.length-<span class="number">1</span> &amp;&amp; cur_end&gt;=intervals[start+<span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">            cur_end = Math.max(cur_end, intervals[start+<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            start += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start += <span class="number">1</span>;</span><br><span class="line">        tmp[<span class="number">1</span>] = cur_end;</span><br><span class="line">        list.add(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[list.size()][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度问题</title>
    <url>//posts/11/</url>
    <content><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><span>时间复杂度</span></h2><h3 id="一遍循环：O-n"><a href="#一遍循环：O-n" class="headerlink" title="一遍循环：O(n)"></a>一遍循环：O(n)</h3><h3 id="嵌套两遍循环：O-n-n"><a href="#嵌套两遍循环：O-n-n" class="headerlink" title="嵌套两遍循环：O(n*n)"></a>嵌套两遍循环：O(n*n)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        .....</span><br></pre></td></tr></table></figure>

<h3 id="O-log-n-与-O-n-log-n-分析方法："><a href="#O-log-n-与-O-n-log-n-分析方法：" class="headerlink" title="O(log n) 与 O(n log n) 分析方法："></a>O(log n) 与 O(n log n) 分析方法：</h3><p>📍 自理解：一般这种带有 <code>logn</code> 都是有递归操作的。例如二分查找，就是每次我找到中间位置，然后如果查找的值大于当前值，那么我只需在后一半中继续查找，如果查找的值小于当前值，就在前一半中继续查找，每次我都可以减少一半数量的元素。其时间复杂度为 <code>O(logn)</code> 。像归并排序, 虽然我每次把整个array分成了两个部分，但是两个部分都需要去进行递归处理，那么时间复杂度就是 <code>O(nlogn)</code> 。</p>
<span id="more"></span>

<p>📍 通过递归深度来计算时间复杂度：</p>
<p><img data-src="/images/others/tree.png"></p>
<p><strong>快速排序的时间复杂度：</strong>快速排序是通过交换，找到中间位置的元素，然后左右两部分分别去递归进行排序。</p>
<p>如上图所示，如果快排每次选的节点恰好为中间节点，也就是二叉树是平衡的，那么二叉树的深度为 <code>log(n+1)</code> ，而在遍历每一层的时候，n个节点都会访问到。如上图 <code>B</code> 和 <code>C</code> 节点，虽然递归后不是一次访问n个节点，<code>B</code> 和 <code>C</code> 两次递归加起来就是总的节点个数n，一共有 <code>log(n+1)</code> 层，所以其时间复杂度为 <code>O(n*log(n+1)) = O(nlogn)</code></p>
<p><strong>二分查找的时间复杂度：</strong> 二分查找是每次访问中间节点，判断中间节点和我们要找的节点之间的大小，如果中间节点大于目标节点，那么只访问左半部分，否则只访问右半部分。</p>
<p>如上图所示，二叉树的深度为 <code>log(n+1)</code> ，先访问递归 <code>A</code>, 如果目标节点大于当前值 ，那么访问递归 <code>C</code>， 如果目标节点小于当前值，那么访问递归 <code>F</code>， 如果目标节点小于当前值，那么访问递归 <code>L</code>。从这个路径来看，在每一层的递归时，只需要访问一个节点，其时间复杂度为 <code>O(1)</code> 。二叉树的深度为 <code>log(n+1)</code> ， 所以二分查找的时间复杂度为 <code>O(1*log(n+1)) = O(logn)</code></p>
<p><strong>在未排序数组中寻找第k大的数的时间复杂度</strong>：寻找第k大的数，利用的是快速排序的思想，经过一轮排序，我们会找到一个元素的最终位置index，如果k大于index，那么我只要在后面继续快排，如果k小于index，那么就在前面快排。它和快排的区别在于我只要在一半的部分进行快排即可，而不需要两侧都进行快排。</p>
<p>如上图所示，二叉树的深度为 <code>log(n+1)</code> ，</p>
<ul>
<li>在第一层时，<code>n</code> 个节点都需要被访问到。</li>
<li>如果 k 大于 index，那么执行 <code>C</code> 侧的递归即可，这时需要访问的节点数为 <code>n/2</code>。 </li>
<li>如果 k 大于 index，那么执行 <code>G</code> 侧的递归即可，这时需要访问的节点数为 <code>n/4</code>。 </li>
<li>二叉树的深度为 <code>log(n+1)</code> ， 那么一共需要：$$n + \frac{n}{2} + \frac{n}{4} +…+ \frac{n}{2^{log(n+1)-1}} = \frac{2n^2}{n+1} = O(n)$$</li>
</ul>
<h2 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a><span>相关例题</span></h2><h3 id="leetcode-169-找出数组中出现次数大于一半的元素"><a href="#leetcode-169-找出数组中出现次数大于一半的元素" class="headerlink" title="leetcode 169. 找出数组中出现次数大于一半的元素"></a><a href="https://leetcode.com/problems/majority-element/">leetcode 169. 找出数组中出现次数大于一半的元素</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/<span class="number">2</span> ⌋ 的元素。</span><br><span class="line">你可以假设数组是非空的，并且给定的数组总是存在众数。</span><br></pre></td></tr></table></figure>

<ul>
<li>统计一遍。O(n)， 但需要额外的空间保存每个数字出现的次数。</li>
<li>排序。因为该元素出现次数大于一半，也就是说，排序后中间位置的数字一定是出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。而排序的时间复杂度最少也为O(nlogn).</li>
<li>排序后，中间的数字一定是出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素，也就是说我们只要找到排序后的中间元素就好了。这道题就可以转换为：找出第n/2大的数。</li>
<li>哈哈，这样就可以利用快排的特点了，那么就可以把时间复杂度缩小到O(n)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp_value = nums[begin];</span><br><span class="line">    <span class="keyword">while</span>(begin&lt;end) &#123;</span><br><span class="line">        <span class="keyword">while</span>(begin&lt;end &amp;&amp; nums[end]&gt;=tmp_value) end -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; end) nums[begin] = nums[end];</span><br><span class="line">        <span class="keyword">while</span>(begin&lt;end &amp;&amp; nums[begin]&lt;=tmp_value) begin += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; end) nums[end] = nums[begin];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[begin] = tmp_value;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, begin = <span class="number">0</span>, end = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(index!=nums.length/<span class="number">2</span>) &#123;</span><br><span class="line">        index = partition(nums, begin, end);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;nums.length/<span class="number">2</span>) end = index-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(index&lt;nums.length/<span class="number">2</span>) begin = index+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="剑指offer-找出数组中最小的k个数"><a href="#剑指offer-找出数组中最小的k个数" class="headerlink" title="剑指offer. 找出数组中最小的k个数"></a>剑指offer. 找出数组中最小的k个数</h3><ul>
<li>方法一：和上面一样，利用二分查找，找到最小的k个数，那么只要找到第k+1大的数，那么他之前的就是最小的k个数。这种方式会改变数组内的值</li>
<li>方法二：不改变数组的值。设置一个容器，存储空间为k，遍历数组，每遍历到一个数，判断容器里的最大值和当前值大小，如果当前值小于容器中的最大值，删除容器中的最大值，用当前值替换。</li>
<li>而在容器中找到最大值插入删除的操作，最省时的是构建最大堆。时间复杂度为O(log k)。那么总的时间复杂度就是O(n log k)</li>
<li>第二种方法对<strong>海量数据</strong>很有用，因为第一种方法需要一次把所有的数据都读进来，而第二种方法可以一个一个读入，辅助空间为k即可。n很大k很小时，这种方法很好。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="剑指offer-在排序数组中查找某数字出现的次数"><a href="#剑指offer-在排序数组中查找某数字出现的次数" class="headerlink" title="剑指offer. 在排序数组中查找某数字出现的次数"></a>剑指offer. 在排序数组中查找某数字出现的次数</h3><ul>
<li>利用二分查找，找到重复数字的左右端点。</li>
<li>查找左端点的时候，利用二分查找，如果当前节点为重复数字，看它和左边的节点是否相等，如果不相等，那么该节点为左端点。 右端点也是一样的。</li>
<li>找到左右端点的位置，就可以知道其出现次数了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="剑指offer-0到n-1中缺失的数字"><a href="#剑指offer-0到n-1中缺失的数字" class="headerlink" title="剑指offer. 0到n-1中缺失的数字"></a>剑指offer. 0到n-1中缺失的数字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">长度为n-<span class="number">1</span>的递增序列，其中只有一个数字不存在。找到这个不存在的数字。</span><br></pre></td></tr></table></figure>

<ul>
<li>就是找到第一个index与值不相等的元素。</li>
<li>二分查找 。如果当前值和index不等，并且前一个值和index相等，那么这个值就是我们想要的。</li>
</ul>
<h3 id="剑指offer-递增序列，找到值与index相等的任意一个元素。"><a href="#剑指offer-递增序列，找到值与index相等的任意一个元素。" class="headerlink" title="剑指offer.  递增序列，找到值与index相等的任意一个元素。"></a>剑指offer.  递增序列，找到值与index相等的任意一个元素。</h3><ul>
<li>如果当前值比index小，那么它前面不可能有了，只能向后找</li>
<li>如果当前值比index 大，那么它后面是不可能有了，只能向前找。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="把数字翻译成字符串。"><a href="#把数字翻译成字符串。" class="headerlink" title="把数字翻译成字符串。"></a>把数字翻译成字符串。</h3><p>p 231.  46题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="leetcode-4-找到两个已排序数组的中位数"><a href="#leetcode-4-找到两个已排序数组的中位数" class="headerlink" title="leetcode 4. 找到两个已排序数组的中位数"></a><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">leetcode 4. 找到两个已排序数组的中位数</a></h3><ul>
<li>最简单直接的方法，先将两个有序数组合并成一个有序数组，然后找到中位数。</li>
<li>合并时可以到 <code>(nums1.length + nums2.length)/2 + 1</code> 的时候就停止，因为我们的目的就是找中位数。</li>
<li>这种方法的时间复杂度是 <code>O(m+n)</code> 。 <code>m</code> 和 <code>n</code> 分别为两个数组的长度。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="keyword">int</span> length = nums1.length + nums2.length;</span><br><span class="line">    <span class="keyword">int</span>[] res_arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">    <span class="keyword">if</span>(nums1.length==<span class="number">0</span>) res_arr = Arrays.copyOf(nums2, nums2.length);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums2.length==<span class="number">0</span>) res_arr = Arrays.copyOf(nums1, nums1.length);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> begin_1 = <span class="number">0</span>, begin_2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(begin_1&gt;=nums1.length) &#123;</span><br><span class="line">                res_arr[i] = nums2[begin_2];</span><br><span class="line">                begin_2 += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(begin_2&gt;=nums2.length) &#123;</span><br><span class="line">                res_arr[i] = nums1[begin_1];</span><br><span class="line">                begin_1 += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[begin_1]&lt;nums2[begin_2]) &#123;</span><br><span class="line">                    res_arr[i] = nums1[begin_1];</span><br><span class="line">                    begin_1 += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    res_arr[i] = nums2[begin_2];</span><br><span class="line">                    begin_2 += <span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==length/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res_arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = nums1.length + nums2.length;</span><br><span class="line">    <span class="keyword">int</span>[] res = merge(nums1, nums2);</span><br><span class="line">    <span class="keyword">if</span>(length%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> (res[length/<span class="number">2</span>-<span class="number">1</span>] + res[length/<span class="number">2</span>])/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> res[length/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>涉及到有序数组，涉及到查找，就要想到<strong>二分查找</strong>！！</p>
</li>
<li><p>解释：<a href="https://youtu.be/LPFhl65R7ww">https://youtu.be/LPFhl65R7ww</a></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums2.length&lt;nums1.length) &#123; <span class="comment">//为了让nums1中存的是短的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] tmp = nums1;</span><br><span class="line">        nums1 = nums2;</span><br><span class="line">        nums2 = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = nums1.length;</span><br><span class="line">    <span class="keyword">int</span> length = (nums1.length + nums2.length + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(begin&lt;=end) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid1 = (begin + end)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> mid2 = length - mid1;</span><br><span class="line">        <span class="keyword">if</span>(mid1&lt;nums1.length &amp;&amp; nums2[mid2-<span class="number">1</span>]&gt;nums1[mid1]) &#123;</span><br><span class="line">            begin = mid1 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid1&gt;<span class="number">0</span> &amp;&amp; nums1[mid1-<span class="number">1</span>]&gt;nums2[mid2])&#123;</span><br><span class="line">            end = mid1 - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> max_of_left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid1==<span class="number">0</span>) max_of_left = nums2[mid2-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid2==<span class="number">0</span>) max_of_left = nums1[mid1-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> max_of_left =  Math.max(nums1[mid1-<span class="number">1</span>], nums2[mid2-<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((nums1.length + nums2.length)%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> max_of_left;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> min_of_right = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid1==nums1.length) min_of_right = nums2[mid2];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid2==nums2.length) min_of_right = nums1[mid1];</span><br><span class="line">            <span class="keyword">else</span> min_of_right =  Math.min(nums1[mid1], nums2[mid2]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (max_of_left + min_of_right)/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-380-O-1-时间插入、删除、随即抽取"><a href="#leetcode-380-O-1-时间插入、删除、随即抽取" class="headerlink" title="leetcode 380. O(1)时间插入、删除、随即抽取"></a><a href="https://leetcode.com/problems/insert-delete-getrandom-o1/">leetcode 380. O(1)时间插入、删除、随即抽取</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Design a data structure that supports all following operations in average <span class="title">O</span><span class="params">(<span class="number">1</span>)</span> time.</span></span><br><span class="line"><span class="function">1. <span class="title">insert</span><span class="params">(val)</span>: Inserts an item val to the set <span class="keyword">if</span> not already present.</span></span><br><span class="line"><span class="function">2. <span class="title">remove</span><span class="params">(val)</span>: Removes an item val from the set <span class="keyword">if</span> present.</span></span><br><span class="line"><span class="function">3. getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>O(1)时间进行插入和删除操作，也就是不能遍历。</li>
<li>而且不能删除list中间的某一个元素，因为删除list中间的某一个元素的时间复杂度是O(n), 因为后面的元素需要全部向前面移动一位，也就是如果要使用list，那么只能删除最后一个元素。</li>
<li>可以使用hashmap，因为hashmap相当于链表，这道题又是set，也就是不存在重复元素。但是因为最后要随机抽取元素，只用map也不行，因为随机一个index之后，不能在map中去遍历，因为时间复杂度需要是O(1).</li>
<li>所以只能map和list一起用，map中存储元素值和其在list中的索引，每删除一个元素，那么我们需要把list中的最后一个元素和当前元素交换，然后删除最后一个元素。并且改变map中最后一个元素的value值，也就是在list中的索引值。这样随机取数的时候只要在list中get(index)即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.insert(val);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// map里面存储值和该值在list种的索引</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize your data structure here. </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Inserts a value to the set. </span></span><br><span class="line">    <span class="comment">// Returns true if the set did not already contain the specified element. </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.putIfAbsent(val, list.size())==<span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(val);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Removes a value from the set. </span></span><br><span class="line">    <span class="comment">// Returns true if the set contained the specified element.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = map.getOrDefault(val, Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">if</span>(index==Integer.MAX_VALUE) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            map.remove(val);</span><br><span class="line">            <span class="keyword">if</span>(index&lt;list.size()-<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 用list中的最后一个元素替换该位置的值</span></span><br><span class="line">                list.set(index, list.get(list.size()-<span class="number">1</span>)); </span><br><span class="line">                <span class="comment">// 改变map中该元素对应的value值，即其在list中的索引</span></span><br><span class="line">                map.put(list.get(list.size()-<span class="number">1</span>), index); </span><br><span class="line">            &#125;</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>); <span class="comment">// 删除list中的最后一个元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get a random element from the set. </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = (<span class="keyword">int</span>)(Math.random()*(list.size()));</span><br><span class="line">        <span class="keyword">return</span> list.get(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-381-O-1-时间插入、删除、随即抽取-允许重复"><a href="#leetcode-381-O-1-时间插入、删除、随即抽取-允许重复" class="headerlink" title="leetcode 381. O(1)时间插入、删除、随即抽取 (允许重复)"></a><a href="https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/">leetcode 381. O(1)时间插入、删除、随即抽取 (允许重复)</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Note: Duplicate elements are allowed.</span><br><span class="line"><span class="number">1.</span> insert(val): Inserts an item val to the collection.</span><br><span class="line"><span class="number">2.</span> remove(val): Removes an item val from the collection <span class="keyword">if</span> present.</span><br><span class="line"><span class="number">3.</span> getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>//posts/12/</url>
    <content><![CDATA[<p><strong>平均查找长度（Average Search Length，ASL）：</strong>需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。</p>
<span id="more"></span>

<p><strong>平均查找长度（Average Search Length，ASL）：</strong>需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。</p>
<p>　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。<br>　　Pi：查找表中第i个数据元素的概率。<br>　　Ci：找到第i个数据元素时已经比较过的次数。</p>
<p><a href="https://www.cnblogs.com/maybe2030/p/4715035.html">https://www.cnblogs.com/maybe2030/p/4715035.html</a></p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>洗牌算法</title>
    <url>//posts/13/</url>
    <content><![CDATA[<p>之前两次面试都被问到洗牌算法，虽然不是直接问的，但都是基于洗牌算法的。结果第一次被问到之后没有重视，导致在一个地方栽了两次坑。。。😭</p>
<blockquote>
<p>洗牌算法，就是给你一个1到n的序列，让你随机打乱，保证每个数出现在任意一个位置的概率相同。换句话说，经过洗牌的数组的排列组合有n!种可能。</p>
</blockquote>
<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a><span>解法</span></h2><h3 id="Fisher-Yates-Shuffle-算法-动态演示"><a href="#Fisher-Yates-Shuffle-算法-动态演示" class="headerlink" title="Fisher-Yates Shuffle 算法 动态演示"></a>Fisher-Yates Shuffle 算法 <a href="https://bost.ocks.org/mike/shuffle/">动态演示</a></h3><ul>
<li><p>思想：从原始数组中随机取一个之前没有取过的数字到新的数组中。</p>
</li>
<li><p>步骤：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 初始化原始数组和新数组，原始数组长度为n（已知）；</span><br><span class="line"><span class="attribute">2</span>. 从还没处理的数组（假如还剩k个）中，随机产生一个[<span class="number">0</span>, k)之间的数字p（数组下标从<span class="number">0</span>开始）；</span><br><span class="line"><span class="attribute">3</span>. 从剩下的k个数中第p个数取出；</span><br><span class="line"><span class="attribute">4</span>. 重复步骤<span class="number">2</span>，<span class="number">3</span>直到数字全部取完；</span><br><span class="line"><span class="attribute">5</span>. 从步骤<span class="number">3</span>中去除的数字序列便是一个打乱的数列。</span><br></pre></td></tr></table></figure></li>
<li><p>证明：证明其随机性，即每个元素被放置在新数组中的第 <code>i</code> 个位置是 <code>1/n</code><br>一个元素m被放入第 <code>i</code> 个位置的概率 P = 前 <code>i-1</code> 个位置选择元素时没有选中m的概率 * 第 <code>i</code> 个位置选中m的概率，即:</p>
<p>$$P = \frac{n-1}{n} * \frac{n-2}{n-1} * … * \frac{n-i+1}{n-i+2} * \frac{1}{n-i+1} = \frac{1}{n}$$</p>
</li>
<li><p><strong>时间复杂度为O(n*n),空间复杂度为O(n).</strong></p>
</li>
<li><p>时间复杂度为O(n*n) 是因为我们要删除list中的元素，那么也就是要将后面的元素都向前移动一位，导致时间复杂度为O(n*n) .</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList <span class="title">Fisher_Yates_Shuffle</span><span class="params">(ArrayList&lt;Integer&gt; arr)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; tar_arr = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">int</span> n = arr.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="comment">// 生成0-n的随机数，包括0不包括n -- [0,n)</span></span><br><span class="line">        <span class="keyword">int</span> p =(<span class="keyword">int</span>)(Math.random()*(n-i));</span><br><span class="line">        tar_arr.add(arr.get(p));</span><br><span class="line">        arr.remove(p);  <span class="comment">// 删除index=p位置的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tar_arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Knuth-Durstenfeld-Shuffle-算法"><a href="#Knuth-Durstenfeld-Shuffle-算法" class="headerlink" title="Knuth-Durstenfeld Shuffle 算法"></a>Knuth-Durstenfeld Shuffle 算法</h3><ul>
<li>对1的算法进行了改进，直接在原始数组上进行交换，而不必开辟额外的数组，节省空间。</li>
<li>思想：每次从未处理的数字中随机取出一个数字，然后把该数字放在数组的尾部，即数组尾部存放的是已经处理过的数字。</li>
<li>步骤：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 建立一个数组大小为 n 的数组 arr，分别存放 1 到 n 的数值；</span><br><span class="line"><span class="bullet">2.</span> 生成一个从 0 到 n - 1 的随机数 x；</span><br><span class="line"><span class="bullet">3.</span> 输出 arr 下标为 x 的数值，即为第一个随机数；</span><br><span class="line"><span class="bullet">4.</span> 将 arr 的尾元素和下标为 x 的元素互换；</span><br><span class="line"><span class="bullet">5.</span> 同2，生成一个从 0 到 n - 2 的随机数 x；</span><br><span class="line"><span class="bullet">6.</span> 输出 arr 下标为 x 的数值，为第二个随机数；</span><br><span class="line"><span class="bullet">7.</span> 将 arr 的倒数第二个元素和下标为 x 的元素互换；</span><br></pre></td></tr></table></figure></li>
<li><strong>时间复杂度为O(n),空间复杂度为O(1)。缺点：必须知道数组长度n.</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Knuth_Durstenfeld_Shuffle</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="comment">// 生成0-n的随机数，包括0不包括n -- [0,n)</span></span><br><span class="line">        <span class="keyword">int</span> p =(<span class="keyword">int</span>)(Math.random()*(n-i));</span><br><span class="line">        swap(arr, p, n-i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Inside-Out-Algorithm-算法"><a href="#Inside-Out-Algorithm-算法" class="headerlink" title="Inside-Out Algorithm 算法"></a>Inside-Out Algorithm 算法</h3><ul>
<li> Knuth-Durstenfeld Shuffle 是一个内部打乱的算法，算法完成后原始数据被直接打乱，尽管这个方法可以节省空间，但在有些应用中可能需要保留原始数据，所以需要另外开辟一个数组来存储生成的新序列。</li>
<li>Inside-Out Algorithm 算法是既可以开辟新的空间，而且不需要对原数组进行删除操作。</li>
<li>思想：设一游标i从前向后扫描原始数据的拷贝，在[0, i]之间随机一个下标p，然后用位置p的元素替换掉位置i的数字，再用原始数据位置i的元素替换掉拷贝数据位置p的元素。其作用相当于在拷贝数据中交换i与p位置处的值。</li>
<li><strong>时间复杂度为O(n),空间复杂度为O(n)</strong></li>
<li>这个算法的一个优点就是可以处理n未知的数组。</li>
<li>这个相当于：<code>1*2*3*4*5*6*7*...*n = n!</code> 种可能情况。</li>
<li>而前两种洗牌算法都相当于：<code>n*n-1*n-2*n-3*...*1 = n!</code> 种可能情况。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] Inside_Out_Shuffle(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] tar_arr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">    tar_arr = arr.clone();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = (<span class="keyword">int</span>)(Math.random()*(i+<span class="number">1</span>));</span><br><span class="line">        tar_arr[i] = tar_arr[p];</span><br><span class="line">        tar_arr[p] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tar_arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：之前Inside-Out Algorithm看了半天，没搞明白为什么需要那么麻烦两个数组替换来替换去的。。搞这么一波骚操作，但其实，Inside-Out Algorithm算法和Knuth-Durstenfeld Shuffle 算法的区别就在于一个原地打乱，一个在新数组上打乱。那么我们就可以先拷贝一份原数组，然后在新数组上按照Knuth-Durstenfeld Shuffle 算法的方法执行一遍就行了。两个数组替换实际上就是代替了原来的swap操作，不用额外开辟一个空间给暂存数据。而且Inside-Out Algorithm是从前向后处理的，可以处理n未知的数组。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><span>例题</span></h2><h3 id="leetcode-384-数组随即洗牌"><a href="#leetcode-384-数组随即洗牌" class="headerlink" title="leetcode 384. 数组随即洗牌"></a><a href="https://leetcode.com/problems/shuffle-an-array/">leetcode 384. 数组随即洗牌</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>//posts/14/</url>
    <content><![CDATA[<h2 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a><span>链表结构</span></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>链表有一个很烦的点在于可能会对头节点进行处理。。所以时刻不能忽略头节点可能被处理的情况。</p>
</blockquote>
<span id="more"></span>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><span>例题</span></h2><h3 id="在o-1-时间内删除链表节点，给定头节点和要删除节点。"><a href="#在o-1-时间内删除链表节点，给定头节点和要删除节点。" class="headerlink" title="在o(1)时间内删除链表节点，给定头节点和要删除节点。"></a>在o(1)时间内删除链表节点，给定头节点和要删除节点。</h3><ul>
<li>知道要删除的节点，要从头开始遍历找到他前面的结点，才能删除该节点。</li>
<li>把要删节点的下一个节点的值赋值给要删除的节点，然后删除要删节点的下一个节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode head, ListNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span> || node==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//node节点为尾节点，则需要找到node的前驱节点再删除它</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ListNode pre_node = head;</span><br><span class="line">        <span class="keyword">while</span>(pre_node.next!=node)</span><br><span class="line">            pre_node = pre_node.next;</span><br><span class="line">        pre_node.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-83-删除已排序链表中重复的节点"><a href="#leetcode-83-删除已排序链表中重复的节点" class="headerlink" title="leetcode 83. 删除已排序链表中重复的节点"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">leetcode 83. 删除已排序链表中重复的节点</a></h3><ul>
<li>题意：输入：<code>1-&gt;2-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5</code>   输出：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></li>
<li>从前向后遍历，设立两个指针pre， post。pre指向重复位置的第一个节点，post指向重复的最后一个节点，然后将他们相连即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode pre = head;</span><br><span class="line">    ListNode post = head;</span><br><span class="line">    <span class="keyword">while</span>(post!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(post.next!=<span class="keyword">null</span> &amp;&amp; post.val==post.next.val)</span><br><span class="line">            post = post.next;</span><br><span class="line">        pre.next = post.next;</span><br><span class="line">        pre = post.next;</span><br><span class="line">        post = post.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Leetcode-82-删除已排序链表中重复的节点"><a href="#Leetcode-82-删除已排序链表中重复的节点" class="headerlink" title="Leetcode 82. 删除已排序链表中重复的节点"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">Leetcode 82. 删除已排序链表中重复的节点</a></h3><ul>
<li>题意：输入：<code>1-&gt;1-&gt;2-&gt;2-&gt;3-&gt;6-&gt;4-&gt;4-&gt;5</code>   输出：<code>3-&gt;6-&gt;5</code></li>
<li>和之前的不同，这个因为要把重复的都删掉，那么头节点也会有重复的，所以要多设置一个开始节点start</li>
<li>start.next = head，防止头节点被删除。</li>
<li><strong>要学会设置计数变量，计数变量有很多好处，到处都用得到，辅助空间o(1)，还能有很大作用</strong></li>
<li>但是这个代码的还是很耗时的，有待优化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    start.next = head;</span><br><span class="line">    ListNode pre = start;</span><br><span class="line">    ListNode post = start.next;</span><br><span class="line">    <span class="keyword">int</span> current_num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(post!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(post.next!=<span class="keyword">null</span> &amp;&amp; post.val==post.next.val) &#123;</span><br><span class="line">            current_num += <span class="number">1</span>;</span><br><span class="line">            post = post.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(current_num==<span class="number">1</span>) &#123;</span><br><span class="line">            pre.next = post;</span><br><span class="line">            pre = post;</span><br><span class="line">        &#125;</span><br><span class="line">        post = post.next;</span><br><span class="line">        current_num = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next=post;</span><br><span class="line">  	<span class="keyword">return</span> start.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-19-移除链表中倒数第n个节点"><a href="#leetcode-19-移除链表中倒数第n个节点" class="headerlink" title="leetcode 19. 移除链表中倒数第n个节点"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">leetcode 19. 移除链表中倒数第n个节点</a></h3><ul>
<li>题意：输入：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>,   <code>n=2</code>.   输出：<code>1-&gt;2-&gt;3-&gt;5</code></li>
<li><strong>因为要移除的可能是头指针，所以要定义一个指针指向头节点</strong></li>
<li>思路1：遍历一遍，知道链表长度，第二次遍历到<code>length-n-1</code>的时候，<code>node.next = node.next.next</code> 即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">  	start.next = head;</span><br><span class="line">    ListNode node1 = next;</span><br><span class="line">    ListNode node2 = next;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(node1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        length += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        node2 = node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node2.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node2.next.next==<span class="keyword">null</span>) node2.next = <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">else</span> node2.next = node2.next.next;</span><br><span class="line">    <span class="keyword">return</span> start.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>思路2：要想只遍历一遍链表，需要定义两个指针，当第一个指针走n次之后，两个指针一起走，第一个指针指向链表尾部时，第二个链表指向要删除的前一个位置。然后<code>node.next = node.next.next</code> 即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line"> 	start.next = head;</span><br><span class="line">    ListNode node1 = start;</span><br><span class="line">    ListNode node2 = start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">  	<span class="keyword">while</span>(node1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        node2 = node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node2.next.next==<span class="keyword">null</span>) node2.next=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span> node2.next = node2.next.next;</span><br><span class="line">    <span class="keyword">return</span> start.next;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="leetcode-876-输出链表的中间节点"><a href="#leetcode-876-输出链表的中间节点" class="headerlink" title="leetcode 876. 输出链表的中间节点"></a><a href="https://leetcode.com/problems/middle-of-the-linked-list/">leetcode 876. 输出链表的中间节点</a></h3><ul>
<li>如果链表长度为奇数，输出中间一个：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>, 输出为：<code>3</code></li>
<li>如果链表长度为偶数，输出中间两个的第二个：<code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</code>, 输出为：<code>4</code></li>
<li>这道题和上一道题和相似，上一道题是指定第n个，这个是中间一个</li>
<li>但不同点在于，知道n就知道差几了，这个完全不知道链表长度啊！</li>
<li>快慢指针赛跑，快指针一次走两步，慢指针一次走一步，快指针到链表尾时，慢指针指向中间节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>举一反三：当我们用一个指针遍历链表不能解决问题的时候，可以尝试用两个指针来遍历链表。可以让其中一个指针遍历的速度快一些，或者让它在链表上先走若干步。</p>
</blockquote>
<h3 id="leetcode-206-链表反转"><a href="#leetcode-206-链表反转" class="headerlink" title="leetcode 206. 链表反转"></a><a href="https://leetcode.com/problems/reverse-linked-list/">leetcode 206. 链表反转</a></h3><ul>
<li>定义一个new_head, 用在开头，每次在new_head之后插入节点。</li>
<li>Ori: 1-&gt;2-&gt;3-&gt;4</li>
<li>New: new_head-&gt;1;   new_head-&gt;2-&gt;1;  new_head-&gt;3-&gt;2-&gt;1;  new_head-&gt;4-&gt;3-&gt;2-&gt;1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode new_head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode tmp = head.next;</span><br><span class="line">        head.next = new_head.next;</span><br><span class="line">        new_head.next = head;</span><br><span class="line">        head = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>准确率，精确率，召回率和AUC曲线，PR曲线</title>
    <url>//posts/300/</url>
    <content><![CDATA[<p>我们都知道机器学习要建模，但是对于模型性能的好坏（即模型的泛化能力），我们并不知道是怎样的，很可能这个模型就是一个差的模型，泛化能力弱，对测试集不能很好的预测或分类。那么如何知道这个模型是好是坏呢？我们必须有个评判的标准。<strong>为了了解模型的泛化能力，我们需要用某个指标来衡量，这就是性能度量的意义。</strong>有了一个指标，我们就可以对比不同模型了，从而知道哪个模型相对好，那个模型相对差，并通过这个指标来进一步调参逐步优化我们的模型。</p>
<span id="more"></span>

<h2 id="混淆矩阵-（TP-TN-FP-FN）"><a href="#混淆矩阵-（TP-TN-FP-FN）" class="headerlink" title="混淆矩阵 （TP TN FP FN）"></a><span>混淆矩阵 （TP TN FP FN）</span></h2><ol>
<li>True Positives,TP：预测为正样本，实际也为正样本的特征数</li>
<li>False Positives,FP：预测为正样本，实际为负样本的特征数</li>
<li>True Negatives,TN：预测为负样本，实际也为负样本的特征数</li>
<li>False Negatives,FN：预测为负样本，实际为正样本的特征数</li>
</ol>
<p><strong>True / False：是针对原样本而言的。</strong><br><strong>Positive / Negative：是针对预测结果而言的。</strong></p>
<h2 id="准确率-accuracy"><a href="#准确率-accuracy" class="headerlink" title="准确率 (accuracy)"></a><span>准确率 (accuracy)</span></h2><p>既然是个分类指标，我们可以很自然的想到准确率，准确率的定义是预测正确的结果占总样本的百分比，其公式如下：</p>
<p>$$accuracy = \frac{TP+TN}{TP+TN+FP+FN}$$</p>
<p>虽然准确率可以判断总的正确率，但是在<strong>样本不平衡</strong>的情况下，并不能作为很好的指标来衡量结果。举个简单的例子，比如在一个总样本中，正样本占90%，负样本占10%，样本是严重不平衡的。对于这种情况，我们只需要将全部样本预测为正样本即可得到90%的高准确率，但实际上我们并没有很用心的分类，只是随便无脑一分而已。这就说明了：由于样本不平衡的问题，导致了得到的高准确率结果含有很大的水分。即如果样本不平衡，准确率就会失效。</p>
<p>正因为如此，也就衍生出了其它两种指标：精准率和召回率。</p>
<h2 id="精确率-precision"><a href="#精确率-precision" class="headerlink" title="精确率 (precision)"></a><span>精确率 (precision)</span></h2><p>精确率：预测为正的样本中有多少是真的正样本。精确率和准确率看上去有些类似，但是完全不同的两个概念。精准率代表对正样本结果中的预测准确程度，而准确率则代表整体的预测准确程度，既包括正样本，也包括负样本。</p>
<p>$$precision = \frac{TP}{TP+FP}$$</p>
<h2 id="召回率-recall"><a href="#召回率-recall" class="headerlink" title="召回率 (recall)"></a><span>召回率 (recall)</span></h2><p>召回率，又叫查全率，它是针对原样本而言的，它的含义是样本中为正的，有多少被预测为正。</p>
<p>$$recall = \frac{TP}{TP+FN}$$</p>
<p><strong>召回率的应用场景：</strong>比如拿网贷违约率为例，相对好用户，我们更关心坏用户，不能错放过任何一个坏用户。因为如果我们过多的将坏用户当成好用户，这样后续可能发生的违约金额会远超过好用户偿还的借贷利息金额，造成严重偿失。<strong>召回率越高，代表实际坏用户被预测出来的概率越高，它的含义类似：宁可错杀一千，绝不放过一个。</strong></p>
<h2 id="特异度-specificity"><a href="#特异度-specificity" class="headerlink" title="特异度 (specificity) "></a><span>特异度 (specificity) </span></h2><p>特异度被定义为：样本中为负的，有多少被预测为负。和召回率刚好相反，一个针对正样本而言，一个针对负样本而言。</p>
<p>$$specificity = \frac{TN}{TN+FP}$$</p>
<h2 id="F-1值"><a href="#F-1值" class="headerlink" title="F_1值"></a><span>F_1值</span></h2><p>F1值 = 精确率 * 召回率 * 2 / (精确率 + 召回率) （F1值即为精确率和召回率的调和平均值）</p>
<p>$$F_1 = \frac{P * R * 2}{P + R}$$</p>
<p>不妨举<a href="https://link.zhihu.com/?target=http://peghoty.blog.163.com/blog/static/49346409201302595935709/">这样一个例子</a>：某池塘有1400条鲤鱼，300只虾，300只鳖。现在以捕鲤鱼为目的。撒一大网，逮着了700条鲤鱼，200只虾，100只鳖。那么，这些指标分别如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">P</span> (precision) = <span class="number">700</span> / (<span class="number">700</span> + <span class="number">200</span> + <span class="number">100</span>) = <span class="number">70</span>%</span><br><span class="line"><span class="attribute">R</span> (recall) = <span class="number">700</span> / <span class="number">1400</span> = <span class="number">50</span>%</span><br><span class="line"><span class="attribute">F1</span> = <span class="number">70</span>% * <span class="number">50</span>% * <span class="number">2</span> / (<span class="number">70</span>% + <span class="number">50</span>%) = <span class="number">58</span>.<span class="number">3</span>%</span><br></pre></td></tr></table></figure>

<p>不妨看看如果把池子里的所有的鲤鱼、虾和鳖都一网打尽，这些指标又有何变化：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">P</span> (precision) = <span class="number">1400</span> / (<span class="number">1400</span> + <span class="number">300</span> + <span class="number">300</span>) = <span class="number">70</span>%</span><br><span class="line"><span class="attribute">R</span> (recall) = <span class="number">1400</span> / <span class="number">1400</span> = <span class="number">100</span>%</span><br><span class="line"><span class="attribute">F1</span> = <span class="number">70</span>% * <span class="number">100</span>% * <span class="number">2</span> / (<span class="number">70</span>% + <span class="number">100</span>%) = <span class="number">82</span>.<span class="number">35</span>% </span><br></pre></td></tr></table></figure>

<p>由此可见，精确率是评估捕获的成果中目标成果所占得比例；召回率，顾名思义，就是从关注领域中，召回目标类别的比例；而F值，则是综合这二者指标的评估指标，用于综合反映整体的指标。</p>
<p>当然希望检索结果precision越高越好，同时recall也越高越好，但事实上这两者在某些情况下有矛盾的。比如极端情况下，我们只搜索出了一个结果，且是准确的，那么precision就是100%，但是recall就很低；而如果我们把所有结果都返回，那么recall是100%，但是precision就会很低。因此在不同的场合中需要自己判断希望precision比较高或是recall比较高。如果是做实验研究，可以绘制<strong>Precision-Recall曲线</strong>来帮助分析。</p>
<p>有时候我们对精确率和召回率并不是一视同仁，比如有时候我们更加重视精确率。我们用一个参数 $\beta$ 来度量两者之间的关系。如果 $\beta&gt;1$, 召回率有更大影响，如果 $\beta&lt;1$, 精确率有更大影响。自然，当 $\beta=1$ 的时候，精确率和召回率影响力相同，和F1形式一样。含有度量参数 $\beta$ 的F1我们记为 $F_\beta$, 严格的数学定义如下：</p>
<p>$$𝐹_𝛽=\frac{(1+𝛽^2)∗𝑃∗𝑅}{𝛽^2∗𝑃+𝑅} $$</p>
<h2 id="RoC-曲线与-AUC-值"><a href="#RoC-曲线与-AUC-值" class="headerlink" title="RoC 曲线与 AUC 值"></a><span>RoC 曲线与 AUC 值</span></h2><p>🎋. 灵敏度 TPR (true positive rate) (同召回率)：真实样本中为正的，有多少被预测为正</p>
<p>🎋. 1-特异度：FPR (false positive rate)：真实样本为负的，有多少被预测为正</p>
<p>$$FPR = \frac{FP}{FP+TN}$$</p>
<p>🎋. ROC曲线与AUC值：以TPR为y轴，以FPR为x轴，我们就直接得到了RoC曲线。从FPR和TPR的定义可以理解，TPR越高，FPR越小，我们的模型和算法就越高效。也就是画出来的RoC曲线越靠近左上越好。如下图左图所示。从几何的角度讲，RoC曲线下方的面积越大越大，则模型越优。所以有时候我们用<strong>RoC曲线下的面积</strong>，即AUC（Area Under Curve）值来作为算法和模型好坏的标准。</p>
<p><img data-src="/images/others/1.png" alt="img"></p>
<p>🎋. PR曲线：以精确率为y轴，以召回率为x轴，我们就得到了PR曲线。仍然从精确率和召回率的定义可以理解，精确率越高，召回率越高，我们的模型和算法就越高效。也就是画出来的PR曲线越靠近右上越好。如上图右图所示。</p>
<p>参考链接：<a href="https://segmentfault.com/a/1190000016686335">https://segmentfault.com/a/1190000016686335</a><br>参考链接：<a href="https://www.cnblogs.com/pinard/p/5993450.html">https://www.cnblogs.com/pinard/p/5993450.html</a></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>//posts/15/</url>
    <content><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a><span>队列</span></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue&lt;Integer&gt; que = <span class="keyword">new</span> LinkedList();</span><br><span class="line">que.offer(<span class="number">1</span>);  <span class="comment">// 添加元素</span></span><br><span class="line"><span class="keyword">int</span> v1 = que.poll();   <span class="comment">// 返回第一个元素，并在队列中删除，如果队列为空，返回null</span></span><br><span class="line"><span class="keyword">int</span> v2 = que.peek();   <span class="comment">// 返回第一个元素</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a><span>双端队列</span></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Deque&lt;Integer&gt; mDeque = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</span><br><span class="line">que.offerFirst(<span class="number">1</span>);  <span class="comment">// 在队头添加元素</span></span><br><span class="line">que.offerLast(<span class="number">1</span>);   <span class="comment">// 在队尾添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v1 = que.pollFirst();  <span class="comment">// 返回队头元素并删除</span></span><br><span class="line"><span class="keyword">int</span> v2 = que.pollLast();   <span class="comment">// 返回队尾元素并删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v1 = que.peekFirst();  <span class="comment">// 返回队头元素</span></span><br><span class="line"><span class="keyword">int</span> v2 = que.peekLast();   <span class="comment">// 返回队头元素</span></span><br></pre></td></tr></table></figure>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><span>例题</span></h2><h3 id="leetcode-239-求滑动窗口中的最大值-Sliding-Window-Maximum"><a href="#leetcode-239-求滑动窗口中的最大值-Sliding-Window-Maximum" class="headerlink" title="leetcode 239. 求滑动窗口中的最大值 Sliding Window Maximum"></a><a href="https://leetcode.com/problems/sliding-window-maximum/">leetcode 239. 求滑动窗口中的最大值 Sliding Window Maximum</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">1</span>,<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], and k = <span class="number">3</span>, k为窗口大小</span><br><span class="line">Output: [<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] </span><br><span class="line">Explanation: </span><br><span class="line"></span><br><span class="line">Window position                Max</span><br><span class="line">---------------               -----</span><br><span class="line">[<span class="number">1</span>  <span class="number">3</span>  -<span class="number">1</span>] -<span class="number">3</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span>       <span class="number">3</span></span><br><span class="line"> <span class="number">1</span> [<span class="number">3</span>  -<span class="number">1</span>  -<span class="number">3</span>] <span class="number">5</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span>       <span class="number">3</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">3</span> [-<span class="number">1</span>  -<span class="number">3</span>  <span class="number">5</span>] <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span>       <span class="number">5</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">3</span>  -<span class="number">1</span> [-<span class="number">3</span>  <span class="number">5</span>  <span class="number">3</span>] <span class="number">6</span>  <span class="number">7</span>       <span class="number">5</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">3</span>  -<span class="number">1</span>  -<span class="number">3</span> [<span class="number">5</span>  <span class="number">3</span>  <span class="number">6</span>] <span class="number">7</span>       <span class="number">6</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">3</span>  -<span class="number">1</span>  -<span class="number">3</span>  <span class="number">5</span> [<span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span>]      <span class="number">7</span></span><br></pre></td></tr></table></figure>

<ul>
<li>滑动窗口就相当于一个队列，因为每滑动一次，就相当于从队列头移出一个元素，从队列尾移入一个元素。</li>
<li>那么该问题就转换成了<strong>求队列中的最大值的问题</strong>。</li>
<li>如果每次滑动窗口，都遍历求窗口中的最大值，那么时间复杂度是 <code>O(nk)</code>， 比较耗时。</li>
<li>分析：因为是滑动窗口，所以相当于中间的部分不变，只有两端元素发生了变化。如果移出的不是当前最大值，移入的元素也不是比当前最大值更大的值，那么当前的最大值是没有变化的。但是如果当前最大值被移出了，那么怎么确定现在这个窗口里的最大值呢，不可能重新遍历一次。所以我们需要定义一个队列来维护当前队列中的最大值。</li>
<li>就像之前一个求栈中的最大值时，我们维护了一个栈，用来存储当前的最大值。</li>
<li>如上面的例子所示：<ol>
<li>建立一个队列</li>
<li>1：将1入队 <code>que = [1]</code></li>
<li>3：发现3&gt;1，也就是1不可能在接下来成为最大元素，那么我们将1出队，3入队。<code>que = [3]</code></li>
<li>-1：虽然-1&lt;3，但当3在滑动窗口中移出时，-1还是有可能成为最大元素的，所以-1入队。<code>que = [3, -1]</code></li>
<li>-3: 同上，-3入队。<code>que = [3, -1, -3]</code></li>
<li>5：5过来时，队列前面的元素都小于5，也就是遇到5之后，前面的小值都不可能再作为最大值，那么把前面的元素全部出队列，将5入队。<code>que = [5]</code></li>
<li>3: <code>que = [5, 3]</code></li>
<li>剩下的元素都同理。我们发现队头的元素一直都是滑动窗口的最大值。</li>
</ol>
</li>
<li>问题：如果 <code>1  3  [-1  -3  -2]  3  6  7</code>, 那么就相当于上面的第6步发生了变化。-2 过来时，我们需要把3移出队列。因为此时滑动窗口已经不包含3这个元素了。那么怎么知道滑动窗口是否包含一个元素？如果说被移出的元素和当前对头元素值相等，那么不一定，如果存在重复元素，这样是不是会出错？所以，我们可以让双端队列中存储元素的index，而不是值，这样如果当前被移出的元素的index和对头index相等，那么就需要移出当前对头元素。</li>
<li>同时，遇到-2，我们需要删除-3，因为-3不可能是滑动窗口的最大值了，但是-3是队尾元素，如何删除队尾元素，那么就要用到双端队列！</li>
<li>好复杂的一道题！！！！</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">  	<span class="keyword">if</span>(nums.length==<span class="number">0</span>)  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length-k+<span class="number">1</span>];</span><br><span class="line">    Deque&lt;Integer&gt; que = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> index=<span class="number">0</span>;index&lt;nums.length;index++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(que.size()==<span class="number">0</span>)</span><br><span class="line">        que.offerFirst(index);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(nums[index]&gt;nums[que.peekFirst()]) &#123;</span><br><span class="line">        que.clear();</span><br><span class="line">        que.offerFirst(index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(nums[index]&lt;nums[que.peekLast()])</span><br><span class="line">        que.offerLast(index);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (nums[que.peekLast()] &lt; nums[index])</span><br><span class="line">          que.pollLast();</span><br><span class="line">        que.offerLast(index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(index-k+<span class="number">1</span>&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        result[index-k+<span class="number">1</span>] = nums[que.peekFirst()];</span><br><span class="line">        <span class="comment">// 因为下一次移动的时候，对头元素就会被移出去，所以将其在对头删除</span></span><br><span class="line">        <span class="keyword">if</span>(index-k+<span class="number">1</span>==que.peekFirst()) que.pollFirst();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-3-最长无重复字符的子串"><a href="#leetcode-3-最长无重复字符的子串" class="headerlink" title="leetcode 3. 最长无重复字符的子串"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">leetcode 3. 最长无重复字符的子串</a></h3><ul>
<li><code>dp[i][j]</code> : i到j无重复字符，那么求的就是 <code>j-i</code> 的最大值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(s.isEmpty())</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">    dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.length();j++) &#123;</span><br><span class="line">      String tmp = s.substring(i, j);</span><br><span class="line">      dp[i][j] = !tmp.contains(s.charAt(j) + <span class="string">&quot;&quot;</span>) &amp;&amp; dp[i][j - <span class="number">1</span>];</span><br><span class="line">      index = j;</span><br><span class="line">      <span class="keyword">if</span>(!dp[i][j])  &#123;</span><br><span class="line">        index = j-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((index-i)&gt;=(end-begin)) &#123;</span><br><span class="line">      end = index;</span><br><span class="line">      begin = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> end-begin+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样写是对的，但是会超时。。。当字符串特别长的时候。</li>
<li>问题在于tmp.contains(), 这一步是一个o(n)的时间复杂度，每次都要查找，肯定很耗时。</li>
<li>那么我们可以把它放在一个set里面，如果插入当前元素前后，set的大小没变，那就说明重复了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">  Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;s.length();j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=j;i&lt;s.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> num = set.size();</span><br><span class="line">      set.add(s.charAt(i));</span><br><span class="line">      <span class="keyword">if</span>(set.size()==num)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result = set.size()&gt;result?set.size():result;</span><br><span class="line">    set.clear();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-264-查找第n个丑数-Ugly-Number-II"><a href="#leetcode-264-查找第n个丑数-Ugly-Number-II" class="headerlink" title="leetcode 264. 查找第n个丑数 Ugly Number II"></a><a href="https://leetcode.com/problems/ugly-number-ii/">leetcode 264. 查找第n个丑数 Ugly Number II</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Write a program to find the n-th ugly number.</span><br><span class="line">Ugly numbers are positive numbers whose prime factors only include <span class="number">2</span>, <span class="number">3</span>, <span class="number">5.</span> </span><br><span class="line">Example:</span><br><span class="line">trueInput: n = <span class="number">10</span></span><br><span class="line">trueOutput: <span class="number">12</span></span><br><span class="line">trueExplanation: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span> is the sequence of the first <span class="number">10</span> ugly numbers.</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dp[i]</code>: 第i个数字是不是丑数。</li>
<li><code>dp[i] = (i%2==0 &amp;&amp; dp[i%2])||(i%3==0 &amp;&amp; dp[i%3])||(i%3==0 &amp;&amp; dp[i%3])</code></li>
<li>还是会超时 。。。。。。。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;<span class="number">6</span>) <span class="keyword">return</span> n;</span><br><span class="line">  ArrayList&lt;Boolean&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  list.add(<span class="keyword">false</span>); <span class="comment">// 0 位置不用</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    list.add(<span class="keyword">true</span>);   <span class="comment">// 1到5都是丑数</span></span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">6</span>;</span><br><span class="line">  <span class="keyword">while</span>(num&lt;n) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = (i%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; list.get(i/<span class="number">2</span>))||(i%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; list.get(i/<span class="number">3</span>))||(i%<span class="number">5</span>==<span class="number">0</span> &amp;&amp; list.get(i/<span class="number">5</span>));</span><br><span class="line">    list.add(flag);</span><br><span class="line">    <span class="keyword">if</span>(flag) num += <span class="number">1</span>;</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We have an array <em>k</em> of first n ugly number. We only know, at the beginning, the first one, which is 1. Then</p>
<p>k[1] = min( k[0]x2, k[0]x3, k[0]x5). The answer is k[0]x2. So we move 2’s pointer to 1. Then we test:</p>
<p>k[2] = min( k[1]x2, k[0]x3, k[0]x5). And so on. Be careful about the cases such as 6, in which we need to forward both pointers of 2 and 3.</p>
<p>x here is multiplication.</p>
<ul>
<li>这种方法相当于直接去生成丑数，那么生成到n就行了</li>
<li>而不是逐个去判断是不是丑数，那样可能第1500个丑数，需要判断3000个数字。就会增加很多无用的判断，而且占用的空间也更多。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">  nums[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> i2 = <span class="number">0</span>, i3 = <span class="number">0</span>, i5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> u2 = nums[<span class="number">1</span>], u3 = nums[<span class="number">1</span>], u5 = nums[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    nums[i] = Math.min(u2, Math.min(u3, u5));</span><br><span class="line">    <span class="keyword">if</span> (nums[i] == u2) u2 = nums[++i2] * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] == u3) u3 = nums[++i3] * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] == u5) u5 = nums[++i5] * <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-387-First-Unique-Character-in-a-String"><a href="#leetcode-387-First-Unique-Character-in-a-String" class="headerlink" title="leetcode 387. First Unique Character in a String"></a><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">leetcode 387. First Unique Character in a String</a></h3>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>//posts/512/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title=" 常用命令 "></a><span> 常用命令 </span></h2><ul>
<li>增加对某个目录的权限: <code>sudo chown -R gesong /export/g06 </code></li>
<li>查看文件多少行: <code>wc -l file.txt  </code></li>
<li>将某个文件分成多份：<code>split -l 10000000 -d file.txt file_</code></li>
<li>将多个文件合为一个文件： <code>cat 1.tsv 2.tsv 3.tsv &gt; 123.tsv</code></li>
<li>查看正在执行 python 程序: <code>ps -ef | grep python</code><span id="more"></span></li>
<li>从我电脑往服务器拷东西：<code>scp file name@ip:/home/user/...</code></li>
<li>从服务器往容器拷东西：<code>sudo docker cp mini-id_map.json  330773d6b921:/notebooks/</code></li>
</ul>
<h2 id="有用的网站"><a href="#有用的网站" class="headerlink" title=" 有用的网站 "></a><span> 有用的网站 </span></h2><ul>
<li><p><a href="https://www.cnblogs.com/hankal/p/9815068.html">linux 网络文件下载</a></p>
</li>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">linux ssh-key 免密登陆</a></p>
</li>
<li><p><a href="https://cloud.tencent.com/developer/article/1341083">如何在Ubuntu 16.04上添加和删除用户</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Jacky_Dai/article/details/84885212">在linux 下怎么进入 /dev/sda1</a></p>
</li>
<li><p><a href="https://blog.csdn.net/h_8410435/article/details/86303995">Linux /dev/sda1磁盘满了，清理办法。</a></p>
</li>
<li><p><a href="https://blog.csdn.net/wl1780852311/article/details/104247348?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">Ubuntu 18.04下创建新用户/目录、修改用户权限及删除用户的方法</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/cunyusup/p/9813847.html">解决ubuntu登陆失败，”Failed to start session”的问题</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda 常用命令</title>
    <url>//posts/513/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title=" 常用命令 "></a><span> 常用命令 </span></h2><ul>
<li>创建虚拟环境：<code>conda create -n env_name python=2.7</code></li>
<li>创建虚拟环境，同时安装必要的包：<code>conda create -n env_name numpy matplotlib python=2.7</code></li>
<li>激活虚拟环境：<ul>
<li>Linux：<code>source activate your_env_name</code></li>
<li>Windows: <code>activate your_env_name</code></li>
</ul>
</li>
<li>检查当前 python 版本是否为想要的：<code>python --version</code></li>
<li>退出虚拟环境：<ul>
<li>Linux: <code>source deactivate your_env_name</code></li>
<li>Windows: <code>deactivate env_name</code>，也可以使用<code>activate root</code>切回root环境。</li>
</ul>
</li>
<li>删除虚拟环境：<ul>
<li>使用命令 <code>conda remove -n your_env_name --all</code>， 即可删除。</li>
<li>删除虚拟环境中的包：<code>conda remove --name $your_env_name $package_name</code></li>
</ul>
</li>
<li>查看安装了哪些包：<code>conda list</code></li>
<li>安装包：<code>conda install package_name</code></li>
<li>查看当前存在哪些虚拟环境：<code>conda env list</code> 或 <code>conda info -e</code></li>
<li>检查更新当前 conda：<code>conda update conda</code><span id="more"></span></li>
</ul>
<h2 id="有用的网站"><a href="#有用的网站" class="headerlink" title=" 有用的网站 "></a><span> 有用的网站 </span></h2><ul>
<li><a href="https://datumorphism.leima.is/til/programming/python/python-anaconda-install-requirements/">Installing requirements.txt in Conda Environments | Datumorphism | Lei Ma</a></li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>//posts/4/</url>
    <content><![CDATA[<h2 id="DP的特点"><a href="#DP的特点" class="headerlink" title="DP的特点"></a><span>DP的特点</span></h2><ol>
<li>无后效性：未来与过去无关。即：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前的各状态的影响。</li>
<li>最优子结构：大问题的<strong>最优解</strong>可以由小问题的<strong>最优解</strong>推出</li>
</ol>
<h2 id="DP的操作过程"><a href="#DP的操作过程" class="headerlink" title="DP的操作过程"></a><span>DP的操作过程</span></h2><p>将一个大问题转化为几个小问题，大事化小，小事化了：</p>
<ul>
<li>求解小问题</li>
<li>推出大问题的解</li>
</ul>
<span id="more"></span>

<h2 id="DP经典题型"><a href="#DP经典题型" class="headerlink" title="DP经典题型"></a><span>DP经典题型</span></h2><blockquote>
<p>但是感觉不管查什么资料都是这些，其实什么也解决不了，根据做题的经验，动态规划最难的地方，一是确定一道题能不能用动态规划解决，二就是怎么确定状态，就是f(n)怎么定义。</p>
<ul>
<li>线性表： length – length + 1</li>
<li>字符串（线性表）–&gt; 前缀 + 后缀 –&gt; 前缀 true &amp;&amp; 后缀 true –&gt; true</li>
</ul>
</blockquote>
<h3 id="leetcode-53-最大子段和"><a href="#leetcode-53-最大子段和" class="headerlink" title="leetcode 53. 最大子段和"></a><a href="https://leetcode.com/problems/maximum-subarray/submissions/">leetcode 53. 最大子段和</a></h3><p><code>dp[i]</code> 表示以 <code>i</code> 结尾的子段和的最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)</span><br><span class="line">    dp[i] = Math.max(nums[i], dp[i-<span class="number">1</span>]+nums[i]);</span><br><span class="line">    Arrays.sort(dp);</span><br><span class="line">    <span class="keyword">return</span> dp[dp.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-139-word-break"><a href="#leetcode-139-word-break" class="headerlink" title="leetcode 139. word break"></a><a href="https://leetcode.com/problems/word-break/">leetcode 139. word break</a></h3><ul>
<li>这道题就是字符串的问题，并且是前缀 + 后缀问题</li>
<li><code>dp[i]</code> : 字符串 <code>s[:i]</code> 能否能否由字典中的词拆分开。（以i结尾的字符串能否被字典拆分开）</li>
<li>求 <code>dp[i]</code> : 如果 <code>dp[j]=true</code>, 并且 <code>s[j:i]</code> 在字典中，那么 <code>dp[i]</code> 为 <code>true</code></li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="keyword">a</span> non-<span class="literal">empty</span> <span class="keyword">string</span> s <span class="keyword">and</span> <span class="keyword">a</span> dictionary wordDict containing <span class="keyword">a</span> list <span class="keyword">of</span> non-<span class="literal">empty</span> <span class="keyword">words</span>, determine <span class="keyword">if</span> s can be segmented <span class="keyword">into</span> <span class="keyword">a</span> <span class="literal">space</span>-separated sequence <span class="keyword">of</span> <span class="literal">one</span> <span class="keyword">or</span> more dictionary <span class="keyword">words</span>.</span><br><span class="line">Note:</span><br><span class="line"><span class="number">1.</span> The same <span class="built_in">word</span> <span class="keyword">in</span> <span class="keyword">the</span> dictionary may be reused multiple times <span class="keyword">in</span> <span class="keyword">the</span> segmentation.</span><br><span class="line"><span class="number">2.</span> You may assume <span class="keyword">the</span> dictionary does <span class="keyword">not</span> contain duplicate <span class="keyword">words</span>.</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.length();i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line">            String tmp = s.substring(j, i);</span><br><span class="line">            <span class="keyword">if</span>(dp[j]&amp;&amp;wordDict.contains(tmp)) &#123;</span><br><span class="line">                dp[i] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-300-最长上升子序列"><a href="#leetcode-300-最长上升子序列" class="headerlink" title="leetcode 300. 最长上升子序列"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/">leetcode 300. 最长上升子序列</a></h3><ul>
<li> 输入：[10, 9, 2, 5, 3, 7, 101, 18]，则输出为：4，因为最长的上升子序列是：[2, 3, 7, 101]</li>
<li>dp[i]: 以第i位为结尾的最长上升子序列的长度。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;nums[i])</span><br><span class="line">                dp[i] = Math.max(dp[j]+<span class="number">1</span>, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(dp);</span><br><span class="line">    <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-1143-最长公共子序列"><a href="#leetcode-1143-最长公共子序列" class="headerlink" title="leetcode 1143. 最长公共子序列"></a><a href="https://leetcode.com/problems/longest-common-subsequence/">leetcode 1143. 最长公共子序列</a></h3><ul>
<li>输入：text1= “abcde” ,  text2 = “ace”</li>
<li>输出：3</li>
<li>最长公共子序列不需要连续，只要是共同有的就行了。</li>
<li>最长公共子串是需要连续的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[text1.length()+<span class="number">1</span>][text2.length()+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=text1.length();i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=text2.length();j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(text1.charAt(i-<span class="number">1</span>)==text2.charAt(j-<span class="number">1</span>))</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[text1.length()][text2.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="leetcode-62-从左上到右下共有多少条路径"><a href="#leetcode-62-从左上到右下共有多少条路径" class="headerlink" title="leetcode 62. 从左上到右下共有多少条路径"></a><a href="https://leetcode.com/problems/unique-paths/">leetcode 62. 从左上到右下共有多少条路径</a></h3><ul>
<li><code>dp[m][n] </code> 表示走到 <code>m n</code> 位置时的走法数</li>
<li><code>dp[m][n] = dp[m-1][n] + dp[m][n-1]</code></li>
<li>相似题目：<a href="https://leetcode.com/problems/unique-paths-ii/">leetcode 63. 62题多了障碍</a>，就是递归的时候多了判断而已。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++) </span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-134-环形加油站"><a href="#leetcode-134-环形加油站" class="headerlink" title="leetcode 134. 环形加油站"></a><a href="https://leetcode.com/problems/gas-station/">leetcode 134. 环形加油站</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(gas[i]&lt;cost[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*gas.length];</span><br><span class="line">            dp[i] = gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i%gas.length+<span class="number">1</span>;j&lt;<span class="number">2</span>*gas.length;j++) &#123;</span><br><span class="line">                dp[j] = dp[j-<span class="number">1</span>]+gas[j%gas.length]-cost[j%gas.length];</span><br><span class="line">                <span class="keyword">if</span>(dp[j]&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                res_index = i;</span><br><span class="line">                <span class="keyword">return</span> res_index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-96-独一无二的二叉搜索树数目"><a href="#leetcode-96-独一无二的二叉搜索树数目" class="headerlink" title="leetcode 96. 独一无二的二叉搜索树数目"></a><a href="https://leetcode.com/problems/unique-binary-search-trees/">leetcode 96. 独一无二的二叉搜索树数目</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: <span class="number">3</span>    <span class="comment">//输入:1...n</span></span><br><span class="line">Output: <span class="number">5</span>   <span class="comment">//有多少独一无二的二叉搜索树</span></span><br><span class="line">Explanation:</span><br><span class="line">Given n = <span class="number">3</span>, there are a total of <span class="number">5</span> unique BST<span class="string">&#x27;s:</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">      1         3     3      2      1</span></span><br><span class="line"><span class="string">       \       /     /      / \      \</span></span><br><span class="line"><span class="string">        3     2     1      1   3      2</span></span><br><span class="line"><span class="string">       /     /       \                 \</span></span><br><span class="line"><span class="string">      2     1         2                 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>要分析有多少独一无二的二叉搜索树的个数。那么可以定义<strong>f(x):x为根节点时二叉搜索树的个数</strong></li>
<li>f(x)的定义很关键。。看到这个定义我就知道怎么做了。但是自己想的时候就想不到这一点。😭</li>
<li>当n为根节点时，那么其他1…n-1都在其左子树。那么f(n)=n-1个节点能够成的二叉搜索树的个数。</li>
<li>当n-1为根节点时，那么其他1…n-2都在其左子树，右子树只有n，那么f(n-1)=n-2个节点能够组成的二叉搜索树的个数*右子树只有一个节点能组成的二叉搜索树的个数。</li>
<li>所以可以定义<strong>G(x): 1…x能够组成的二叉搜索树的个数。</strong></li>
</ul>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span>(<span class="variable">n</span>)=<span class="title">G</span>(<span class="variable">n</span>-<span class="number">1</span>)*<span class="title">G</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="function"><span class="title">f</span>(<span class="variable">n</span>-<span class="number">1</span>) = <span class="title">G</span>(<span class="variable">n</span>-<span class="number">2</span>)*<span class="title">G</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="function"><span class="title">f</span>(<span class="variable">n</span>-<span class="number">2</span>) = <span class="title">G</span>(<span class="variable">n</span>-<span class="number">3</span>)*<span class="title">G</span>(<span class="number">2</span>)</span></span><br><span class="line">...</span><br><span class="line">f(<span class="number">1</span>) = <span class="function"><span class="title">G</span>(<span class="number">0</span>)*<span class="title">G</span>(<span class="variable">n</span>-<span class="number">1</span>)</span></span><br><span class="line">而 <span class="function"><span class="title">f</span>(<span class="number">1</span>)+<span class="title">f</span>(<span class="number">2</span>)+...+<span class="title">f</span>(<span class="variable">n</span>) = <span class="title">G</span>(<span class="variable">n</span>)</span></span><br><span class="line">所以：<span class="function"><span class="title">G</span>(<span class="variable">n</span>) = <span class="title">G</span>(<span class="variable">n</span>-<span class="number">1</span>)*<span class="title">G</span>(<span class="number">0</span>) + <span class="title">G</span>(<span class="variable">n</span>-<span class="number">2</span>)*<span class="title">G</span>(<span class="number">1</span>) + <span class="title">G</span>(<span class="variable">n</span>-<span class="number">3</span>)*<span class="title">G</span>(<span class="number">2</span>) + ... + <span class="title">G</span>(<span class="number">0</span>)*<span class="title">G</span>(<span class="variable">n</span>-<span class="number">1</span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从上面我们就能看出来，要想求G(n), 要先求出 G(0)…G(n-1)</li>
<li>G(0) = 1, G(1) = 1;</li>
<li>G(2) = G(1)*G(0) + G(0)*G(1) = 2</li>
<li>G(3) = G(2)*G(0) + G(1)*G(1) + G(0)*G(2)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// G(n) = G(n-1)*G(0) + G(n-2)*G(1) + G(n-3)*G(2) + ... + G(0)*G(n-1)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            dp[i] += dp[j]*dp[i-j-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-95-把96题所有的二叉搜索树都写出来"><a href="#leetcode-95-把96题所有的二叉搜索树都写出来" class="headerlink" title="leetcode 95. 把96题所有的二叉搜索树都写出来"></a><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/">leetcode 95. 把96题所有的二叉搜索树都写出来</a></h3><ul>
<li>虽然感觉是在96的基础上做了变形，但是完全不一样啊！！</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;TreeNode&gt; list = greateSubTree(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">greateSubTree</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(end &lt; start) &#123;</span><br><span class="line">        res.add(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(TreeNode l : greateSubTree(start, i-<span class="number">1</span>)) &#123;  </span><br><span class="line">            <span class="keyword">for</span>(TreeNode r : greateSubTree(i+<span class="number">1</span>, end)) &#123;</span><br><span class="line">                TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                root.left = l;</span><br><span class="line">                root.right = r;</span><br><span class="line">                res.add(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-120-三角形矩阵从上到小的最小和路径"><a href="#leetcode-120-三角形矩阵从上到小的最小和路径" class="headerlink" title="leetcode 120. 三角形矩阵从上到小的最小和路径"></a><a href="https://leetcode.com/problems/triangle/">leetcode 120. 三角形矩阵从上到小的最小和路径</a></h3><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">[                        | index:</span><br><span class="line">     [2],                |           0</span><br><span class="line">    [3,4],               |        <span class="number"> 0 </span>  1</span><br><span class="line">   [6,5,7],              |      <span class="number"> 0 </span> <span class="number"> 1 </span>  2</span><br><span class="line">  [4,1,8,3]              |    <span class="number"> 0 </span> <span class="number"> 1 </span> <span class="number"> 2 </span>  3</span><br><span class="line">]                        |  <span class="number"> 0 </span> <span class="number"> 1 </span> <span class="number"> 2 </span> <span class="number"> 3 </span>  4</span><br></pre></td></tr></table></figure>

<ul>
<li>从下到上，第 <code>n</code> 行第 <code>i</code> 个位置 由第 <code>n-1</code> 行的第 <code>i-1</code>个和第 <code>i</code> 个走到，取两个路径和中小的那个。</li>
<li><code>dp[n][i] = nums[n][i] + min(dp[n-1][i-1], dp[n-1][i])</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> m = triangle.size();</span><br><span class="line">    <span class="keyword">int</span> n = triangle.get(m-<span class="number">1</span>).size();  <span class="comment">// 最后一行的长度</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = triangle.get(i).size();</span><br><span class="line">        <span class="comment">//三角形最边上的两个值只有一种情况</span></span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + triangle.get(i).get(<span class="number">0</span>);</span><br><span class="line">        dp[i][size-<span class="number">1</span>] = dp[i-<span class="number">1</span>][size-<span class="number">2</span>] + triangle.get(i).get(size-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;triangle.get(i).size()-<span class="number">1</span>;j++) </span><br><span class="line">            dp[i][j] = triangle.get(i).get(j) + Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        result = dp[m-<span class="number">1</span>][i] &lt; result ? dp[m-<span class="number">1</span>][i] : result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-392-判断s是不是t的子序列"><a href="#leetcode-392-判断s是不是t的子序列" class="headerlink" title="leetcode 392. 判断s是不是t的子序列"></a><a href="https://leetcode.com/problems/is-subsequence/">leetcode 392. 判断s是不是t的子序列</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断s是不是t的子序列</span></span><br><span class="line">    <span class="comment">//dp[i][j] s的第i位到t的第j位是否是子序列</span></span><br><span class="line">    <span class="keyword">if</span>(s.length()==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s.length()&gt;t.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][t.length()];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = (s.charAt(<span class="number">0</span>)==t.charAt(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;t.length();i++) </span><br><span class="line">        dp[<span class="number">0</span>][i] = (s.charAt(<span class="number">0</span>)==t.charAt(i) || dp[<span class="number">0</span>][i-<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;t.length();j++) &#123;</span><br><span class="line">            dp[i][j] = (s.charAt(i)==t.charAt(j)&amp;&amp;dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) || dp[i][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.length()-<span class="number">1</span>][t.length()-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-338-计算二进制中1的个数"><a href="#leetcode-338-计算二进制中1的个数" class="headerlink" title="leetcode 338. 计算二进制中1的个数"></a><a href="https://leetcode.com/problems/counting-bits/">leetcode 338. 计算二进制中1的个数</a></h3><ul>
<li>每2的幂开始，就是前面全部的位置+1</li>
<li>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  …….</li>
<li>0 1 1 2 1 2 2 3 1 2  2   3   2    3   3   4   1    2   2    3   2   …….</li>
<li>4的位置，8的位置，16的位置开始，都是从头部遍历，然后+1即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=<span class="number">0</span>) dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=<span class="number">1</span>) dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=<span class="number">2</span>) dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=<span class="number">3</span>) dp[<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">3</span>) <span class="keyword">return</span> dp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=num) &#123;</span><br><span class="line">        <span class="keyword">int</span> cou = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, tmp);</span><br><span class="line">        <span class="keyword">int</span> end = (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, tmp+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> j = start;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;end &amp;&amp; j&lt;=num) &#123;</span><br><span class="line">            dp[j] = dp[cou] + <span class="number">1</span>;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">            cou += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i = j;</span><br><span class="line">        tmp += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="leetcode-714-带有转移费用的股票最佳买卖时间"><a href="#leetcode-714-带有转移费用的股票最佳买卖时间" class="headerlink" title="leetcode 714. 带有转移费用的股票最佳买卖时间"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">leetcode 714. 带有转移费用的股票最佳买卖时间</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: prices = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>], fee = <span class="number">2</span></span><br><span class="line">Output: <span class="number">8</span></span><br><span class="line">Explanation: The maximum profit can be achieved by:</span><br><span class="line">Buying at prices[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">Selling at prices[<span class="number">3</span>] = <span class="number">8</span></span><br><span class="line">Buying at prices[<span class="number">4</span>] = <span class="number">4</span></span><br><span class="line">Selling at prices[<span class="number">5</span>] = <span class="number">9</span></span><br><span class="line"><span class="function">The total profit <span class="title">is</span> <span class="params">((<span class="number">8</span> - <span class="number">1</span>)</span> - 2) + <span class="params">((<span class="number">9</span> - <span class="number">4</span>)</span> - 2) </span>= <span class="number">8.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>股票必须先卖出然后才能再买入。</li>
<li><code>hold[i]</code>：表示第 <code>i</code> 时刻手里有股票的最大收益。那么该状态可由两种情况得到。一种是之前没有股票，在该时刻买入。一种是之前就有股票：<code>hold[i] = max(hold[i-1], unhold[i-1]-prices[i])</code></li>
<li><code>unhold[i]</code>：表示第 <code>i</code> 时刻手里没有股票最大收益。一种是之前有股票，在该时刻卖出。一种是之前就没有股票： <code>unhold[i] = max(unhold[i-1], hold[i-1]+prices[i]-fee)</code></li>
<li>最终返回 <code>unhold[len-1]</code>。即最后时刻手里没有股票。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] hold = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">    <span class="keyword">int</span>[] unhold = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">    hold[<span class="number">0</span>] = <span class="number">0</span>-prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++) &#123;</span><br><span class="line">        unhold[i] = Math.max(unhold[i-<span class="number">1</span>], hold[i-<span class="number">1</span>]+prices[i]-fee);</span><br><span class="line">        hold[i] = Math.max(hold[i-<span class="number">1</span>], unhold[i-<span class="number">1</span>]-prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unhold[prices.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间-DP"><a href="#区间-DP" class="headerlink" title="区间 DP"></a><span>区间 DP</span></h2><blockquote>
<p>思想：先在小区间进行DP得到最优解，然后再利用小区间的最优解合并求大区间的最优解。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++) &#123;</span><br><span class="line">        dp[i][j] = Integer.MIN_VALUE; <span class="comment">// 初始值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++) &#123;</span><br><span class="line">            <span class="comment">// max 还是 min 根据题目不同要求判断。</span></span><br><span class="line">            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+<span class="number">1</span>][j] + w[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-5-最长回文子串"><a href="#leetcode-5-最长回文子串" class="headerlink" title="leetcode 5. 最长回文子串"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/">leetcode 5. 最长回文子串</a></h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Input</span>: &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Note: &quot;aba&quot; <span class="keyword">is</span> <span class="keyword">also</span> a <span class="keyword">valid</span> answer.</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：中心扩展法，遍历到数组的某一个元素时，以这个元素为中心，向两边进行扩展，如果两边的元素相同则继续扩展，否则停止扩展。<strong>时间复杂度O(n^2),空间复杂度为O(1)</strong></li>
<li>存在问题：但这种方法存在一个问题，当长度为偶数时，例如<code>1221</code>，这是一个回文串，但是并没有中心元素，如果直接用方法1，就会判断其不为回文串。</li>
<li>解决办法：在字符串的中间插入分隔符<code>#</code>，那么<code>1221</code>就会变成<code>1#2#2#1</code>，长度为奇数。而本身长度为奇数的<code>12321</code>，插入分隔符变为<code>1#2#3#2#1</code>，仍然为奇数。那么就可以采用1的方法进行统一判断。插入分隔符后长度为<code>2*n-1</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length()&lt;<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    String res = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String new_s = s.charAt(<span class="number">0</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">        new_s += <span class="string">&quot;#&quot;</span> + s.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;new_s.length();i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp_begin = i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp_end = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp_begin&gt;=<span class="number">0</span> &amp;&amp; tmp_end&lt;new_s.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(new_s.charAt(tmp_begin)!=new_s.charAt(tmp_end))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            tmp_begin -= <span class="number">1</span>;</span><br><span class="line">            tmp_end += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp_begin += <span class="number">1</span>;</span><br><span class="line">        tmp_end -= <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//不加下面这个if会出现#c#和bab，这种长度是一样的，但是最终结果的长度就不一样了。</span></span><br><span class="line">        <span class="keyword">if</span>(new_s.charAt(tmp_begin)==<span class="string">&#x27;#&#x27;</span>) &#123;  </span><br><span class="line">            tmp_begin += <span class="number">1</span>;</span><br><span class="line">            tmp_end -=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((tmp_end-tmp_begin)&gt;=(end-begin)) &#123;</span><br><span class="line">            begin = tmp_begin;</span><br><span class="line">            end = tmp_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = new_s.substring(begin, end+<span class="number">1</span>);</span><br><span class="line">    res = res.replace(<span class="string">&quot;#&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：动态规划：如果用<code>dp[i][j]</code>保存子串从<code>i</code> 到<code>j</code>是否是回文子串， 如果<code>dp[i][j]</code>为回文，那么<code>dp[i+1][j-1]</code>,也一定为回文。</li>
<li><code>dp[i][j]= s[i]==s[j] &amp;&amp; dp[i+1][j-1]</code>, 要想求<code>dp[i][j]</code>，要先求出<code>dp[i+1][j-1]</code></li>
<li><strong>求 <code>i</code> 要先求 <code>i+1</code>， 说明 <code>i</code> 要从大到小遍历；</strong></li>
<li><strong>求 <code>j</code> 要先求 <code>j-1</code>， 说明 <code>j</code> 要从小到大遍历；</strong></li>
<li><strong>用<code>dp[i][j]</code>保存子串从<code>i</code> 到<code>j</code>是否是回文子串， 那么 <code>j&gt;=i</code></strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">//小于2是因为abbc, 两个元素相邻</span></span><br><span class="line">            <span class="comment">//dp[1][2] 要判断 dp[2][1]，但是这样的dp是没有的，或者说初始化的时候恒为false</span></span><br><span class="line">            dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp;( j-i&lt;<span class="number">2</span>||dp[i+<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]&amp;&amp;right-left&lt;j-i)&#123;</span><br><span class="line">                left=i;</span><br><span class="line">                right=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(left,right+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-1130-Minimum-Cost-Tree-From-Leaf-Values"><a href="#leetcode-1130-Minimum-Cost-Tree-From-Leaf-Values" class="headerlink" title="leetcode 1130. Minimum Cost Tree From Leaf Values"></a><a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">leetcode 1130. Minimum Cost Tree From Leaf Values</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给你一个正整数数组 arr，考虑所有满足以下条件的二叉树：</span><br><span class="line"><span class="number">1.</span> 每个节点都有 <span class="number">0</span> 个或是 <span class="number">2</span> 个子节点。</span><br><span class="line"><span class="number">2.</span> 数组 arr 中的值与树的中序遍历中每个叶节点的值一一对应。</span><br><span class="line"><span class="number">3.</span> 每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。</span><br><span class="line">在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。这个和的值是一个 <span class="number">32</span> 位整数。</span><br><span class="line"></span><br><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">32</span></span><br><span class="line">解释：有两种可能的树，第一种的非叶节点的总和为 <span class="number">36</span>，第二种非叶节点的总和为 <span class="number">32</span>。</span><br><span class="line"></span><br><span class="line">    <span class="number">24</span>            <span class="number">24</span></span><br><span class="line">   /  \          /  \</span><br><span class="line">  <span class="number">12</span>   <span class="number">4</span>        <span class="number">6</span>    <span class="number">8</span></span><br><span class="line"> /  \               / \</span><br><span class="line"><span class="number">6</span>    <span class="number">2</span>             <span class="number">2</span>   <span class="number">4</span> </span><br></pre></td></tr></table></figure>

<ul>
<li><code>dp[i][j] </code>：从 <code>i</code> 到 <code>j</code> 的非叶子节点的最小和。</li>
<li><code>dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + max(A[i..k])*max(A[k+1..j]))</code></li>
<li>想求 <code>dp[i][j]</code>， 要先知道 <code>dp[i][k]</code> 和 <code>dp[k+1][j]</code>，<code>k</code> 是从 <code>i</code> 到 <code>j</code> 的一个值。</li>
<li>要求 <code>dp[1][4]</code> ，要先求 <code>dp[1][2] dp[3][4]</code> ， 所以 <code>i</code> 要从大到小遍历，<code>j</code> 从小到大遍历。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mctFromLeafValues</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// max数组是先把arr中区间i到j的最大值保存下来，后面max[i][k]*max[k+1][j]要用。</span></span><br><span class="line">    <span class="comment">// 不保存，直接调用函数查找最大值也行，但是比较耗时。</span></span><br><span class="line">    <span class="keyword">int</span>[][] max = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][arr.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">        max[i][i] = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">            max[i][j] = Math.max(arr[j], max[i][j-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][arr.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">            dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = dp[i][k] + dp[k+<span class="number">1</span>][j] + max[i][k]*max[k+<span class="number">1</span>][j];</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其实根据返回值也能确定i是从大到小，j是从小到大，因为返回的位置一定是最后一个得到结果的值。</span></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][arr.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="poj-1738-石子合并-（直线型）"><a href="#poj-1738-石子合并-（直线型）" class="headerlink" title="poj 1738. 石子合并 （直线型）"></a><a href="http://poj.org/problem?id=1738">poj 1738. 石子合并 （直线型）</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">有N堆石子排成一排，每堆石子有一定的数量。现要将N堆石子并成为一堆。合并的过程只能每次将相邻的两堆石子堆成一堆，每次合并花费的代价为这两堆石子的和，经过N-<span class="number">1</span>次合并后成为一堆。求出总的代价最小值。</span><br><span class="line"></span><br><span class="line">输入：<span class="number">13</span> <span class="number">7</span> <span class="number">8</span> <span class="number">16</span> <span class="number">21</span> <span class="number">4</span> <span class="number">18</span></span><br><span class="line">输出：<span class="number">239</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>dp[i][j]</code>：从 <code>i</code> 堆石子到 <code>j</code> 堆石子进行合并最小代价。</li>
<li><code>dp[i][j] = dp[i][k] + dp[k+1][j] + w[i][j]</code>, 其中<code>w[i][j]</code>表示 <code>i</code> 到 <code>j</code> 的石子的和。 </li>
<li>为了方便我们定义 <code>sum[i]</code> 为从第 <code>0</code> 堆石子到第 <code>i</code> 堆石子的和。那么 <code>w[i][j]=sum[j]-sum[i-1]</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">stoneSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// sum[1] 表示第0堆石子。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++)</span><br><span class="line">        sum[i] = sum[i-<span class="number">1</span>] + arr[i-<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][arr.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">            dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = dp[i][k] + dp[k+<span class="number">1</span>][j] + sum[j+<span class="number">1</span>]-sum[i];</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][arr.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="石子合并（环形）"><a href="#石子合并（环形）" class="headerlink" title="石子合并（环形）"></a>石子合并（环形）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">有n堆石子排成一圈，每次选择相邻的两堆石子，将其合并为一堆，记录该次合并的得分为两堆石子个数之和。已知每堆石子的石子个数，求当所有石子合并为一堆时，最小的总得分。</span><br></pre></td></tr></table></figure>

<ul>
<li>注：3题是排成一列，该题是排成一圈。</li>
<li>方法一：将石子复制一遍，由n个堆的环形变成2n个堆的直线形。最终不再是求 <code>dp[0][n-1]</code>, 而是在 <code>dp[0][n-1], dp[1][n], dp[2][n+1]...dp[n][2n-1]</code>中取最小值。</li>
<li>相当于我起始位置不一定从 <code>0</code> 开始，可以从任意位置开始，到长度为 <code>n</code> 的地方结束。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stoneSum</span><span class="params">(<span class="keyword">int</span>[] stone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[stone.length*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stone.length;i++) &#123;</span><br><span class="line">        arr[i] = stone[i];</span><br><span class="line">        arr[i+stone.length] = stone[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// sum[1] 表示第0堆石子。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++)</span><br><span class="line">        sum[i] = sum[i-<span class="number">1</span>] + arr[i-<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][arr.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">            dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = dp[i][k] + dp[k+<span class="number">1</span>][j] + sum[j+<span class="number">1</span>]-sum[i];</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> min_val = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> n = stone.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        min_val = dp[i][n-<span class="number">1</span>+i]&lt;min_val?dp[i][n-<span class="number">1</span>+i]:min_val;</span><br><span class="line">    <span class="keyword">return</span> min_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二： 直接利用环形的动态规划，取余即可。这个暂时不太懂怎么来的。</li>
<li><code>dp[i][j] = dp[i][k] + dp[(i+k−1)%n+1][j−k] + w[i][j]</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">不太懂原理。。</span><br></pre></td></tr></table></figure>

<h3 id="poj-2955-括号匹配问题：最长匹配子序列的长度"><a href="#poj-2955-括号匹配问题：最长匹配子序列的长度" class="headerlink" title="poj 2955. 括号匹配问题：最长匹配子序列的长度"></a><a href="http://poj.org/problem?id=2955">poj 2955. 括号匹配问题：最长匹配子序列的长度</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Given the initial <span class="title">sequence</span> <span class="params">([([]])</span>], the longest regularbrackets subsequence is[<span class="params">([])</span>].</span></span><br><span class="line"><span class="function">找到符合括号匹配的最长子序列的长度。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这道题和回文串的动规方法很像，如果 <code>s[i]==s[j]</code>，那么 <code>dp[i][j] = 2 + dp[i+1][j-1]</code></li>
<li>但仅仅做上面一个判断是不够的。</li>
<li>比如 <code>s=&quot;()()&quot;</code>，<code>dp[0][3] = 2 + dp[1][2] = 2</code>； 显然是不对的。</li>
<li> <code>dp[0][3] = max(dp[0][3], dp[0][0]+dp[1][3], dp[0][1]+dp[2][3], dp[0][2]+dp[3][3])</code></li>
<li>也就是，我到底是把最外面两个括号当作一个匹配，然后加上里面。还是把最左括号和左面一部分匹配+最右括号和右面一部分匹配。然后看哪种得到的结果最大就是哪种情况。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length()==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()][s.length()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.length();j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((s.charAt(i)==<span class="string">&#x27;(&#x27;</span> &amp;&amp; s.charAt(j)==<span class="string">&#x27;)&#x27;</span>)||(s.charAt(i)==<span class="string">&#x27;[&#x27;</span> &amp;&amp; s.charAt(j)==<span class="string">&#x27;]&#x27;</span>))</span><br><span class="line">                dp[i][j] = Math.max(dp[i][j], <span class="number">2</span> + dp[i+<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++)</span><br><span class="line">                dp[i][j] = Math.max(dp[i][j], dp[i][k]+dp[k+<span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][s.length()-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⭐-整数划分使乘积最大"><a href="#⭐-整数划分使乘积最大" class="headerlink" title="⭐ 整数划分使乘积最大"></a>⭐ 整数划分使乘积最大</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给出两个整数 n, m, 要求在 n 中加入 m - <span class="number">1</span> 个乘号，将 n 分成 m 段，求出这 m 段的最大乘积。</span><br><span class="line">输入：<span class="number">111</span>，<span class="number">2</span>       输出：<span class="number">11</span></span><br><span class="line">输入：<span class="number">1111</span>，<span class="number">2</span>      输出：<span class="number">121</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">我的思考过程：</span><br><span class="line"><span class="number">1.</span> dp[i][j][m]: 从位置i到位置j,分成m段的乘积最大值。</span><br><span class="line"><span class="number">2.</span> 那么dp[i][j][m] = dp[i][k][p]*dp[k+<span class="number">1</span>][j][m-p-<span class="number">1</span>]，但是这样参数太多。</span><br><span class="line"><span class="number">3.</span> 我们最终求dp[<span class="number">0</span>][len][m] = dp[<span class="number">0</span>][k][p]*dp[k+<span class="number">1</span>][len][m-p-<span class="number">1</span>]</span><br><span class="line"><span class="number">4.</span> 可以定义：dp[i][j]:从<span class="number">0</span>位置到i位置插入了j个乘号得到的最大值。那么原dp[<span class="number">0</span>][k][p]可表示为dp[k][p]</span><br><span class="line"><span class="number">5.</span> 那么dp[k+<span class="number">1</span>][len][m-p-<span class="number">1</span>]又没办法表示了。那么我们只能让后一段只有一个数，没有乘号，那么后一段就不需要这么复杂，直接num[k+<span class="number">1.</span>..len]就行了。</span><br><span class="line"><span class="number">6.</span> dp[i][j] = max(dp[i][j], dp[k][j-<span class="number">1</span>]*num[k+<span class="number">1.</span>..len])</span><br><span class="line"><span class="number">7.</span> 最终求：dp[len][m-<span class="number">1</span>], 所以i和i都要从小到大遍历。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxResult</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    String s = n + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()][m];</span><br><span class="line">    <span class="comment">// 如果不分割，那么0到i子串的值为多少。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        dp[i][<span class="number">0</span>] = Integer.parseInt(s.substring(<span class="number">0</span>, i+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环的顺序也很重要，把j写在最外层训练位置，因为j的值会决定i的起始位置。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=j;i&lt;s.length();i++) &#123;  <span class="comment">// 前2个位置分割3次是不可能的，所以i从j开始取即可。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j-<span class="number">1</span>;k&lt;i;k++) &#123;     <span class="comment">// 同理，前k个位置分割j-1次，所以k从j-1开始取即可。</span></span><br><span class="line">                <span class="keyword">int</span> tmp = dp[k][j-<span class="number">1</span>]*Integer.parseInt(s.substring(k+<span class="number">1</span>, i+<span class="number">1</span>));</span><br><span class="line">                dp[i][j] = Math.max(dp[i][j], tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.length()-<span class="number">1</span>][m-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="凸多边形三角划分问题"><a href="#凸多边形三角划分问题" class="headerlink" title="凸多边形三角划分问题"></a>凸多边形三角划分问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给定一个具有N(N&lt;=<span class="number">50</span>)个顶点(从<span class="number">1</span>到N编号)的凸多边形，每个顶点的权值已知。问如何把这个凸多边形划分成N-<span class="number">2</span>个互不相交的三角形，使得这些三角形顶点的权值的乘积之和最小。</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dp[i][j]</code>：表示从顶点 <code>i</code> 到顶点 <code>j</code> 组成的凸多边形划分之后乘积之和的最小值。</li>
<li><code>dp[i][j] = dp[i][k] + dp[k][j] + arr[i]*arr[j]*arr[k]</code></li>
<li>哎😔，，边界太难控制了。。</li>
</ul>
<p><img data-src="/images/others/donggui1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">triangleMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][arr.length];</span><br><span class="line">    <span class="comment">// 至少得有三条边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">2</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">            dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;j;k++)</span><br><span class="line">            	dp[i][j] = Math.min(dp[i][j], dp[i][k]+dp[k][j] + arr[i]*arr[k]*arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][arr.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode-375-猜数字，使花费最小"><a href="#leetcode-375-猜数字，使花费最小" class="headerlink" title="leetcode 375. 猜数字，使花费最小"></a><a href="https://leetcode.com/problems/guess-number-higher-or-lower-ii/">leetcode 375. 猜数字，使花费最小</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">我从 <span class="number">1</span> 到 n 之间选择一个数字，你来猜我选了哪个数字。每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。</span><br><span class="line"></span><br><span class="line">示例: n = <span class="number">10</span>, 我选择了<span class="number">8.</span></span><br><span class="line">     第一轮: 你猜我选择的数字是<span class="number">5</span>，我会告诉你，我的数字更大一些，然后你需要支付<span class="number">5</span>块。</span><br><span class="line">     第二轮: 你猜是<span class="number">7</span>，我告诉你，我的数字更大一些，你支付<span class="number">7</span>块。</span><br><span class="line">     第三轮: 你猜是<span class="number">9</span>，我告诉你，我的数字更小一些，你支付<span class="number">9</span>块。</span><br><span class="line">     游戏结束。<span class="number">8</span> 就是我选的数字。</span><br><span class="line">你最终要支付 <span class="number">5</span> + <span class="number">7</span> + <span class="number">9</span> = <span class="number">21</span> 块钱。</span><br><span class="line"></span><br><span class="line">给定 n ≥ <span class="number">1</span>，计算你至少需要拥有多少现金才能确保你能赢得这个游戏。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>就是要怎样进行猜数字，才能让自己花费的钱最少。比如n=10，那么一开始猜7，如果大了就猜9，那么需要花费7+9=16块钱赢得游戏。如果一开始猜5，那么大了还要猜7和9，那么就要花费5+7+9=21。所以我们要求最少花费多少钱赢得游戏。</p>
</li>
<li><p>通过上面的解释可以看出这不是二分查找的题，二分查找虽然能保证一定找到你想要的数字，但却不是花费最少的方法。所以是一道动态规划的题。</p>
</li>
<li><p>分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在<span class="number">1</span>到n里面，随便猜一个数i，那么此时赢得游戏的最少花费为: </span><br><span class="line">truetruetruedp[<span class="number">1.</span>.n] = arr[i] + max(dp[<span class="number">1.</span>.i-<span class="number">1</span>], dp[i+<span class="number">1.</span>.n])，</span><br><span class="line">而 dp[<span class="number">1.</span>.i+<span class="number">1</span>] 又可以继续分割，随机猜一个数字k, 那么</span><br><span class="line">truetruetruedp[<span class="number">1.</span>.i+<span class="number">1</span>] = arr[k] + max(dp[<span class="number">1.</span>.k], dp[k..i+<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>麻卖批。。分析到这明显是区间dp啊！！！为什么自己就不能从这么简单的地方开始分析呢。。</p>
</li>
<li><p>定义 <code>dp[i][j]</code>：从位置 <code>i</code> 到位置 <code>j</code> 猜出数字的最小花费。那么我们最终要求的为 <code>dp[1][n]</code> 。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoneyAmount</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义长度为 n+1, 0位置不使用，为了让index和值对应，要不然还要减一，不方便看。</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">        dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(j==i+<span class="number">1</span>) dp[i][j] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;j;k++)</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], k + Math.max(dp[i][k-<span class="number">1</span>], dp[k+<span class="number">1</span>][j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 继承</title>
    <url>//posts/403/</url>
    <content><![CDATA[<p>继承是 java 面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p>
<p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p>
<span id="more"></span>

<h2 id="生活中的继承"><a href="#生活中的继承" class="headerlink" title="生活中的继承"></a><span>生活中的继承</span></h2><p><img data-src="/images/java/14B0951E-FC75-47A3-B611-4E1883887339.jpg"></p>
<p>兔子和羊属于食草动物类，狮子和豹属于食肉动物类。</p>
<p>食草动物和食肉动物又是属于动物类。</p>
<p>所以继承需要符合的关系是：is-a，父类更通用，子类更具体。</p>
<p>虽然食草动物和食肉动物都是属于动物，但是两者的属性和行为上有差别，所以子类会具有父类的一般特性也会具有自身的特性。</p>
<h2 id="类的继承格式"><a href="#类的继承格式" class="headerlink" title="类的继承格式"></a><span>类的继承格式</span></h2><p>如果类 B 从类 A 派生，或者说类 B 扩展自类 A，或者说类 B 继承类 A，则称类 A 为”父类”，也称为超类、基类；称类 B 为”子类”，也称为次类、扩展类、派生类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a><span>为什么需要继承</span></h2><p>接下来我们通过实例来说明这个需求。</p>
<p>开发动物类，其中动物分别为企鹅以及老鼠，要求如下：</p>
<ul>
<li>企鹅：属性（姓名，id），方法（吃，睡，自我介绍）</li>
<li>老鼠：属性（姓名，id），方法（吃，睡，自我介绍）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Penguin</span><span class="params">(String myName, <span class="keyword">int</span>  myid)</span> </span>&#123; </span><br><span class="line">        name = myName; </span><br><span class="line">        id = myid; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String myName, <span class="keyword">int</span>  myid)</span> </span>&#123; </span><br><span class="line">        name = myName; </span><br><span class="line">        id = myid; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这两段代码可以看出来，代码存在重复了，导致后果就是代码量大且臃肿，而且维护性不高(维护性主要是后期需要修改的时候，就需要修改很多的代码，容易出错)，所以要从根本上解决这两段代码的问题，就需要继承，将两段代码中相同的部分提取出来组成 一个父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        name = myName; </span><br><span class="line">        id = myid;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个Animal类就可以作为一个父类，然后企鹅类和老鼠类继承这个类之后，就具有父类当中的属性和方法，子类就不会存在重复的代码，维护性也提高，代码也更加简洁，提高代码的复用性（复用性主要是可以多次使用，不用再多次写同样的代码） 继承之后的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Penguin</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(myName, myid); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(myName, myid); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a><span>继承类型</span></h2><blockquote>
<p>需要注意的是 Java 不支持多继承，但支持多重继承。</p>
</blockquote>
<p><img data-src="/images/java/types_of_inheritance-1.png"></p>
<h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a><span>继承的特性</span></h2><ul>
<li>子类拥有父类非 private 的属性、方法。</li>
<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。</li>
<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>
<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>
</ul>
<h2 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a><span>继承关键字</span></h2><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong> 祖先类。</p>
<h3 id="extends-关键字"><a href="#extends-关键字" class="headerlink" title="extends 关键字"></a>extends 关键字</h3><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, String myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>  <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="implements-关键字"><a href="#implements-关键字" class="headerlink" title="implements 关键字"></a>implements 关键字</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super-与-this-关键字"><a href="#super-与-this-关键字" class="headerlink" title="super 与 this 关键字"></a>super 与 this 关键字</h3><blockquote>
<p>super 关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>
<p>this 关键字：指向自己的引用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;animal : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;dog : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="keyword">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    a.eat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// animal : eat</span></span><br><span class="line"><span class="comment">// dog : eat</span></span><br><span class="line"><span class="comment">// animal : eat</span></span><br></pre></td></tr></table></figure>

<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><blockquote>
<p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明类：</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">    <span class="comment">//类体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明方法：</span></span><br><span class="line">修饰符(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123; </span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final。</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a><span>构造器</span></h2><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p>
<p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass(int n)&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass2 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass2()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class="line">    SubClass sc1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">100</span>); </span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class="line">    SubClass2 sc3 = <span class="keyword">new</span> SubClass2();</span><br><span class="line">    SubClass2 sc4 = <span class="keyword">new</span> SubClass2(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其输出结果为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">------SubClass 类继承------</span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">()</span></span></span><br><span class="line">SubClass</span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">(int n)</span></span></span><br><span class="line"><span class="function"><span class="title">SubClass</span><span class="params">(int n)</span></span>:<span class="number">100</span></span><br><span class="line">------SubClass2 类继承------</span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">(int n)</span></span></span><br><span class="line">SubClass2</span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">SubClass2</span><span class="params">(int n)</span></span>:<span class="number">200</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 类</title>
    <url>//posts/402/</url>
    <content><![CDATA[<h2 id="类声明和成员函数定义的分离"><a href="#类声明和成员函数定义的分离" class="headerlink" title="类声明和成员函数定义的分离"></a><span>类声明和成员函数定义的分离</span></h2><p>如果一个类只被一个程序使用，那么类的声明和成员函数的定义可以直接写在程序的开头，但如果一个类被多个程序使用，这样做的重复工作量就很大了，效率就太低了。在面向对象的程序开发中，一般做法是<strong>将类的声明（其中包含成员函数的声明）放在指定的头文件中，</strong>用户如果想用该类，只要把有关的头文件包含进来即可，不必再程序中重复书写类的声明，以减少工作量，节省篇幅，提高编程效率。</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// student.h  这是头文件，在此文件中进行类的声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:   <span class="comment">// 公用成员函数声明</span></span><br><span class="line">        <span class="built_in">Student</span>();</span><br><span class="line">        <span class="built_in">Student</span>(<span class="keyword">int</span> num, string name, <span class="keyword">char</span> sex);</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Student</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        string name;</span><br><span class="line">        <span class="keyword">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// student.cpp  在此文件中进行函数的定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Student.h&quot;</span>   <span class="comment">// 不要漏写此行，否则编译不通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>() &#123;</span><br><span class="line">    num = <span class="number">-1</span>;</span><br><span class="line">    name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    sex = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="keyword">int</span> num, string name, <span class="keyword">char</span> sex)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;num = num;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::~<span class="built_in">Student</span>()&#123;  <span class="comment">// 析构函数</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Destructor called...&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;num:&quot;</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;name:&quot;</span>&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sex:&quot;</span>&lt;&lt;sex&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp  主函数模块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;student.h&quot;</span>   <span class="comment">// 将类声明头文件包含进来</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">stud1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;alyssa&quot;</span>, <span class="string">&#x27;M&#x27;</span>)</span></span>;</span><br><span class="line">    stud1.<span class="built_in">display</span>();</span><br><span class="line">    Student stud2;</span><br><span class="line">    stud2.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a><span>析构函数</span></h2><p>析构函数：当对象的生命周期结束时，会自动执行析构函数。</p>
<ol>
<li>析构函数的作用并不是删除对象，而是在撤销对象占用的内存之前完成一些清理工作，使这部分内存可以被程序分配给新对象使用。</li>
<li>析构函数不返回任何值，没有函数类型，也没有函数参数。</li>
<li>一个类可以有多个构造函数，但只能有一个析构函数。</li>
<li>析构函数不仅可以用来释放资源，还可以被用来执行“<strong>用户虚妄在最后一次使用对象之后所执行的任何操作。</strong>”</li>
<li><strong>先构造的后析构，后构造的先析构。相当于一个栈，先进后出。</strong></li>
</ol>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网时代的社会语言学：基于 SNS 的文本数据挖掘</title>
    <url>//posts/303/</url>
    <content><![CDATA[<h2 id="如何挖掘新词"><a href="#如何挖掘新词" class="headerlink" title="如何挖掘新词"></a><span>如何挖掘新词</span></h2><p>汉语是一种独特而神奇的语言。对汉语资料进行自然语言处理时，我们会遇到很多其他语言不会有的困难，比如分词——汉语的词与词之间没有空格，那计算机怎么才知道，“已结婚的和尚未结婚的青年都要实行计划生育”究竟说的是“已／结婚／的／和／尚未／结婚／的／青年”，还是“已／结婚／的／和尚／未／结婚／的／青年”呢？这就是所谓的分词歧义难题。不过，现在很多语言模型已经能比较漂亮地解决这一问题了。但在中文分词领域里，还有一个比分词歧义更令人头疼的东西——未登录词。中文没有首字母大写，专名号也被取消了，这叫计算机如何辨认人名地名之类的东西？更惨的则是机构名、品牌名、专业名词、缩略语、网络新词等等，它们的产生机制似乎完全无规律可寻。最近十年来，中文分词领域都在集中攻克这一难关。自动发现新词成为了关键的环节。</p>
<p>挖掘新词的传统方法是，先对文本进行分词，然后猜测未能成功匹配的剩余片段就是新词。这似乎陷入了一个怪圈：分词的准确性本身就依赖于词库的完整性，如果词库中根本没有新词，我们又怎么能信任分词结果呢？此时，一种大胆的想法是，首先不依赖于任何已有的词库，仅仅根据词的共同特征，将一段大规模语料中可能成词的文本片段全部提取出来，不管它是新词还是旧词。然后，再把所有抽出来的词和已有词库进行比较，不就能找出新词了吗？有了抽词算法后，我们还能以词为单位做更多有趣的数据挖掘工作。这里，我所选用的语料是人人网 2011 年 12 月前半个月部分用户的状态。非常感谢人人网提供这份极具价值的网络语料。</p>
<span id="more"></span>

<h2 id="内部凝固程度"><a href="#内部凝固程度" class="headerlink" title="内部凝固程度"></a><span>内部凝固程度</span></h2><p>要想从一段文本中抽出词来，我们的第一个问题就是，怎样的文本片段才算一个词？大家想到的第一个标准或许是，看这个<strong>文本片段出现的次数是否足够多</strong>。我们可以把所有出现频数超过某个阈值的片段提取出来，作为该语料中的词汇输出。不过，光是出现频数高还不够，一个经常出现的文本片段有可能不是一个词，而是多个词构成的词组。在人人网用户状态中，“的电影”出现了 389 次，“电影院”只出现了 175 次，然而我们却更倾向于把“电影院”当作一个词，因为直觉上看，“电影”和“院”凝固得更紧一些。</p>
<p>为了证明“电影院”一词的内部凝固程度确实很高，我们可以计算一下，如果“电影”和“院”真的是各自独立地在文本中随机出现，它俩正好拼到一起的概率会有多小。在整个 2400 万字的数据中，“电影”一共出现了 2774 次，出现的概率约为 0.000113 。“院”字则出现了 4797 次，出现的概率约为 0.0001969 。如果两者之间真的毫无关系，它们恰好拼在了一起的概率就应该是 0.000113 × 0.0001969 ，约为 2.223 × 10-8 次方。但事实上，“电影院”在语料中一共出现了 175 次，出现概率约为 7.183 × 10-6 次方，是预测值的 300 多倍。类似地，统计可得“的”字的出现概率约为 0.0166 ，因而“的”和“电影”随机组合到了一起的理论概率值为 0.0166 × 0.000113 ，约为 1.875 × 10-6 ，这与“的电影”出现的真实概率很接近——真实概率约为 1.6 × 10-5 次方，是预测值的 8.5 倍。计算结果表明，“电影院”更可能是一个有意义的搭配，而“的电影”则更像是“的”和“电影”这两个成分偶然拼到一起的。</p>
<p>当然，作为一个无知识库的抽词程序，我们并不知道“电影院”是“电影”加“院”得来的，也并不知道“的电影”是“的”加上“电影”得来的。错误的切分方法会过高地估计该片段的凝合程度。如果我们把“电影院”看作是“电”加“影院”所得，由此得到的凝合程度会更高一些。因此，为了算出一个文本片段的凝合程度，我们需要枚举它的凝合方式——这个文本片段是由哪两部分组合而来的。令 p(x) 为文本片段 x 在整个语料中出现的概率，那么我们定义“电影院”的凝合程度就是 p(电影院) 与 p(电) · p(影院) 比值和 p(电影院) 与 p(电影) · p(院) 的比值中的较小值，“的电影”的凝合程度则是 p(的电影) 分别除以 p(的) · p(电影) 和 p(的电) · p(影) 所得的商的较小值。</p>
<p>可以想到，凝合程度最高的文本片段就是诸如“蝙蝠”、“蜘蛛”、“彷徨”、“忐忑”、“玫瑰”之类的词了，这些词里的每一个字几乎总是会和另一个字同时出现，从不在其他场合中使用。</p>
<h2 id="自由运用程度"><a href="#自由运用程度" class="headerlink" title="自由运用程度"></a><span>自由运用程度</span></h2><p>光看文本片段内部的凝合程度还不够，我们还需要从整体来看它在外部的表现。考虑“被子”和“辈子”这两个片段。我们可以说“买被子”、“盖被子”、“进被子”、“好被子”、“这被子”等等，在“被子”前面加各种字；但“辈子”的用法却非常固定，除了“一辈子”、“这辈子”、“上辈子”、“下辈子”，基本上“辈子”前面不能加别的字了。“辈子”这个文本片段左边可以出现的字太有限，以至于直觉上我们可能会认为，“辈子”并不单独成词，真正成词的其实是“一辈子”、“这辈子”之类的整体。可见，文本片段的<strong>自由运用程度</strong>也是判断它是否成词的重要标准。如果一个文本片段能够算作一个词的话，它应该能够<strong>灵活地出现在各种不同的环境中，具有非常丰富的左邻字集合和右邻字集合</strong>。</p>
<p>“<strong>信息熵</strong>”是一个非常神奇的概念，它能够反映知道一个事件的结果后平均会给你带来多大的信息量。如果某个结果的发生概率为 p ，当你知道它确实发生了，你得到的信息量就被定义为 – log(p) 。 p 越小，你得到的信息量就越大。如果一颗骰子的六个面分别是 1 、 1 、 1 、 2 、 2 、 3 ，那么你知道了投掷的结果是 1 时可能并不会那么吃惊，它给你带来的信息量是 – log(1/2) ，约为 0.693 。知道投掷结果是 2 ，给你带来的信息量则是 – log(1/3) ≈ 1.0986 。知道投掷结果是 3 ，给你带来的信息量则有 – log(1/6) ≈ 1.79 。但是，你只有 1/2 的机会得到 0.693 的信息量，只有 1/3 的机会得到 1.0986 的信息量，只有 1/6 的机会得到 1.79 的信息量，因而平均情况下你会得到 0.693/2 + 1.0986/3 + 1.79/6 ≈ 1.0114 的信息量。这个 1.0114 就是那颗骰子的信息熵。现在，假如某颗骰子有 100 个面，其中 99 个面都是 1 ，只有一个面上写的 2 。知道骰子的抛掷结果是 2 会给你带来一个巨大无比的信息量，它等于 – log(1/100) ，约为 4.605 ；但你只有百分之一的概率获取到这么大的信息量，其他情况下你只能得到 – log(99/100) ≈ 0.01005 的信息量。平均情况下，你只能获得 0.056 的信息量，这就是这颗骰子的信息熵。再考虑一个最极端的情况：如果一颗骰子的六个面都是 1 ，投掷它不会给你带来任何信息，它的信息熵为 – log(1) = 0 。什么时候信息熵会更大呢？换句话说，发生了怎样的事件之后，你最想问一下它的结果如何？直觉上看，当然就是那些结果最不确定的事件。没错，信息熵直观地<strong>反映了一个事件的结果有多么的随机</strong>。</p>
<p>我们用信息熵来衡量一个文本片段的左邻字集合和右邻字集合有多随机。考虑这么一句话“吃葡萄不吐葡萄皮不吃葡萄倒吐葡萄皮”，“葡萄”一词出现了四次，其中左邻字分别为 {吃, 吐, 吃, 吐} ，右邻字分别为 {不, 皮, 倒, 皮} 。根据公式，“葡萄”一词的左邻字的信息熵为 – (1/2) · log(1/2) – (1/2) · log(1/2) ≈ 0.693 ，它的右邻字的信息熵则为 – (1/2) · log(1/2) – (1/4) · log(1/4) – (1/4) · log(1/4) ≈ 1.04 。可见，在这个句子中，“葡萄”一词的右邻字更加丰富一些。</p>
<p>在人人网用户状态中，“被子”一词一共出现了 956 次，“辈子”一词一共出现了 2330 次，两者的右邻字集合的信息熵分别为 3.87404 和 4.11644 ，数值上非常接近。但“被子”的左邻字用例非常丰富：用得最多的是“晒被子”，它一共出现了 162 次；其次是“的被子”，出现了 85 次；接下来分别是“条被子”、“在被子”、“床被子”，分别出现了 69 次、 64 次和 52 次；当然，还有“叠被子”、“盖被子”、“加被子”、“新被子”、“掀被子”、“收被子”、“薄被子”、“踢被子”、“抢被子”等 100 多种不同的用法构成的长尾⋯⋯所有左邻字的信息熵为 3.67453 。但“辈子”的左邻字就很可怜了， 2330 个“辈子”中有 1276 个是“一辈子”，有 596 个“这辈子”，有 235 个“下辈子”，有 149 个“上辈子”，有 32 个“半辈子”，有 10 个“八辈子”，有 7 个“几辈子”，有 6 个“哪辈子”，以及“n 辈子”、“两辈子”等 13 种更罕见的用法。所有左邻字的信息熵仅为 1.25963 。因而，“辈子”能否成词，明显就有争议了。“下子”则是更典型的例子， 310 个“下子”的用例中有 294 个出自“一下子”， 5 个出自“两下子”， 5 个出自“这下子”，其余的都是只出现过一次的罕见用法。事实上，“下子”的左邻字信息熵仅为 0.294421 ，我们不应该把它看作一个能灵活运用的词。当然，一些文本片段的左邻字没啥问题，右邻字用例却非常贫乏，例如“交响”、“后遗”、“鹅卵”等，把它们看作单独的词似乎也不太合适。我们不妨就<strong>把一个文本片段的自由运用程度定义为它的左邻字信息熵和右邻字信息熵中的较小值</strong>。</p>
<p>在实际运用中你会发现，文本片段的凝固程度和自由程度，两种判断标准缺一不可。只看凝固程度的话，程序会找出“巧克”、“俄罗”、“颜六色”、“柴可夫”等实际上是“半个词”的片段；只看自由程度的话，程序则会把“吃了一顿”、“看了一遍”、“睡了一晚”、“去了一趟”中的“了一”提取出来，因为它的左右邻字都太丰富了。</p>
<h2 id="分词统计实践"><a href="#分词统计实践" class="headerlink" title="分词统计实践"></a><span>分词统计实践</span></h2><p>我们把文本中出现过的所有长度不超过 d 的子串都当作潜在的词（即候选词，其中 d 为自己设定的候选词长度上限，我设定的值为 5 ），再为出现频数、凝固程度和自由程度各设定一个阈值，然后只需要提取出所有满足阈值要求的候选词即可。为了提高效率，我们可以把语料全文视作一整个字符串，并对该字符串的所有后缀按字典序排序。下表就是对“四是四十是十十四是十四四十是四十”的所有后缀进行排序后的结果。实际上我们只需要在内存中存储这些后缀的前 d + 1 个字，或者更好地，只储存它们在语料中的起始位置。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">十</span><br><span class="line">十十四是十四四十是四十</span><br><span class="line">十是十十四是十四四十是四十</span><br><span class="line">十是四十</span><br><span class="line">十四是十四四十是四十</span><br><span class="line">十四四十是四十</span><br><span class="line">是十十四是十四四十是四十</span><br><span class="line">是十四四十是四十</span><br><span class="line">是四十</span><br><span class="line">是四十是十十四是十四四十是四十</span><br><span class="line">四十</span><br><span class="line">四十是十十四是十四四十是四十</span><br><span class="line">四十是四十</span><br><span class="line">四是十四四十是四十</span><br><span class="line">四是四十是十十四是十四四十是四十</span><br><span class="line">四四十是四十</span><br></pre></td></tr></table></figure>

<p>这样的话，相同的候选词便都集中在了一起，从头到尾扫描一遍便能算出各个候选词的频数和右邻字信息熵。将整个语料逆序后重新排列所有的后缀，再扫描一遍后便能统计出每个候选词的左邻字信息熵。另外，有了频数信息后，凝固程度也都很好计算了。这样，我们便得到了一个无需任何知识库的抽词算法，输入一段充分长的文本，这个算法能以大致 O(n · logn) 的效率提取出可能的词来。</p>
<p>对不同的语料进行抽词，并且按这些词的频数从高到低排序。你会发现，不同文本的用词特征是非常明显的。下面是对《西游记》上册的抽词结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">行者、师父、三藏、八戒、大圣、菩萨、悟空、怎么、和尚、唐僧、老孙、溃骸、什么、沙僧、太宗、徒弟、袈裟、</span><br><span class="line">妖精、玉帝、今日、兄弟、公主、玄奘、陛下、宝贝、性命、晓得、门外、妖魔、光蕊、观音、花果山、土地、木叉、</span><br><span class="line">东土、变化、变做、伯钦、判官、多少、真君、齐天大圣、蟠桃、丞相、魏征、扯住、溃骸澳、抬头、揭谛、言语、</span><br><span class="line">猪八戒、兵器、吩咐、安排、叩头、清风、哪吒、左右、美猴王、钉钯、孩儿、女婿、金箍棒、二郎、东西、许多、</span><br><span class="line">奈何、人参果、收拾、近前、太保、明月、南海、水帘洞、门首、弼马温、李天王⋯⋯</span><br></pre></td></tr></table></figure>

<p>《资本论》全文：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">商品、形式、货币、我们、过程、自己、机器、社会、部分、表现、没有、流通、需要、增加、已经、交换、关系、</span><br><span class="line">先令、积累、必须、英国、条件、发展、麻布、儿童、进行、提高、消费、减少、任何、手段、职能、土地、特殊、</span><br><span class="line">实际、完全、平均、直接、随着、简单、规律、市场、增长、上衣、决定、什么、制度、最后、支付、许多、虽然、</span><br><span class="line">棉纱、形态、棉花、法律、绝对、提供、扩大、独立、世纪、性质、假定、每天、包含、物质、家庭、规模、考察、</span><br><span class="line">剥削、经济学、甚至、延长、财富、纺纱、购买、开始、代替、便士、怎样、降低、能够、原料、等价物⋯⋯</span><br></pre></td></tr></table></figure>

<p>《圣经》全文：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">以色列、没有、自己、一切、面前、大卫、知道、什么、犹大、祭司、摩西、看见、百姓、吩咐、埃及、听见、弟兄、</span><br><span class="line">告诉、基督、已经、先知、扫罗、父亲、雅各、永远、攻击、智慧、荣耀、临到、洁净、离开、怎样、平安、律法、</span><br><span class="line">支派、许多、门徒、打发、好像、仇敌、原文作、名叫、巴比伦、今日、首领、旷野、所罗门、约瑟、两个、燔祭、</span><br><span class="line">法老、衣服、脱离、二十、公义、审判、十二、亚伯拉罕、石头、聚集、按着、祷告、罪孽、约书亚、事奉、指着、</span><br><span class="line">城邑、进入、彼此、建造、保罗、应当、摩押、圣灵、惧怕、应许、如今、帮助、牲畜⋯⋯</span><br></pre></td></tr></table></figure>

<p>《时间简史》全文：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">黑洞、必须、非常、任何、膨胀、科学、预言、太阳、观察、定律、运动、事件、奇点、坍缩、问题、模型、方向、</span><br><span class="line">区域、知道、开始、辐射、部分、牛顿、产生、夸克、无限、轨道、解释、边界、甚至、自己、类似、描述、最终、</span><br><span class="line">旋转、爱因斯坦、绕着、什么、效应、表明、温度、研究、收缩、吸引、按照、完全、增加、开端、基本、计算、</span><br><span class="line">结构、上帝、进行、已经、发展、几乎、仍然、足够、影响、初始、科学家、事件视界、第二、改变、历史、世界、</span><br><span class="line">包含、准确、证明、导致、需要、应该、至少、刚好、提供、通过、似乎、继续、实验、复杂、伽利略⋯⋯</span><br></pre></td></tr></table></figure>

<p>哦，对了，还有我最喜欢的，《人民日报》 2000 年 4 月新闻版的抽词结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">发展、我们、经济、主席、江泽民、领导、建设、关系、教育、干部、企业、问题、主义、政治、群众、改革、政府、</span><br><span class="line">思想、加强、台湾、地区、北京、总统、世界、记者、代表、民族、组织、历史、访问、原则、努力、管理、今天、</span><br><span class="line">技术、市场、世纪、坚持、社会主义、财政、江泽民主席、增长、积极、精神、同志、双方、自己、友好、领导干部、</span><br><span class="line">进一步、基础、提高、必须、不断、制度、政策、解决、取得、表示、活动、支持、通过、研究、没有、学习、稳定、</span><br><span class="line">举行、欢迎、农村、生活、促进、科技、投资、科学、环境、领域、公司、情况、充分⋯⋯</span><br></pre></td></tr></table></figure>

<p>当然，我也没有忘记对人人网用户状态进行分析——人人网用户状态中最常出现的词是：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">哈哈、什么、今天、怎么、现在、可以、知道、喜欢、终于、这样、觉得、因为、如果、感觉、开始、回家、考试、</span><br><span class="line">老师、幸福、朋友、时间、发现、东西、快乐、为什么、睡觉、生活、已经、希望、最后、各种、状态、世界、突然、</span><br><span class="line">手机、其实、那些、同学、孩子、尼玛、木有、然后、以后、学校、所以、青年、晚安、原来、电话、加油、果然、</span><br><span class="line">学习、中国、最近、应该、需要、居然、事情、永远、特别、北京、他妈、伤不起、必须、呵呵、月亮、毕业、问题、</span><br><span class="line">谢谢、英语、生日快乐、工作、虽然、讨厌、给力、容易、上课、作业、今晚、继续、努力、有木有、记得⋯⋯</span><br></pre></td></tr></table></figure>

<p>事实上，程序从人人网的状态数据中一共抽出了大约 1200 个词，里面大多数词也确实都是标准的现代汉语词汇。不过别忘了，我们的目标是新词抽取。将所有抽出来的词与已有词库作对比，于是得到了人人网特有的词汇（同样按频数从高到低排序）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">尼玛、伤不起、给力、有木有、挂科、坑爹、神马、淡定、老爸、卧槽、牛逼、肿么、苦逼、无语、微博、六级、高数、</span><br><span class="line">选课、悲催、基友、蛋疼、很久、人人网、情何以堪、童鞋、哇咔咔、脑残、吐槽、猥琐、奶茶、我勒个去、刷屏、</span><br><span class="line">妹纸、胃疼、飘过、考研、弱爆了、太准了、搞基、忽悠、羡慕嫉妒恨、手贱、柯南、狗血、秒杀、装逼、真特么、</span><br><span class="line">碎觉、奥特曼、内牛满面、斗地主、腾讯、灰常、偶遇、拉拉、屌丝、九把刀、高富帅、阿内尔卡、魔兽世界、线代、</span><br><span class="line">三国杀、林俊杰、速速、臭美、花痴⋯⋯</span><br></pre></td></tr></table></figure>

<h2 id="每日热词统计实践"><a href="#每日热词统计实践" class="headerlink" title="每日热词统计实践"></a><span>每日热词统计实践</span></h2><p>我还想到了更有意思的玩法。为什么不拿每一天状态里的词去和前一天的状态作对比，从而提取出这一天里特有的词呢？这样一来，我们就能从人人网的用户状态中提取出每日热点了！从手里的数据规模看，这是完全有可能的。我选了 12 个比较具有代表性的词，并列出了它们在 2011 年 12 月 13 日的用户状态中出现的频数（左列的数），以及 2011 年 12 月 14 日的用户状态中出现的频数（右列的数）：</p>
<table>
<thead>
<tr>
<th align="center">代表性的词</th>
<th align="center">12月13号</th>
<th align="center">12月14号</th>
</tr>
</thead>
<tbody><tr>
<td align="center">那些年</td>
<td align="center">139</td>
<td align="center">146</td>
</tr>
<tr>
<td align="center">李宇春</td>
<td align="center">1</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">看见</td>
<td align="center">145</td>
<td align="center">695</td>
</tr>
<tr>
<td align="center">魔兽</td>
<td align="center">23</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">高数</td>
<td align="center">82</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">生日快乐</td>
<td align="center">235</td>
<td align="center">210</td>
</tr>
<tr>
<td align="center">今天</td>
<td align="center">1416</td>
<td align="center">1562</td>
</tr>
<tr>
<td align="center">北半球</td>
<td align="center">2</td>
<td align="center">18</td>
</tr>
<tr>
<td align="center">脖子</td>
<td align="center">23</td>
<td align="center">69</td>
</tr>
<tr>
<td align="center">悲伤</td>
<td align="center">61</td>
<td align="center">33</td>
</tr>
<tr>
<td align="center">电磁炉</td>
<td align="center">0</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">下雪</td>
<td align="center">33</td>
<td align="center">92</td>
</tr>
</tbody></table>
<p>大家可以从直觉上迅速判断出，哪些词可以算作是 12 月 14 日的热词。比方说，“下雪”一词在 12 月 13 日只出现了 33 次，在 12 月 14 日却出现了 92 次，后者是前者的 2.8 倍，这不大可能是巧合，初步判断一定是 12 月 14 日真的有什么地方下雪了。“那些年”在 12 月 14 日的频数确实比 12 月 13 日更多，但相差并不大，我们没有理由认为它是当日的一个热词。</p>
<p>一个问题摆在了我们面前：我们如何去量化一个词的“当日热度”？第一想法当然是简单地看一看每个词的当日频数和昨日频数之间的倍数关系，不过细想一下你就发现问题了：它不能解决样本过少带来的偶然性。 12 月 14 日“李宇春”一词的出现频数是 12 月 13 日的 4 倍，这超过了“下雪”一词的 2.8 倍，但我们却更愿意相信“李宇春”的现象只是一个偶然。更麻烦的则是“电磁炉”一行， 12 月 14 日的频数是 12 月 13 日的无穷多倍，但显然我们也不能因此就认为“电磁炉”是 12 月 14 日最热的词。</p>
<p>忽略所有样本过少的词？这似乎也不太好，样本少的词也有可能真的是热词。比如“北半球”一词，虽然它在两天里的频数都很少，但这个 9 倍的关系确实不容忽视。事实上，人眼很容易看出哪些词真的是 12 月 14 日的热词：除了“下雪”以外，“看见”、“北半球”和“脖子”也应该是热词。你或许坚信后三个词异峰突起的背后一定有什么原因（并且迫切地想知道这个原因究竟是什么），但却会果断地把“李宇春”和“电磁炉”这两个“异常”归结为偶然原因。你的直觉是对的—— 2011 年 12 月 14 日发生了极其壮观的双子座流星雨，此乃北半球三大流星雨之一。白天网友们不断转发新闻，因而“北半球”一词热了起来；晚上网友们不断发消息说“看见了”、“又看见了”，“看见”一词的出现频数猛增；最后呢，仰望天空一晚上，脖子终于出毛病了，于是回家路上一个劲儿地发“脖子难受”。</p>
<p>让计算机也能聪明地排除偶然因素，这是我们在数据挖掘过程中经常遇到的问题。我们经常需要对样本过少的项目进行“平滑”操作，以避免分母过小带来的奇点。这里，我采用的是一个非常容易理解的方法：<strong>一个词的样本太少，就给这个词的热度打折扣</strong>。为了便于说明，我们选出四个词为例来分析。</p>
<p>下表截取了前四个词，右边四列分别表示各词在 12 月 13 日出现的频数，在 12 月 14 日出现的频数，在两天里一共出现的总频数，以及后一天的频数所占的比重。第三列数字是前两列数字之和，第四列数字则是第二列数字除以第三列数字的结果。最后一列应该是一个 0 到 1 之间的数，它表明对应的词有多大概率出现在了 12 月 14 日这一天。最后一列可以看作是各词的得分。可以看到，此时“下雪”的得分低于“李宇春”，这是我们不希望看到的结果。“李宇春”的样本太少，我们想以此为缘由把它的得分拖下去。</p>
<table>
<thead>
<tr>
<th align="center">词</th>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C = A+B</th>
<th align="center">D = B/C</th>
</tr>
</thead>
<tbody><tr>
<td align="center">下雪</td>
<td align="center">33</td>
<td align="center">92</td>
<td align="center">125</td>
<td align="center">0.736</td>
</tr>
<tr>
<td align="center">那些年</td>
<td align="center">139</td>
<td align="center">146</td>
<td align="center">285</td>
<td align="center">0.512</td>
</tr>
<tr>
<td align="center">李宇春</td>
<td align="center">1</td>
<td align="center">4</td>
<td align="center">5</td>
<td align="center">0.8</td>
</tr>
<tr>
<td align="center">看见</td>
<td align="center">145</td>
<td align="center">695</td>
<td align="center">840</td>
<td align="center">0.827</td>
</tr>
<tr>
<td align="center">（平均）</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">313.75</td>
<td align="center">0.719</td>
</tr>
</tbody></table>
<p>怎么做呢？我们把每个词的得分都和全局平均分取一个加权平均！首先计算出这四个词的平均总频数，为 313.75 ；再计算出这四个词的平均得分，为 0.719 。接下来，我们假设已经有 313.75 个人预先给每个词都打了 0.719 分，换句话说每个词都已经收到了 313.75 次评分，并且所有这 313.75 个评分都是 0.719 分。“下雪”这个词则还有额外的 125 个人评分，其中每个人都给了 0.736 分。因此，“下雪”一词的最终得分就是：</p>
<table>
<thead>
<tr>
<th align="center">词</th>
<th align="center">得分值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">下雪</td>
<td align="center">(0.736 × 125 + 0.719 × 313.75) / (125 + 313.75) ≈ 0.724</td>
</tr>
</tbody></table>
<p>类似地，其他几个词的得分依次为：</p>
<table>
<thead>
<tr>
<th align="center">词</th>
<th align="center">得分值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">那些年</td>
<td align="center">(0.512 × 285 + 0.719 × 313.75) / (285 + 313.75) ≈ 0.62</td>
</tr>
<tr>
<td align="center">李宇春</td>
<td align="center">(0.8 × 5 + 0.719 × 313.75) / (5 + 313.75) ≈ 0.7202</td>
</tr>
<tr>
<td align="center">看见</td>
<td align="center">(0.827 × 840 + 0.719 × 313.75) / (840 + 313.75) ≈ 0.798</td>
</tr>
</tbody></table>
<p>容易看出，此时样本越大的词，就越有能力把最终得分拉向自己本来的得分，样本太小的词，最终得分将会与全局平均分非常接近。经过这么一番调整，“下雪”一词的得分便高于了“李宇春”。实际运用中， 313.75 这个数也可以由你自己来定，定得越高就表明你越在意样本过少带来的负面影响。这种与全局平均取加权平均的思想叫做 Bayesian average ，从上面的若干式子里很容易看出，它实际上是最常见的平滑处理方法之一——分子分母都加上一个常数——的一种特殊形式。</p>
<p>利用之前的抽词程序抽取出人人网每一天内用户状态所含的词，把它们的频数都与前一天的作对比，再利用刚才的方法加以平滑，便能得出每一天的热词了。我手上的数据是人人网 2011 年 12 月上半月的数据，因此我可以得出从 12 月 2 日到 12 月 15 日的热词（选取每日前 5 名，按得分从高到低）。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">02</span>：第一场雪、北京、金隅、周末、新疆</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">03</span>：荷兰、葡萄牙、死亡之组、欧洲杯、德国</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">04</span>：那些年、宣传、期末、男朋友、升旗</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">05</span>：教室、老师、视帝、体育课、质量</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">06</span>：乔尔、星期二、摄影、经济、音乐</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">07</span>：陈超、星巴克、优秀、童鞋、投票</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">08</span>：曼联、曼城、欧联杯、皇马、冻死</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">09</span>：保罗、月全食、交易、火箭、黄蜂</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">10</span>：变身、罗伊、穿越、皇马、巴萨</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">11</span>：皇马、巴萨、卡卡、梅西、下半场</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">12</span>：淘宝、阿内尔卡、双十二、申花、老师</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">13</span>：南京、南京大屠杀、勿忘国耻、默哀、警报</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">14</span>：流星雨、许愿、愿望、情人节、几颗</span><br><span class="line"><span class="attribute">2011</span>-<span class="number">12</span>-<span class="number">15</span>：快船、保罗、巴萨、昨晚、龙门飞甲</span><br></pre></td></tr></table></figure>

<p>看来， 12 月 14 日果然有流星雨发生。</p>
<p>注意，由于我们仅仅对比了相邻两天的状态，因而产生了个别实际上是由工作日/休息日的区别造成的“热词”，比如“教室”、“老师”、“星期二”等。把这样的词当作热词可能并不太妥。结合上周同日的数据，或者干脆直接与之前整个一周的数据来对比，或许可以部分地解决这一问题。</p>
<p>事实上，有了上述工具，我们可以任意比较两段不同文本中的用词特点。更有趣的是，人人网状态的大多数发布者都填写了性别和年龄的个人信息，我们为何不把状态重新分成男性和女性两组，或者 80 后和 90 后两组，挖掘出不同属性的人都爱说什么？要知道，在过去，这样的问题需要进行大规模语言统计调查才能回答！然而，在互联网海量用户生成内容的支持下，我们可以轻而易举地挖掘出答案来。</p>
<p>我真的做了这个工作（基于另一段日期内的数据）。男性爱说的词有：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">兄弟、篮球、男篮、米兰、曼联、足球、蛋疼、皇马、比赛、国足、超级杯、球迷、中国、老婆、政府、航母、踢球、</span><br><span class="line">赛季、股市、砸蛋、牛逼、铁道部、媳妇、国际、美国、连败、魔兽、斯内德、红十字、经济、腐败、程序、郭美美、</span><br><span class="line">英雄、民主、鸟巢、米兰德比、官员、内涵、历史、训练、评级、金融、体育、记者、事故、程序员、媒体、投资、</span><br><span class="line">事件、社会、项目、伊布、主义、决赛、操蛋、纳尼、领导、喝酒、民族、新闻、言论、和谐、农民、体制、城管⋯⋯</span><br></pre></td></tr></table></figure>

<p>下面则是女性爱说的词：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">一起玩、蛋糕、加好友、老公、呜呜、姐姐、嘻嘻、老虎、讨厌、妈妈、呜呜呜、啦啦啦、便宜、减肥、男朋友、老娘、</span><br><span class="line">逛街、无限、帅哥、礼物、互相、奶茶、委屈、各种、高跟鞋、指甲、城市猎人、闺蜜、巧克力、第二、爸爸、宠物、</span><br><span class="line">箱子、吼吼、大黄蜂、狮子、胃疼、玫瑰、包包、裙子、游戏、遇见、嘿嘿、灰常、眼睛、各位、妈咪、化妆、玫瑰花、</span><br><span class="line">蓝精灵、幸福、陪我玩、任务、怨念、舍不得、害怕、狗狗、眼泪、温暖、面膜、收藏、李民浩、神经、土豆、零食、</span><br><span class="line">痘痘、戒指、巨蟹、晒黑⋯⋯</span><br></pre></td></tr></table></figure>

<p>下面是 90 后用户爱用的词：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">加好友、作业、各种、乖乖、蛋糕、来访、卧槽、通知书、麻将、聚会、补课、欢乐、刷屏、录取、无限、互相、速度、</span><br><span class="line">一起玩、啦啦啦、晚安、求陪同、基友、美女、矮油、巨蟹、五月天、第二、唱歌、老虎、扣扣、啧啧、帅哥、哈哈哈、</span><br><span class="line">尼玛、便宜、苦逼、斯内普、写作业、劳资、孩纸、哎哟、炎亚纶、箱子、无聊、求来访、查分、上课、果断、处女、</span><br><span class="line">首映、屏蔽、混蛋、暑假、吓死、新东方、组队、下学期、陪我玩、打雷、妹纸、水瓶、射手、搞基、吐槽、同学聚会、</span><br><span class="line">出去玩、呜呜、白羊、表白、做作业、签名、姐姐、停机、伏地魔、对象、哈哈、主页、情侣、无压力、共同、摩羯、</span><br><span class="line">碎觉、肿么办⋯⋯</span><br></pre></td></tr></table></figure>

<p>下面则是 80 后用户爱用的词：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">加班、培训、周末、工作、公司、各位、值班、砸蛋、上班、任务、公务员、工资、领导、包包、办公室、校内、</span><br><span class="line">郭美美、时尚、企业、股市、新号码、英国、常联系、实验室、论文、忙碌、项目、部门、祈福、邀请、招聘、顺利、</span><br><span class="line">朋友、红十字、男朋友、媒体、产品、标准、号码、存钱、牛仔裤、曼联、政府、简单、立秋、事故、伯明翰、博士、</span><br><span class="line">辞职、健康、销售、深圳、奶茶、搬家、实验、投资、节日快乐、坚持、规则、考验、生活、体制、客户、发工资、</span><br><span class="line">忽悠、提供、教育、处理、惠存、沟通、团购、缺乏、腐败、启程、红十字会、结婚、管理、环境、暴跌、服务、</span><br><span class="line">变形金刚、祝福、银行⋯⋯</span><br></pre></td></tr></table></figure>

<p>不仅如此，不少状态还带有地理位置信息，因而我们可以站在空间的维度对信息进行观察。这个地方的人都爱说些什么？爱说这个词的人都分布在哪里？借助这些包含地理位置的签到信息，我们也能挖掘出很多有意思的结果来。例如，对北京用户的签到信息进行抽词，然后对于每一个抽出来的词，筛选出所有包含该词的签到信息并按地理坐标的位置聚类，这样我们便能找出那些地理分布最集中的词。结果非常有趣：“考试”一词集中分布在海淀众高校区，“天津”一词集中出现在北京南站，“逛街”一词则全都在西单附近扎堆。北京首都国际机场也是一个非常特别的地点，“北京”、“登机”、“终于”、“再见”等词在这里出现的密度极高。</p>
<p>从全国范围来看，不同区域的人也有明显的用词区别。我们可以将全国地图划分成网格，统计出所有签到信息在各个小格内出现的频数，作为标准分布；然后对于每一个抽出来的词，统计出包含该词的签到信息在各个小格内出现的频数，并与标准分布进行对比（可以采用余弦距离等公式），从而找出那些分布最反常的词。程序运行后发现，这样的词还真不少。一些明显具有南北差异的词，分布就会与整个背景相差甚远。例如，在节假日的时候，“滑雪”一词主要在北方出现，“登山”一词则主要在南方出现。地方特色也是造成词语分布差异的一大原因，例如“三里屯”一词几乎只在北京出现，“热干面”一词集中出现在武汉地区，“地铁”一词明显只有个别城市有所涉及。这种由当地人的用词特征反映出来的真实的地方特色，很可能是许多旅游爱好者梦寐以求的信息。另外，方言也会导致用词分布差异，例如“咋这么”主要分布在北方地区，“搞不懂”主要分布在南方城市，“伐”则非常集中地出现在上海地区。当数据规模足够大时，或许我们能通过计算的方法，自动对中国的方言区进行划分。</p>
<p>其实，不仅仅是发布时间、用户年龄、用户性别、地理位置这四个维度，我们还可以对浏览器、用户职业、用户活跃度、用户行为偏好等各种各样的维度进行分析，甚至可以综合考虑以上维度，在某个特定范围内挖掘热点事件，或者根据语言习惯去寻找出某个特定的人群。或许这听上去太过理想化，不过我坚信，有了合适的算法，这些想法终究会被一一实现。</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a><span>备注</span></h2><p>原文链接：<a href="https://www.matrix67.com/blog/archives/5044">https://www.matrix67.com/blog/archives/5044</a></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 学习</title>
    <url>//posts/511/</url>
    <content><![CDATA[<p>教程链接： <a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a> </p>
<h4 id="🍬-总结"><a href="#🍬-总结" class="headerlink" title="🍬. 总结"></a>🍬. 总结</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 初始化一个Git仓库，使用 <span class="string">&quot;git init&quot;</span> 命令。</span><br><span class="line">2. 添加文件到Git仓库，分两步：</span><br><span class="line">     - 使用命令 <span class="string">&quot;git add &lt;file&gt;&quot;</span>，注意，可反复多次使用，添加多个文件；</span><br><span class="line">     - 使用命令 <span class="string">&quot;git commit -m &lt;message&gt;&quot;</span>，完成。</span><br><span class="line">3. 要随时掌握工作区的状态，使用 <span class="string">&quot;git status&quot;</span> 命令。</span><br><span class="line">   如果 <span class="string">&quot;git status&quot;</span> 告诉你有文件被修改过，用 <span class="string">&quot;git diff&quot;</span> 可以查看修改内容。</span><br><span class="line">4. 版本回退：</span><br><span class="line">   - HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 <span class="string">&quot;git reset --hard commit_id&quot;</span>。</span><br><span class="line">   - 穿梭前，用 <span class="string">&quot;git log&quot;</span> 可以查看提交历史，以便确定要回退到哪个版本。</span><br><span class="line">   - 要重返未来，用 <span class="string">&quot;git reflog&quot;</span> 查看命令历史，以便确定要回到未来的哪个版本。</span><br><span class="line">5. 撤销修改：</span><br><span class="line">   - 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <span class="string">&quot;git checkout -- file&quot;</span>。</span><br><span class="line">   - 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <span class="string">&quot;git reset HEAD&quot;</span>，就回到了场景1，第二步按场景1操作。</span><br><span class="line">6. 删除文件：</span><br><span class="line">   - 删除一个文件：用命令 <span class="string">&quot;git rm file&quot;</span> 删掉，并且 <span class="string">&quot;git commit -m xxx&quot;</span></span><br><span class="line">   - 恢复误删除文件：<span class="string">&quot;git checkout -- file&quot;</span> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</span><br><span class="line">7. 创建与合并分支：</span><br><span class="line">   - 查看分支：<span class="string">&quot;git branch&quot;</span></span><br><span class="line">   - 创建分支：<span class="string">&quot;git branch &lt;name&gt;&quot;</span></span><br><span class="line">   - 切换分支：<span class="string">&quot;git checkout &lt;name&gt;&quot;</span> 或者 <span class="string">&quot;git switch &lt;name&gt;&quot;</span></span><br><span class="line">   - 创建+切换分支：<span class="string">&quot;git checkout -b &lt;name&gt;&quot;</span> 或者 <span class="string">&quot;git switch -c &lt;name&gt;&quot;</span></span><br><span class="line">   - 合并某分支到当前分支：<span class="string">&quot;git merge &lt;name&gt;&quot;</span></span><br><span class="line">   - 删除分支：<span class="string">&quot;git branch -d &lt;name&gt;&quot;</span></span><br><span class="line">8. 当你当前分支的工作没做完想切换分支的时候，需要把当前分支的内容先隐藏 <span class="string">&quot;git stash&quot;</span></span><br><span class="line">9. 如果要丢弃一个没有被合并过的分支，可以通过 <span class="string">&quot;git branch -D &lt;name&gt;&quot;</span> 强行删除。</span><br><span class="line">10. 多人协作：</span><br><span class="line">   - 查看远程库信息，使用 <span class="string">&quot;git remote -v&quot;</span>；</span><br><span class="line">   - 本地新建的分支如果不推送到远程，对其他人就是不可见的；</span><br><span class="line">   - 从本地推送分支，使用 <span class="string">&quot;git push origin branch-name&quot;</span>，如果推送失败，先用 <span class="string">&quot;git pull&quot;</span> 抓取远程的新提交；</span><br><span class="line">   - 在本地创建和远程分支对应的分支，使用 <span class="string">&quot;git checkout -b branch-name origin/branch-name&quot;</span>，本地和远程分支的名称最好一致；</span><br><span class="line">   - 建立本地分支和远程分支的关联，使用 <span class="string">&quot;git branch --set-upstream branch-name origin/branch-name&quot;</span>；</span><br><span class="line">   - 从远程抓取分支，使用 <span class="string">&quot;git pull&quot;</span>，如果有冲突，要先处理冲突。</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="🌼-创建Git仓库"><a href="#🌼-创建Git仓库" class="headerlink" title="🌼. 创建Git仓库"></a>🌼. 创建Git仓库</h4><p>首先创建Git仓库，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。 </p>
<ol>
<li>在所需要git的文件夹内建立仓库：<ul>
<li>进入到目标文件夹</li>
<li>执行： <code>git init</code></li>
</ul>
</li>
<li>将文件放到git仓库：<ul>
<li>用命令 <code>git add test.py</code>告诉git，把文件添加到仓库。</li>
<li>用命令 <code>git commit -m &quot;xxx&quot;</code>告诉git，把文件提交到仓库。其中<code>&quot;xxx&quot;</code>输入的是本次提交的说明，可以输入任意内容，但最好有意义，方便从历史记录里找到改动的记录。</li>
</ul>
</li>
<li>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次add不同的文件，比如：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add file1.txt</span><br><span class="line">git add file2.txt file3.txt</span><br><span class="line">git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="🌼-修改文件并提交"><a href="#🌼-修改文件并提交" class="headerlink" title="🌼. 修改文件并提交"></a>🌼. 修改文件并提交</h4><p>修改<code>test.py</code>文件内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></table></figure>

<p>运行 <code>git status</code>查看结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">位于分支 master</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">&quot;git checkout -- &lt;文件&gt;...&quot;</span> 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">    修改：     test.py</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br></pre></td></tr></table></figure>

<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>test.py</code>被修改过了，但还没有准备提交的修改。</p>
<p>用<code>git diff</code>命令可以查看我们对文件做进行修改的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a/test.py b/test.py</span><br><span class="line">index e69de29..1337a53 100644</span><br><span class="line">--- a/test.py</span><br><span class="line">+++ b/test.py</span><br><span class="line">@ -0,0 +1 @@</span><br><span class="line">+a = 1</span><br></pre></td></tr></table></figure>

<p>然后将<code>test.py</code>提交到仓库:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add test.py</span><br><span class="line">$ git commit -m <span class="string">&quot;修改 a=1&quot;</span></span><br></pre></td></tr></table></figure>

<p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure>

<p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净的。</p>
<h4 id="🌼-版本回退"><a href="#🌼-版本回退" class="headerlink" title="🌼. 版本回退"></a>🌼. 版本回退</h4><p>在之前的几次修改中，我一共提交了三个版本，用<code>git log</code>查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">4676b30e64d651522d8f1caf6722267eba7ad13b 修改2</span><br><span class="line">2e79bb499e48367e070d2eeae7a599504f8eac67 修改 a=1</span><br><span class="line">909ebc275138015313a9c652ef6c30e0e438fcc9 新建文件</span><br></pre></td></tr></table></figure>

<p>其中：一大串类似<code>4676b30e...</code>的是<code>commit id</code>（版本号）<br>新建文件：（空）<br>修改a=1： a=1<br>修改2： a=2 b=3</p>
<p>现在，将<code>test.py</code>会退到上一个版本：</p>
<p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>4676b30...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>现在，我们要把当前版本<code>修改2</code>回退到上一个版本<code>修改a=1</code>，就可以使用<code>git reset</code>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD 现在位于 2e79bb4 修改 a=1</span><br></pre></td></tr></table></figure>

<p>看看<code>test.py</code>的内容是不是版本<code>修改a=1</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.py</span><br><span class="line">a = 1</span><br></pre></td></tr></table></figure>

<p>果然被还原了。</p>
<p><code>git log</code>查看版本库状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">2e79bb499e48367e070d2eeae7a599504f8eac67 修改 a=1</span><br><span class="line">909ebc275138015313a9c652ef6c30e0e438fcc9 新建文件</span><br></pre></td></tr></table></figure>

<p>我们发现<code>修改2</code>不见了。这就相当于我们回到过去，用<code>git log</code>无法查看未来。所以要查看未来要用<code>git reflog</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">2e79bb4 HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">4676b30 HEAD@&#123;1&#125;: commit: 修改2</span><br><span class="line">2e79bb4 HEAD@&#123;2&#125;: commit: 修改 a=1</span><br><span class="line">909ebc2 HEAD@&#123;3&#125;: commit (initial): 新建文件</span><br></pre></td></tr></table></figure>

<p>如果想回到未来，就执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 4676b30 (commit id)</span><br></pre></td></tr></table></figure>

<p>看看<code>test.py</code>的内容是不是版本<code>修改2</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.py</span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br></pre></td></tr></table></figure>

<p>比如我现在在工作区中新建一个<code>test3.py</code>,然后修改<code>test.py</code>和<code>test2.py</code>的内容，然后将这三个文件都<code>git add</code>到stage区，然后一次性<code>git commit</code>到<code>master</code>区。现在<code>git log</code>如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">d142268223521c9f9c73c232793a7b10e0591f1a 测试</span><br><span class="line">6efac73f38c50d6f5cd7b8f3bd09458a5465750c understand how stage works</span><br><span class="line">4676b30e64d651522d8f1caf6722267eba7ad13b 修改2</span><br><span class="line">2e79bb499e48367e070d2eeae7a599504f8eac67 修改a=1</span><br><span class="line">909ebc275138015313a9c652ef6c30e0e438fcc9 新建文件</span><br></pre></td></tr></table></figure>

<p>然后我将版本回退到<code>understand how stage works</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">HEAD 现在位于 6efac73 understand how stage works</span><br></pre></td></tr></table></figure>

<p>此时，工作区中<code>test3.py</code>文件就不见了，然后<code>test.py</code>和<code>test2.py</code>中的内容都会回退到<code>understand how stage works</code>版本。</p>
<p><strong>也就是说，回退版本，不是对某个文件回退版本，而是对你这一次commit的所有文件进行版本回退</strong></p>
<h4 id="🌼-暂存区"><a href="#🌼-暂存区" class="headerlink" title="🌼. 暂存区"></a>🌼. 暂存区</h4><p>工作区就是我们能看到的文件；版本库就是<code>.git</code>文件夹<br>Git的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<p><img data-src="/images/git/0.jpg" alt="img"></p>
<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>可以简单理解为，<strong>需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</strong></p>
<p>举例说明：</p>
<ol>
<li><p>先对<code>readme.txt</code>做个修改，比如加上一行内容：</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">Git <span class="keyword">is</span> a distributed version control system.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git has a <span class="keyword">mutable</span> index called stage.</span><br></pre></td></tr></table></figure></li>
<li><p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p>
</li>
</ol>
<p>先用<code>git status</code>查看一下状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">truemodified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">trueLICENSE</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>
<p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">truenew file:   LICENSE</span><br><span class="line">truemodified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>现在，暂存区的状态就变成这样了：</p>
<p><img data-src="/images/git/1.jpg" alt="img"></p>
<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;understand how stage works&quot;</span></span><br><span class="line">[master e43a48b] understand how stage works</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure>

<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>
<p><img data-src="/images/git/2.jpg" alt="img"></p>
<h4 id="🌼-撤销修改"><a href="#🌼-撤销修改" class="headerlink" title="🌼. 撤销修改"></a>🌼. 撤销修改</h4><p>1.命令<code>git checkout -- test.py</code>意思就是，把<code>test.py</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<ul>
<li>一种是<code>test.py</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li>
<li>一种是<code>test.py</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li>
</ul>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<p>2.如果你想把<code>test.py</code>文件在暂存区的修改撤销：<br>用命令<code>git reset HEAD </code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD <span class="keyword">test</span>.py</span><br></pre></td></tr></table></figure>

<p>然后在执行<code>git checkout -- test.py</code>就把工作区的修改删除了。</p>
<p><strong>总结</strong>：<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD </code>，就回到了场景1，第二步按场景1操作。</p>
<h4 id="🌼-删除文件"><a href="#🌼-删除文件" class="headerlink" title="🌼. 删除文件"></a>🌼. 删除文件</h4><p>一般情况下，我们通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> test3.py</span><br></pre></td></tr></table></figure>

<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git add/rm &lt;文件&gt;...&quot;</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">&quot;git checkout -- &lt;文件&gt;...&quot;</span> 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">    删除：     test3.py</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br></pre></td></tr></table></figure>

<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm test3.py</span><br><span class="line">rm <span class="string">&#x27;test3.py&#x27;</span></span><br><span class="line">$ git commit -m <span class="string">&quot;remove test3.py&quot;</span></span><br><span class="line">[master 794e84a] remove test3.py</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> delete mode 100644 test3.py</span><br></pre></td></tr></table></figure>

<p>现在，文件就从版本库中被删除了。</p>
<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test3.py</span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”.</p>
<p> 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！ </p>
<h4 id="🌼-分支管理"><a href="#🌼-分支管理" class="headerlink" title="🌼. 分支管理"></a>🌼. 分支管理</h4><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<h5 id="1-创建与合并分支"><a href="#1-创建与合并分支" class="headerlink" title="1. 创建与合并分支"></a>1. 创建与合并分支</h5><p>Git把每次提交都串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。 </p>
<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点： </p>
<p><img data-src="/images/git/0.png" alt="img"></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p>
<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img data-src="/images/git/1.png" alt="img"></p>
<p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<p><img data-src="/images/git/2.png" alt="img"></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并： </p>
<p><img data-src="/images/git/3.png" alt="img"></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<p><img data-src="/images/git/4.png" alt="img"></p>
<p><strong>下面开始实战：</strong></p>
<p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后，用<code>git branch</code>命令查看当前分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>

<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p>
<p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick.</span><br></pre></td></tr></table></figure>

<p>然后提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;branch test&quot;</span></span><br><span class="line">[dev b17d20e] branch <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>

<p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img data-src="/images/git/5.png" alt="img"></p>
<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure>

<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<p><strong>switch：</strong></p>
<p>我们注意到切换分支使用<code>git checkout </code>，而前面讲过的撤销修改则是<code>git checkout -- </code>，同一个命令，有两种作用，确实有点令人迷惑。</p>
<p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p>
<p>创建并切换到新的<code>dev</code>分支，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></table></figure>

<p>直接切换到已有的<code>master</code>分支，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br></pre></td></tr></table></figure>

<p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p>
<h5 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2. 解决冲突"></a>2. 解决冲突</h5><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p>
<p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b feature1</span><br><span class="line">Switched to a new branch <span class="string">&#x27;feature1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改<code>readme.txt</code>最后一行，改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick AND simple.</span><br></pre></td></tr></table></figure>

<p>在<code>feature1</code>分支上提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;AND simple&quot;</span></span><br><span class="line">[feature1 14096d0] AND simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>切换到<code>master</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 1 commit.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br></pre></td></tr></table></figure>

<p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p>
<p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick &amp; simple.</span><br></pre></td></tr></table></figure>

<p>提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;&amp; simple&quot;</span></span><br><span class="line">[master 5dc6824] &amp; simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p>
<p><img data-src="/images/git/6.png" alt="img"></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>

<p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">trueboth modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们可以直接查看readme.txt的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">Creating a new branch is quick &amp; simple.</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">Creating a new branch is quick AND simple.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span></span><br></pre></td></tr></table></figure>

<p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure>

<p>再提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;conflict fixed&quot;</span></span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure>

<p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p><img data-src="/images/git/7.png" alt="img"></p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch <span class="built_in">test</span></span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>

<p>最后，删除<code>feature1</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure>

<p>工作完成。</p>
<h5 id="3-分支策略"><a href="#3-分支策略" class="headerlink" title="3. 分支策略"></a>3. 分支策略</h5><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img data-src="/images/git/8.png" alt="img"></p>
<h5 id="4-git-stash-暂存分支内容"><a href="#4-git-stash-暂存分支内容" class="headerlink" title="4. git stash 暂存分支内容"></a>4. git stash 暂存分支内容</h5><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">truenew file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">truemodified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？**为什么不能直接新建一个分支去修复bug？ 总的来说，就是，在分支下进行的工作，如果不commit的话，回到master，就会显示出你在分支下你添加的工作。这个时候，你在master下修改完bug提交后，正在分支进行的工作也会提交了。为了避免这个情况，你就在分支下，git stash将工作隐藏，这个时候，切换到master时候，修改了bug，提交。分支的内容不会被提交上去。git stash还有一个作用，就是一些情况下，不提交就切换分支，会切换失败，贮藏一下再切换，就没问题了 **</p>
<p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>

<p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch <span class="string">&#x27;issue-101&#x27;</span></span><br></pre></td></tr></table></figure>

<p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;fix bug 101&quot;</span></span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">$ git merge --no-ff -m <span class="string">&quot;merged bug fix 101&quot;</span> issue-101</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> readme.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到<code>dev</code>分支干活了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>

<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">truenew file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">truemodified:   readme.txt</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br></pre></td></tr></table></figure>

<p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p>
<p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p>
<p>有木有更简单的方法？</p>
<p>有！</p>
<p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p>
<p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p>
<p><img data-src="/images/git/6.png" alt="img"></p>
<h5 id="5-多人协作"><a href="#5-多人协作" class="headerlink" title="5. 多人协作"></a>5. 多人协作</h5><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<p>要查看远程库的信息，用<code>git remote</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure>

<p>或者，用<code>git remote -v</code>显示更详细的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure>

<p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p>
<p><strong>推送分支</strong></p>
<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>如果要推送其他分支，比如<code>dev</code>，就改成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure>

<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>
<p><strong>抓取分支</strong></p>
<p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p>
<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:michaelliao/learngit.git</span><br><span class="line">Cloning into <span class="string">&#x27;learngit&#x27;</span>...</span><br><span class="line">remote: Counting objects: 40, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (21/21), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0</span><br><span class="line">Receiving objects: 100% (40/40), <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (14/14), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>

<p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;add env&quot;</span></span><br><span class="line">[dev 7a5e5dd] add env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   f52c633..7a5e5dd  dev -&gt; dev</span><br></pre></td></tr></table></figure>

<p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat env.txt</span><br><span class="line">env</span><br><span class="line"></span><br><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;add new env&quot;</span></span><br><span class="line">[dev 7bd91f1] add new env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;git@github.com:michaelliao/learngit.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">&#x27;git pull ...&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure>

<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>

<p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch <span class="string">&#x27;dev&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;dev&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>再pull：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add/add): Merge conflict <span class="keyword">in</span> env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>

<p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344">解决冲突</a>完全一样。解决后，提交，再push：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;fix env conflict&quot;</span></span><br><span class="line">[dev 57c53ab] fix env conflict</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 6, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure>

<p>因此，多人协作的工作模式通常是这样：</p>
<ol>
<li>首先，可以试图用<code>git push origin </code>推送自己的修改；</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>
<li>如果合并有冲突，则解决冲突，并在本地提交；</li>
<li>没有冲突或者解决掉冲突后，再用<code>git push origin </code>推送就能成功！</li>
</ol>
<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code>。</p>
<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
<h4 id="🌼-公司方法"><a href="#🌼-公司方法" class="headerlink" title="🌼. 公司方法"></a>🌼. 公司方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">push代码：</span><br><span class="line">    1. 先 <span class="string">&quot;git checkout branch&quot;</span> 到branch分支上</span><br><span class="line">    2. “git pull origin master”， 将origin的最新代码拉到master上面</span><br><span class="line">    3. “git checkout -b songge/name”, 新建一个分支，songge/name 是名字</span><br><span class="line">    4. 在新的分支上改自己的代码。</span><br><span class="line">    5. 改完之后 <span class="string">&quot;git status&quot;</span> 看一下。</span><br><span class="line">    6. <span class="string">&quot;git add * * * &quot;</span> 把需要的改动add上去，</span><br><span class="line">    7. <span class="string">&quot;git commit -a &quot;</span>gaidong<span class="string">&quot; &quot;</span> 提交改动。</span><br><span class="line">    8. 注意：错删的，就是不想改了的文件，直接 <span class="string">&quot;git checkout -- wenjianming&quot;</span> 就能恢复</span><br><span class="line">    9. <span class="string">&quot;git log&quot;</span> 查看历史提交</span><br><span class="line">    10. “git commit --amend” 在文件最前面加上 “[workflow] 后面就是songge/name”</span><br><span class="line">    11. <span class="string">&quot;git push&quot;</span>. 就行了</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
